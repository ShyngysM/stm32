
h7a3zi_combine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08009414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00030f6c  240000b4  080094c8  000200b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031020  080094c8  00021020  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002244b  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c7d  00000000  00000000  0004252d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001790  00000000  00000000  000471b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000127c  00000000  00000000  00048940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033128  00000000  00000000  00049bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000198f3  00000000  00000000  0007cce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015582d  00000000  00000000  000965d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000003c  00000000  00000000  001ebe04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cc4  00000000  00000000  001ebe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000146  00000000  00000000  001f1b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000018b4  00000000  00000000  001f1c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b80c 	b.w	8000380 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f008 fe6a 	bl	8009048 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__aeabi_idiv0>:
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <__do_global_dtors_aux>:
 8000384:	b510      	push	{r4, lr}
 8000386:	4c05      	ldr	r4, [pc, #20]	; (800039c <__do_global_dtors_aux+0x18>)
 8000388:	7823      	ldrb	r3, [r4, #0]
 800038a:	b933      	cbnz	r3, 800039a <__do_global_dtors_aux+0x16>
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__do_global_dtors_aux+0x1c>)
 800038e:	b113      	cbz	r3, 8000396 <__do_global_dtors_aux+0x12>
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <__do_global_dtors_aux+0x20>)
 8000392:	f3af 8000 	nop.w
 8000396:	2301      	movs	r3, #1
 8000398:	7023      	strb	r3, [r4, #0]
 800039a:	bd10      	pop	{r4, pc}
 800039c:	240000b4 	.word	0x240000b4
 80003a0:	00000000 	.word	0x00000000
 80003a4:	080092e8 	.word	0x080092e8

080003a8 <frame_dummy>:
 80003a8:	b508      	push	{r3, lr}
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <frame_dummy+0x10>)
 80003ac:	b11b      	cbz	r3, 80003b6 <frame_dummy+0xe>
 80003ae:	4903      	ldr	r1, [pc, #12]	; (80003bc <frame_dummy+0x14>)
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <frame_dummy+0x18>)
 80003b2:	f3af 8000 	nop.w
 80003b6:	bd08      	pop	{r3, pc}
 80003b8:	00000000 	.word	0x00000000
 80003bc:	240000b8 	.word	0x240000b8
 80003c0:	080092e8 	.word	0x080092e8

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 ff37 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f8c5 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 fa5b 	bl	800088c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003d6:	f000 fa05 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80003da:	f000 fa4f 	bl	800087c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80003de:	f000 f93b 	bl	8000658 <MX_ADC1_Init>
  MX_TIM16_Init();
 80003e2:	f000 f9b1 	bl	8000748 <MX_TIM16_Init>
  MX_TIM17_Init();
 80003e6:	f000 f9d7 	bl	8000798 <MX_TIM17_Init>

//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 		// Pumpe
//  HAL_Delay(1500);

//start
  STEPPERS_Init_TMR(&htim17);								// nötig für init look also ISR CODE BEGIN 4
 80003ea:	4852      	ldr	r0, [pc, #328]	; (8000534 <main+0x170>)
 80003ec:	f007 fdc2 	bl	8007f74 <STEPPERS_Init_TMR>
  STEPPER_SetSpeed(STEPPER_MOTOR1, 12); 					// set RPM
 80003f0:	210c      	movs	r1, #12
 80003f2:	2000      	movs	r0, #0
 80003f4:	f007 fe08 	bl	8008008 <STEPPER_SetSpeed>

  measure();
 80003f8:	f000 fb98 	bl	8000b2c <measure>
//  for (j=0; j < i; j++){
//	  uart_buf_len = sprintf(uart_buf, "%lu, %u \r\n", j, sensor_data[j]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
//  }

  analyse();
 80003fc:	f000 fc1a 	bl	8000c34 <analyse>
//  for (j=0; j < i; j++){
//	  uart_buf_len = sprintf(uart_buf, "%lu, %u \r\n", j, sensor_data[j]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
//  }

  uart_buf_len = sprintf(uart_buf, "htime = %lu pulses = %u bad state = %d begin_vibr = %lu  \r\n", htime, pulses, bad, begin_vibr);
 8000400:	4b4d      	ldr	r3, [pc, #308]	; (8000538 <main+0x174>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b4d      	ldr	r3, [pc, #308]	; (800053c <main+0x178>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <main+0x17c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	4b4c      	ldr	r3, [pc, #304]	; (8000544 <main+0x180>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	9100      	str	r1, [sp, #0]
 8000418:	4603      	mov	r3, r0
 800041a:	494b      	ldr	r1, [pc, #300]	; (8000548 <main+0x184>)
 800041c:	484b      	ldr	r0, [pc, #300]	; (800054c <main+0x188>)
 800041e:	f008 f9ad 	bl	800877c <siprintf>
 8000422:	4603      	mov	r3, r0
 8000424:	4a4a      	ldr	r2, [pc, #296]	; (8000550 <main+0x18c>)
 8000426:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
 8000428:	4b49      	ldr	r3, [pc, #292]	; (8000550 <main+0x18c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	b29a      	uxth	r2, r3
 800042e:	2364      	movs	r3, #100	; 0x64
 8000430:	4946      	ldr	r1, [pc, #280]	; (800054c <main+0x188>)
 8000432:	4848      	ldr	r0, [pc, #288]	; (8000554 <main+0x190>)
 8000434:	f006 faaa 	bl	800698c <HAL_UART_Transmit>

  if (bad == false && pulses >= 5){
 8000438:	4b41      	ldr	r3, [pc, #260]	; (8000540 <main+0x17c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	f083 0301 	eor.w	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d05a      	beq.n	80004fc <main+0x138>
 8000446:	4b3d      	ldr	r3, [pc, #244]	; (800053c <main+0x178>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	2b04      	cmp	r3, #4
 800044c:	d956      	bls.n	80004fc <main+0x138>
	  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1048, DIR_CW); 	// rotate 180
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000454:	2000      	movs	r0, #0
 8000456:	f008 f88d 	bl	8008574 <STEPPER_Step_NonBlocking>
	  HAL_Delay(2000);
 800045a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800045e:	f000 ff7f 	bl	8001360 <HAL_Delay>
	  measure();
 8000462:	f000 fb63 	bl	8000b2c <measure>
	  analyse();
 8000466:	f000 fbe5 	bl	8000c34 <analyse>

	  uart_buf_len = sprintf(uart_buf, "htime2 = %lu pulses2 = %u bad state = %d begin_vibr = %lu  \r\n", htime, pulses, bad, begin_vibr);
 800046a:	4b33      	ldr	r3, [pc, #204]	; (8000538 <main+0x174>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	4b33      	ldr	r3, [pc, #204]	; (800053c <main+0x178>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	4b32      	ldr	r3, [pc, #200]	; (8000540 <main+0x17c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <main+0x180>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	9100      	str	r1, [sp, #0]
 8000482:	4603      	mov	r3, r0
 8000484:	4934      	ldr	r1, [pc, #208]	; (8000558 <main+0x194>)
 8000486:	4831      	ldr	r0, [pc, #196]	; (800054c <main+0x188>)
 8000488:	f008 f978 	bl	800877c <siprintf>
 800048c:	4603      	mov	r3, r0
 800048e:	4a30      	ldr	r2, [pc, #192]	; (8000550 <main+0x18c>)
 8000490:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <main+0x18c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	b29a      	uxth	r2, r3
 8000498:	2364      	movs	r3, #100	; 0x64
 800049a:	492c      	ldr	r1, [pc, #176]	; (800054c <main+0x188>)
 800049c:	482d      	ldr	r0, [pc, #180]	; (8000554 <main+0x190>)
 800049e:	f006 fa75 	bl	800698c <HAL_UART_Transmit>

	  if (bad == false && pulses >= 5){
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <main+0x17c>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	f083 0301 	eor.w	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d014      	beq.n	80004da <main+0x116>
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x178>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d910      	bls.n	80004da <main+0x116>
		  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 262, DIR_CCW);		//rotate -45 (262CCW) && pumpe aus
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 7183 	mov.w	r1, #262	; 0x106
 80004be:	2000      	movs	r0, #0
 80004c0:	f008 f858 	bl	8008574 <STEPPER_Step_NonBlocking>
		  HAL_Delay(2000);
 80004c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004c8:	f000 ff4a 	bl	8001360 <HAL_Delay>
		  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 786, DIR_CCW);		//rotate to 0 -> 1048 -262
 80004cc:	2201      	movs	r2, #1
 80004ce:	f240 3112 	movw	r1, #786	; 0x312
 80004d2:	2000      	movs	r0, #0
 80004d4:	f008 f84e 	bl	8008574 <STEPPER_Step_NonBlocking>
	  if (bad == false && pulses >= 5){
 80004d8:	e02a      	b.n	8000530 <main+0x16c>
	  }
	  else{
		  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 262, DIR_CW);		//rotate +45 && pumpe aus
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80004e0:	2000      	movs	r0, #0
 80004e2:	f008 f847 	bl	8008574 <STEPPER_Step_NonBlocking>
		  HAL_Delay(2000);
 80004e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004ea:	f000 ff39 	bl	8001360 <HAL_Delay>
		  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 786, DIR_CW);		//rotate to 360 -> 180 + 45 = 225 need +135
 80004ee:	2200      	movs	r2, #0
 80004f0:	f240 3112 	movw	r1, #786	; 0x312
 80004f4:	2000      	movs	r0, #0
 80004f6:	f008 f83d 	bl	8008574 <STEPPER_Step_NonBlocking>
	  if (bad == false && pulses >= 5){
 80004fa:	e019      	b.n	8000530 <main+0x16c>
	  }
  }
  else{
	  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1048, DIR_CW); 	// rotate 180
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000502:	2000      	movs	r0, #0
 8000504:	f008 f836 	bl	8008574 <STEPPER_Step_NonBlocking>
	  HAL_Delay(2000);
 8000508:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800050c:	f000 ff28 	bl	8001360 <HAL_Delay>
	  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 262, DIR_CW);		//rotate +45 && pumpe aus
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000516:	2000      	movs	r0, #0
 8000518:	f008 f82c 	bl	8008574 <STEPPER_Step_NonBlocking>
	  HAL_Delay(2000);
 800051c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000520:	f000 ff1e 	bl	8001360 <HAL_Delay>
	  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 786, DIR_CW); 	// rotate 180
 8000524:	2200      	movs	r2, #0
 8000526:	f240 3112 	movw	r1, #786	; 0x312
 800052a:	2000      	movs	r0, #0
 800052c:	f008 f822 	bl	8008574 <STEPPER_Step_NonBlocking>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <main+0x16c>
 8000534:	24000180 	.word	0x24000180
 8000538:	24030fe8 	.word	0x24030fe8
 800053c:	24030fe4 	.word	0x24030fe4
 8000540:	24030ff0 	.word	0x24030ff0
 8000544:	24030fec 	.word	0x24030fec
 8000548:	08009300 	.word	0x08009300
 800054c:	24030fa8 	.word	0x24030fa8
 8000550:	24030fdc 	.word	0x24030fdc
 8000554:	240001cc 	.word	0x240001cc
 8000558:	0800933c 	.word	0x0800933c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09c      	sub	sp, #112	; 0x70
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	224c      	movs	r2, #76	; 0x4c
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f008 f8fe 	bl	800876c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2220      	movs	r2, #32
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 f8f8 	bl	800876c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0xf4>)
 800057e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000582:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000586:	2004      	movs	r0, #4
 8000588:	f002 fbb4 	bl	8002cf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b30      	ldr	r3, [pc, #192]	; (8000654 <SystemClock_Config+0xf8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <SystemClock_Config+0xf8>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <SystemClock_Config+0xf8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005a8:	bf00      	nop
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <SystemClock_Config+0xf8>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005b6:	d1f8      	bne.n	80005aa <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xf4>)
 80005ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005bc:	f023 0303 	bic.w	r3, r3, #3
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <SystemClock_Config+0xf4>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005c8:	2321      	movs	r3, #33	; 0x21
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005e2:	2318      	movs	r3, #24
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005f2:	230c      	movs	r3, #12
 80005f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fbd0 	bl	8002da8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800060e:	f000 fbcd 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	233f      	movs	r3, #63	; 0x3f
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f002 ffba 	bl	80035b0 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000642:	f000 fbb3 	bl	8000dac <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3770      	adds	r7, #112	; 0x70
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	58024400 	.word	0x58024400
 8000654:	58024800 	.word	0x58024800

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_ADC1_Init+0xe4>)
 800067e:	4a30      	ldr	r2, [pc, #192]	; (8000740 <MX_ADC1_Init+0xe8>)
 8000680:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_ADC1_Init+0xe4>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_ADC1_Init+0xe4>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_ADC1_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC1_Init+0xe4>)
 8000696:	2204      	movs	r2, #4
 8000698:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_ADC1_Init+0xe4>)
 800069c:	2200      	movs	r2, #0
 800069e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC1_Init+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_ADC1_Init+0xe4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC1_Init+0xe4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_ADC1_Init+0xe4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC1_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0xe4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <MX_ADC1_Init+0xe4>)
 80006da:	f001 f847 	bl	800176c <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 fb62 	bl	8000dac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_ADC1_Init+0xe4>)
 80006f4:	f001 ff88 	bl	8002608 <HAL_ADCEx_MultiModeConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006fe:	f000 fb55 	bl	8000dac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_ADC1_Init+0xec>)
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000714:	2304      	movs	r3, #4
 8000716:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0xe4>)
 8000726:	f001 fb1b 	bl	8001d60 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000730:	f000 fb3c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	240000d0 	.word	0x240000d0
 8000740:	40022000 	.word	0x40022000
 8000744:	3ef08000 	.word	0x3ef08000

08000748 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_TIM16_Init+0x48>)
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_TIM16_Init+0x4c>)
 8000750:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_TIM16_Init+0x48>)
 8000754:	f242 527f 	movw	r2, #9599	; 0x257f
 8000758:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_TIM16_Init+0x48>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_TIM16_Init+0x48>)
 8000762:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000766:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_TIM16_Init+0x48>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_TIM16_Init+0x48>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_TIM16_Init+0x48>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM16_Init+0x48>)
 800077c:	f005 fb52 	bl	8005e24 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000786:	f000 fb11 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	24000134 	.word	0x24000134
 8000794:	40014400 	.word	0x40014400

08000798 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_TIM17_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_TIM17_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_TIM17_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_TIM17_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_TIM17_Init+0x44>)
 80007b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_TIM17_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_TIM17_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_TIM17_Init+0x44>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_TIM17_Init+0x44>)
 80007ca:	f005 fb2b 	bl	8005e24 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80007d4:	f000 faea 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000180 	.word	0x24000180
 80007e0:	40014800 	.word	0x40014800

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_USART3_UART_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <MX_USART3_UART_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_USART3_UART_Init+0x90>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_USART3_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_USART3_UART_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_USART3_UART_Init+0x90>)
 800082e:	f006 f85d 	bl	80068ec <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 fab8 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000840:	f007 f994 	bl	8007b6c <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 faaf 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000852:	f007 f9c9 	bl	8007be8 <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 faa6 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_USART3_UART_Init+0x90>)
 8000862:	f007 f94a 	bl	8007afa <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 fa9e 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	240001cc 	.word	0x240001cc
 8000878:	40004800 	.word	0x40004800

0800087c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b95      	ldr	r3, [pc, #596]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a8:	4a93      	ldr	r2, [pc, #588]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b2:	4b91      	ldr	r3, [pc, #580]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c0:	4b8d      	ldr	r3, [pc, #564]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c6:	4a8c      	ldr	r2, [pc, #560]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d0:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	61fb      	str	r3, [r7, #28]
 80008dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b86      	ldr	r3, [pc, #536]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e4:	4a84      	ldr	r2, [pc, #528]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ee:	4b82      	ldr	r3, [pc, #520]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <MX_GPIO_Init+0x26c>)
 80008fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000902:	4a7d      	ldr	r2, [pc, #500]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b77      	ldr	r3, [pc, #476]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800091c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000920:	4a75      	ldr	r2, [pc, #468]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800092a:	4b73      	ldr	r3, [pc, #460]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800092c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000938:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800093a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093e:	4a6e      	ldr	r2, [pc, #440]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800094a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000958:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095c:	4a66      	ldr	r2, [pc, #408]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000968:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000976:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097a:	4a5f      	ldr	r2, [pc, #380]	; (8000af8 <MX_GPIO_Init+0x26c>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000984:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <MX_GPIO_Init+0x26c>)
 8000986:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	4858      	ldr	r0, [pc, #352]	; (8000afc <MX_GPIO_Init+0x270>)
 800099a:	f002 f991 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	4857      	ldr	r0, [pc, #348]	; (8000b00 <MX_GPIO_Init+0x274>)
 80009a4:	f002 f98c 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f244 0141 	movw	r1, #16449	; 0x4041
 80009ae:	4855      	ldr	r0, [pc, #340]	; (8000b04 <MX_GPIO_Init+0x278>)
 80009b0:	f002 f986 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14|LD2_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f246 0102 	movw	r1, #24578	; 0x6002
 80009ba:	4853      	ldr	r0, [pc, #332]	; (8000b08 <MX_GPIO_Init+0x27c>)
 80009bc:	f002 f980 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 80009c6:	4851      	ldr	r0, [pc, #324]	; (8000b0c <MX_GPIO_Init+0x280>)
 80009c8:	f002 f97a 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	484b      	ldr	r0, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x284>)
 80009e2:	f001 ffbd 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	483f      	ldr	r0, [pc, #252]	; (8000afc <MX_GPIO_Init+0x270>)
 8000a00:	f001 ffae 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a04:	2320      	movs	r3, #32
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4839      	ldr	r0, [pc, #228]	; (8000b00 <MX_GPIO_Init+0x274>)
 8000a1c:	f001 ffa0 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6;
 8000a20:	f244 0341 	movw	r3, #16449	; 0x4041
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4832      	ldr	r0, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x278>)
 8000a3a:	f001 ff91 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|LD2_Pin;
 8000a3e:	f246 0302 	movw	r3, #24578	; 0x6002
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <MX_GPIO_Init+0x27c>)
 8000a58:	f001 ff82 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4826      	ldr	r0, [pc, #152]	; (8000b0c <MX_GPIO_Init+0x280>)
 8000a72:	f001 ff75 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481d      	ldr	r0, [pc, #116]	; (8000b00 <MX_GPIO_Init+0x274>)
 8000a8c:	f001 ff68 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <MX_GPIO_Init+0x274>)
 8000aae:	f001 ff57 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ab2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_GPIO_Init+0x274>)
 8000acc:	f001 ff48 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_14;
 8000ad0:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_GPIO_Init+0x280>)
 8000aea:	f001 ff39 	bl	8002960 <HAL_GPIO_Init>

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58021400 	.word	0x58021400
 8000b00:	58020000 	.word	0x58020000
 8000b04:	58020400 	.word	0x58020400
 8000b08:	58021000 	.word	0x58021000
 8000b0c:	58021800 	.word	0x58021800
 8000b10:	58020800 	.word	0x58020800

08000b14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//calling an ISR for STEPPER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 	STEPPER_TMR_OVF_ISR(htim);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f007 fd55 	bl	80085cc <STEPPER_TMR_OVF_ISR>
 }
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <measure>:

void measure(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start(&htim16); 								// start tim16
 8000b30:	4838      	ldr	r0, [pc, #224]	; (8000c14 <measure+0xe8>)
 8000b32:	f005 f9cf 	bl	8005ed4 <HAL_TIM_Base_Start>
  i = 0;
 8000b36:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <measure+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
  while (tim_val_ms < 10000-1) 								// with presc of 9600 it is exactly 1 sec
 8000b3c:	e05b      	b.n	8000bf6 <measure+0xca>
  {
	HAL_GPIO_WritePin(GPIOG , GPIO_PIN_9, GPIO_PIN_SET); 	// LED yellow
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	4835      	ldr	r0, [pc, #212]	; (8000c1c <measure+0xf0>)
 8000b46:	f002 f8bb 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b50:	4832      	ldr	r0, [pc, #200]	; (8000c1c <measure+0xf0>)
 8000b52:	f002 f8b5 	bl	8002cc0 <HAL_GPIO_WritePin>
	tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <measure+0xe8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <measure+0xf4>)
 8000b60:	801a      	strh	r2, [r3, #0]

	if (tim_val_ms == 2000-1){
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <measure+0xf4>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d103      	bne.n	8000b76 <measure+0x4a>
		begin_vibr = i;										// saving time of begin vibration
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <measure+0xec>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <measure+0xf8>)
 8000b74:	6013      	str	r3, [r2, #0]
	}
	if (tim_val_ms >= 2000-1 && tim_val_ms <= 3000-1){
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <measure+0xf4>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d91e      	bls.n	8000bc0 <measure+0x94>
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <measure+0xf4>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d818      	bhi.n	8000bc0 <measure+0x94>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator on
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	4821      	ldr	r0, [pc, #132]	; (8000c1c <measure+0xf0>)
 8000b96:	f002 f893 	bl	8002cc0 <HAL_GPIO_WritePin>
//		TODO check if it is working without next 2 lines -> plot oszi and mcu compare
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		raw = HAL_ADC_GetValue(&hadc1);
 8000b9a:	4823      	ldr	r0, [pc, #140]	; (8000c28 <measure+0xfc>)
 8000b9c:	f001 f8d2 	bl	8001d44 <HAL_ADC_GetValue>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <measure+0x100>)
 8000ba6:	801a      	strh	r2, [r3, #0]
		sensor_data[i] = raw;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <measure+0xec>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <measure+0x100>)
 8000bae:	8811      	ldrh	r1, [r2, #0]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <measure+0x104>)
 8000bb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <measure+0xec>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <measure+0xec>)
 8000bbe:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Start(&hadc1);
 8000bc0:	4819      	ldr	r0, [pc, #100]	; (8000c28 <measure+0xfc>)
 8000bc2:	f000 ff2d 	bl	8001a20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bca:	4817      	ldr	r0, [pc, #92]	; (8000c28 <measure+0xfc>)
 8000bcc:	f000 ffe2 	bl	8001b94 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <measure+0xfc>)
 8000bd2:	f001 f8b7 	bl	8001d44 <HAL_ADC_GetValue>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <measure+0x100>)
 8000bdc:	801a      	strh	r2, [r3, #0]
	sensor_data[i] = raw;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <measure+0xec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <measure+0x100>)
 8000be4:	8811      	ldrh	r1, [r2, #0]
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <measure+0x104>)
 8000be8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	i++;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <measure+0xec>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <measure+0xec>)
 8000bf4:	6013      	str	r3, [r2, #0]
  while (tim_val_ms < 10000-1) 								// with presc of 9600 it is exactly 1 sec
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <measure+0xf4>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	f242 720e 	movw	r2, #9998	; 0x270e
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d99d      	bls.n	8000b3e <measure+0x12>
  }
	HAL_GPIO_WritePin(GPIOG , GPIO_PIN_9, GPIO_PIN_RESET); 	// LED yellow
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <measure+0xf0>)
 8000c0a:	f002 f859 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000134 	.word	0x24000134
 8000c18:	24030fa0 	.word	0x24030fa0
 8000c1c:	58021800 	.word	0x58021800
 8000c20:	2400025c 	.word	0x2400025c
 8000c24:	24030fec 	.word	0x24030fec
 8000c28:	240000d0 	.word	0x240000d0
 8000c2c:	24030fe0 	.word	0x24030fe0
 8000c30:	24000260 	.word	0x24000260

08000c34 <analyse>:
//
void analyse(void){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	// digitalize signal v:[0,1]
	for (j = 0; j <= i; j++) {
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <analyse+0x158>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e01a      	b.n	8000c76 <analyse+0x42>
		if (sensor_data[j] < 39718){  		//aprox. 2V
 8000c40:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <analyse+0x158>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <analyse+0x15c>)
 8000c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4a:	f649 3225 	movw	r2, #39717	; 0x9b25
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d806      	bhi.n	8000c60 <analyse+0x2c>
			sensor_data[j] = 0;
 8000c52:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <analyse+0x158>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a4e      	ldr	r2, [pc, #312]	; (8000d90 <analyse+0x15c>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c5e:	e005      	b.n	8000c6c <analyse+0x38>
		}
		else{
			sensor_data[j] = 1;
 8000c60:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <analyse+0x158>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a4a      	ldr	r2, [pc, #296]	; (8000d90 <analyse+0x15c>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (j = 0; j <= i; j++) {
 8000c6c:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <analyse+0x158>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <analyse+0x158>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <analyse+0x158>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <analyse+0x160>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d9de      	bls.n	8000c40 <analyse+0xc>
		}
	}
	// count pulses
	for (j = 0; j <= i; j++){
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <analyse+0x158>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e029      	b.n	8000cde <analyse+0xaa>
		edge = sensor_data[j+1] - sensor_data[j];
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <analyse+0x158>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a3f      	ldr	r2, [pc, #252]	; (8000d90 <analyse+0x15c>)
 8000c92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <analyse+0x158>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	493d      	ldr	r1, [pc, #244]	; (8000d90 <analyse+0x15c>)
 8000c9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <analyse+0x164>)
 8000ca6:	801a      	strh	r2, [r3, #0]
		if (edge == 1){ 					// count only negative pulses
 8000ca8:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <analyse+0x164>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <analyse+0x88>
			pulses++;
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <analyse+0x168>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <analyse+0x168>)
 8000cba:	801a      	strh	r2, [r3, #0]
		}
		if (sensor_data[j] == 1){
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <analyse+0x158>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <analyse+0x15c>)
 8000cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <analyse+0xa0>
			htime++;
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <analyse+0x16c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <analyse+0x16c>)
 8000cd2:	6013      	str	r3, [r2, #0]
	for (j = 0; j <= i; j++){
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <analyse+0x158>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a2c      	ldr	r2, [pc, #176]	; (8000d8c <analyse+0x158>)
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <analyse+0x158>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <analyse+0x160>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d9cf      	bls.n	8000c8a <analyse+0x56>
		}
	}
	// check if sensor been open before vibration
	for (j = 0; j <= begin_vibr; j++){
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <analyse+0x158>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e018      	b.n	8000d24 <analyse+0xf0>
		if (sensor_data[j] ^ sensor_data[j+1]){
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <analyse+0x158>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <analyse+0x15c>)
 8000cf8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <analyse+0x158>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4923      	ldr	r1, [pc, #140]	; (8000d90 <analyse+0x15c>)
 8000d04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d003      	beq.n	8000d14 <analyse+0xe0>
			bad = true;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <analyse+0x170>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e002      	b.n	8000d1a <analyse+0xe6>
		}
		else{
			bad = false;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <analyse+0x170>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	for (j = 0; j <= begin_vibr; j++){
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <analyse+0x158>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <analyse+0x158>)
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <analyse+0x158>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <analyse+0x174>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d9e0      	bls.n	8000cf2 <analyse+0xbe>
		}
	}
	// check if sensor been open after vibration + Einschwingungszeit
	for (j = begin_vibr + 36500; j<=i; j++){
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <analyse+0x174>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f648 6394 	movw	r3, #36500	; 0x8e94
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <analyse+0x158>)
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e018      	b.n	8000d72 <analyse+0x13e>
		if (sensor_data[j] ^ sensor_data[j+1]){
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <analyse+0x158>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <analyse+0x15c>)
 8000d46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <analyse+0x158>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	490f      	ldr	r1, [pc, #60]	; (8000d90 <analyse+0x15c>)
 8000d52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d003      	beq.n	8000d62 <analyse+0x12e>
			bad = true;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <analyse+0x170>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e002      	b.n	8000d68 <analyse+0x134>
		}
		else{
			bad = false;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <analyse+0x170>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
	for (j = begin_vibr + 36500; j<=i; j++){
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <analyse+0x158>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <analyse+0x158>)
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <analyse+0x158>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <analyse+0x160>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d9e0      	bls.n	8000d40 <analyse+0x10c>
		}
	}
	//find on ratio
//	t_rl = htime * 1/i;
//	on_ratio = t_rl/1000;
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	24030fa4 	.word	0x24030fa4
 8000d90:	24000260 	.word	0x24000260
 8000d94:	24030fa0 	.word	0x24030fa0
 8000d98:	24030fe2 	.word	0x24030fe2
 8000d9c:	24030fe4 	.word	0x24030fe4
 8000da0:	24030fe8 	.word	0x24030fe8
 8000da4:	24030ff0 	.word	0x24030ff0
 8000da8:	24030fec 	.word	0x24030fec

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <Error_Handler+0x8>

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	58024400 	.word	0x58024400

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b8      	sub	sp, #224	; 0xe0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	22b8      	movs	r2, #184	; 0xb8
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fcad 	bl	800876c <memset>
  if(hadc->Instance==ADC1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <HAL_ADC_MspInit+0xd4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d14c      	bne.n	8000eb6 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 ff3b 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e58:	f7ff ffa8 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e6e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e80:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_ADC_MspInit+0xd8>)
 8000e8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_ADC_MspInit+0xdc>)
 8000eb2:	f001 fd55 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	37e0      	adds	r7, #224	; 0xe0
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020000 	.word	0x58020000

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_TIM_Base_MspInit+0x74>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10f      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000ee0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000ef0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000efc:	e01b      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_TIM_Base_MspInit+0x7c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d116      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000f0a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_TIM_Base_MspInit+0x78>)
 8000f1a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2076      	movs	r0, #118	; 0x76
 8000f2c:	f001 fce3 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000f30:	2076      	movs	r0, #118	; 0x76
 8000f32:	f001 fcfa 	bl	800292a <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40014400 	.word	0x40014400
 8000f44:	58024400 	.word	0x58024400
 8000f48:	40014800 	.word	0x40014800

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b8      	sub	sp, #224	; 0xe0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	22b8      	movs	r2, #184	; 0xb8
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 fbfd 	bl	800876c <memset>
  if(huart->Instance==USART3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a25      	ldr	r2, [pc, #148]	; (800100c <HAL_UART_MspInit+0xc0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d142      	bne.n	8001002 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fe9c 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f96:	f7ff ff09 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000f9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000fac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0xc4>)
 8000fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_UART_MspInit+0xc8>)
 8000ffe:	f001 fcaf 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	37e0      	adds	r7, #224	; 0xe0
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004800 	.word	0x40004800
 8001010:	58024400 	.word	0x58024400
 8001014:	58020c00 	.word	0x58020c00

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f957 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM17_IRQHandler+0x10>)
 800107e:	f005 f811 	bl	80060a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24000180 	.word	0x24000180

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f007 fb2c 	bl	8008718 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24100000 	.word	0x24100000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	24030ff4 	.word	0x24030ff4
 80010f4:	24031020 	.word	0x24031020

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <SystemInit+0xd0>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <SystemInit+0xd0>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <SystemInit+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	2b02      	cmp	r3, #2
 8001116:	d807      	bhi.n	8001128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <SystemInit+0xd4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 030f 	bic.w	r3, r3, #15
 8001120:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <SystemInit+0xd4>)
 8001122:	f043 0303 	orr.w	r3, r3, #3
 8001126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <SystemInit+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <SystemInit+0xd8>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <SystemInit+0xd8>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <SystemInit+0xd8>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <SystemInit+0xd8>)
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <SystemInit+0xdc>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <SystemInit+0xd4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <SystemInit+0xd4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 030f 	bic.w	r3, r3, #15
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <SystemInit+0xd4>)
 800115c:	f043 0303 	orr.w	r3, r3, #3
 8001160:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <SystemInit+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <SystemInit+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <SystemInit+0xd8>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <SystemInit+0xd8>)
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <SystemInit+0xe0>)
 8001178:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <SystemInit+0xd8>)
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <SystemInit+0xe4>)
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <SystemInit+0xd8>)
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <SystemInit+0xe8>)
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <SystemInit+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <SystemInit+0xd8>)
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <SystemInit+0xe8>)
 8001190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <SystemInit+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <SystemInit+0xd8>)
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <SystemInit+0xe8>)
 800119c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <SystemInit+0xd8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <SystemInit+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <SystemInit+0xd8>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SystemInit+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <SystemInit+0xec>)
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	52002000 	.word	0x52002000
 80011d0:	58024400 	.word	0x58024400
 80011d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d8:	02020200 	.word	0x02020200
 80011dc:	01ff0000 	.word	0x01ff0000
 80011e0:	01010280 	.word	0x01010280
 80011e4:	52004000 	.word	0x52004000

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ec:	f7ff ff84 	bl	80010f8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001216:	f007 fa85 	bl	8008724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff f8d3 	bl	80003c4 <main>
  bx  lr
 800121e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001228:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 800122c:	08009414 	.word	0x08009414
  ldr r2, =_sbss
 8001230:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8001234:	24031020 	.word	0x24031020

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f001 fb4c 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001248:	f002 fb68 	bl	800391c <HAL_RCC_GetSysClockFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	4913      	ldr	r1, [pc, #76]	; (80012a8 <HAL_Init+0x6c>)
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_Init+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_Init+0x6c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x70>)
 800127e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_Init+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f814 	bl	80012b4 <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e002      	b.n	800129c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fd8f 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	0800937c 	.word	0x0800937c
 80012ac:	24000004 	.word	0x24000004
 80012b0:	24000000 	.word	0x24000000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_InitTick+0x64>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb31 	bl	8002946 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	f001 fafb 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x68>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2400000c 	.word	0x2400000c
 8001318:	24000000 	.word	0x24000000
 800131c:	24000008 	.word	0x24000008

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2400000c 	.word	0x2400000c
 8001344:	24030ff8 	.word	0x24030ff8

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	24030ff8 	.word	0x24030ff8

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2400000c 	.word	0x2400000c

080013a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3360      	adds	r3, #96	; 0x60
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	430b      	orrs	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	431a      	orrs	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	611a      	str	r2, [r3, #16]
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001482:	b480      	push	{r7}
 8001484:	b087      	sub	sp, #28
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3360      	adds	r3, #96	; 0x60
 8001492:	461a      	mov	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]
  }
}
 80014ac:	bf00      	nop
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014de:	b480      	push	{r7}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3330      	adds	r3, #48	; 0x30
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	4413      	add	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	211f      	movs	r1, #31
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	f003 011f 	and.w	r1, r3, #31
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3314      	adds	r3, #20
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0e5b      	lsrs	r3, r3, #25
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0d1b      	lsrs	r3, r3, #20
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2107      	movs	r1, #7
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0d1b      	lsrs	r3, r3, #20
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0318 	and.w	r3, r3, #24
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015b0:	40d9      	lsrs	r1, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	400b      	ands	r3, r1
 80015b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	000fffff 	.word	0x000fffff

080015d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 031f 	and.w	r3, r3, #31
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <LL_ADC_DisableDeepPowerDown+0x20>)
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6093      	str	r3, [r2, #8]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	5fffffc0 	.word	0x5fffffc0

08001630 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001644:	d101      	bne.n	800164a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <LL_ADC_EnableInternalRegulator+0x24>)
 8001666:	4013      	ands	r3, r2
 8001668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	6fffffc0 	.word	0x6fffffc0

08001680 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001694:	d101      	bne.n	800169a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <LL_ADC_Enable+0x24>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	7fffffc0 	.word	0x7fffffc0

080016d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <LL_ADC_IsEnabled+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_ADC_IsEnabled+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_ADC_REG_StartConversion+0x24>)
 8001706:	4013      	ands	r3, r2
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	7fffffc0 	.word	0x7fffffc0

08001720 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b04      	cmp	r3, #4
 8001732:	d101      	bne.n	8001738 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b08      	cmp	r3, #8
 8001758:	d101      	bne.n	800175e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e138      	b.n	80019f8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fb29 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff3f 	bl	8001630 <LL_ADC_IsDeepPowerDownEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff25 	bl	800160c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff5a 	bl	8001680 <LL_ADC_IsInternalRegulatorEnabled>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d114      	bne.n	80017fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff3e 	bl	8001658 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017dc:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_ADC_Init+0x294>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	4a88      	ldr	r2, [pc, #544]	; (8001a04 <HAL_ADC_Init+0x298>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	3301      	adds	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ee:	e002      	b.n	80017f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff3d 	bl	8001680 <LL_ADC_IsInternalRegulatorEnabled>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff77 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001832:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 80d2 	bne.w	80019e6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 80ce 	bne.w	80019e6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001852:	f043 0202 	orr.w	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff36 	bl	80016d0 <LL_ADC_IsEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d110      	bne.n	800188c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800186a:	4867      	ldr	r0, [pc, #412]	; (8001a08 <HAL_ADC_Init+0x29c>)
 800186c:	f7ff ff30 	bl	80016d0 <LL_ADC_IsEnabled>
 8001870:	4604      	mov	r4, r0
 8001872:	4866      	ldr	r0, [pc, #408]	; (8001a0c <HAL_ADC_Init+0x2a0>)
 8001874:	f7ff ff2c 	bl	80016d0 <LL_ADC_IsEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	4323      	orrs	r3, r4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4619      	mov	r1, r3
 8001886:	4862      	ldr	r0, [pc, #392]	; (8001a10 <HAL_ADC_Init+0x2a4>)
 8001888:	f7ff fd8e 	bl	80013a8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7d5b      	ldrb	r3, [r3, #21]
 8001890:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001896:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800189c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7f1b      	ldrb	r3, [r3, #28]
 80018a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	045b      	lsls	r3, r3, #17
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_ADC_Init+0x2a8>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	69b9      	ldr	r1, [r7, #24]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff14 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 80018f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff21 	bl	8001746 <LL_ADC_INJ_IsConversionOngoing>
 8001904:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d14a      	bne.n	80019a2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d147      	bne.n	80019a2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7d1b      	ldrb	r3, [r3, #20]
 8001916:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_ADC_Init+0x2ac>)
 8001928:	4013      	ands	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	430b      	orrs	r3, r1
 8001932:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800193a:	2b01      	cmp	r3, #1
 800193c:	d11b      	bne.n	8001976 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_ADC_Init+0x2b0>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001952:	3a01      	subs	r2, #1
 8001954:	0411      	lsls	r1, r2, #16
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001960:	4311      	orrs	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001966:	430a      	orrs	r2, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fd41 	bl	8002424 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10c      	bne.n	80019c4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f023 010f 	bic.w	r1, r3, #15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
 80019c2:	e007      	b.n	80019d4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020f 	bic.w	r2, r2, #15
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3724      	adds	r7, #36	; 0x24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	24000000 	.word	0x24000000
 8001a04:	053e2d63 	.word	0x053e2d63
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40022100 	.word	0x40022100
 8001a10:	40022300 	.word	0x40022300
 8001a14:	fff0c003 	.word	0xfff0c003
 8001a18:	ffffbffc 	.word	0xffffbffc
 8001a1c:	fc00f81e 	.word	0xfc00f81e

08001a20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a28:	4856      	ldr	r0, [pc, #344]	; (8001b84 <HAL_ADC_Start+0x164>)
 8001a2a:	f7ff fdd3 	bl	80015d4 <LL_ADC_GetMultimode>
 8001a2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe73 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 809a 	bne.w	8001b76 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Start+0x30>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e095      	b.n	8001b7c <HAL_ADC_Start+0x15c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fc67 	bl	800232c <ADC_Enable>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8081 	bne.w	8001b6c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_ADC_Start+0x168>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <HAL_ADC_Start+0x16c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d002      	beq.n	8001a8a <HAL_ADC_Start+0x6a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_Start+0x6c>
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_ADC_Start+0x170>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d002      	beq.n	8001a9a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f023 0206 	bic.w	r2, r3, #6
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	221c      	movs	r2, #28
 8001ace:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_ADC_Start+0x16c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d002      	beq.n	8001ae8 <HAL_ADC_Start+0xc8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_Start+0xca>
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_ADC_Start+0x170>)
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d008      	beq.n	8001b04 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d002      	beq.n	8001b04 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d114      	bne.n	8001b2e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fde6 	bl	80016f8 <LL_ADC_REG_StartConversion>
 8001b2c:	e025      	b.n	8001b7a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_ADC_Start+0x16c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_Start+0x12a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	e000      	b.n	8001b4c <HAL_ADC_Start+0x12c>
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_ADC_Start+0x170>)
 8001b4c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00f      	beq.n	8001b7a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
 8001b6a:	e006      	b.n	8001b7a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b74:	e001      	b.n	8001b7a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022300 	.word	0x40022300
 8001b88:	fffff0fe 	.word	0xfffff0fe
 8001b8c:	40022100 	.word	0x40022100
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b9e:	4866      	ldr	r0, [pc, #408]	; (8001d38 <HAL_ADC_PollForConversion+0x1a4>)
 8001ba0:	f7ff fd18 	bl	80015d4 <LL_ADC_GetMultimode>
 8001ba4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d102      	bne.n	8001bb4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e02a      	b.n	8001c0a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	d111      	bne.n	8001bea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f043 0220 	orr.w	r2, r3, #32
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0a4      	b.n	8001d2e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001be4:	2304      	movs	r3, #4
 8001be6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001be8:	e00f      	b.n	8001c0a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bea:	4853      	ldr	r0, [pc, #332]	; (8001d38 <HAL_ADC_PollForConversion+0x1a4>)
 8001bec:	f7ff fd00 	bl	80015f0 <LL_ADC_GetMultiDMATransfer>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e093      	b.n	8001d2e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c06:	2304      	movs	r3, #4
 8001c08:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c0a:	f7ff fb9d 	bl	8001348 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c10:	e021      	b.n	8001c56 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c18:	d01d      	beq.n	8001c56 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c1a:	f7ff fb95 	bl	8001348 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <HAL_ADC_PollForConversion+0x9c>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d112      	bne.n	8001c56 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10b      	bne.n	8001c56 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	f043 0204 	orr.w	r2, r3, #4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e06b      	b.n	8001d2e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0d6      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fc1f 	bl	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01c      	beq.n	8001cba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7d5b      	ldrb	r3, [r3, #21]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d111      	bne.n	8001cba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_ADC_PollForConversion+0x1a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d002      	beq.n	8001cca <HAL_ADC_PollForConversion+0x136>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e000      	b.n	8001ccc <HAL_ADC_PollForConversion+0x138>
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_ADC_PollForConversion+0x1ac>)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d008      	beq.n	8001ce6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d002      	beq.n	8001ce6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	d104      	bne.n	8001cf0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e00c      	b.n	8001d0a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <HAL_ADC_PollForConversion+0x1a8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d002      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x16c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_PollForConversion+0x16e>
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_ADC_PollForConversion+0x1ac>)
 8001d02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d104      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2208      	movs	r2, #8
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e008      	b.n	8001d2c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	220c      	movs	r2, #12
 8001d2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022300 	.word	0x40022300
 8001d3c:	40022100 	.word	0x40022100
 8001d40:	40022000 	.word	0x40022000

08001d44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b0a1      	sub	sp, #132	; 0x84
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_ADC_ConfigChannel+0x284>)
 8001d7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x2a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e2bc      	b.n	8002304 <HAL_ADC_ConfigChannel+0x5a4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fcc2 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 82a1 	bne.w	80022e6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x62>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2201      	movs	r2, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	e016      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e003      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2201      	movs	r2, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	69d1      	ldr	r1, [r2, #28]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6859      	ldr	r1, [r3, #4]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff fb67 	bl	80014de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fc83 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001e1a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fc90 	bl	8001746 <LL_ADC_INJ_IsConversionOngoing>
 8001e26:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 80a0 	bne.w	8001f70 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 809c 	bne.w	8001f70 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	461a      	mov	r2, r3
 8001e46:	f7ff fb76 	bl	8001536 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x110>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	e00a      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x126>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d027      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6919      	ldr	r1, [r3, #16]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9e:	f7ff fab7 	bl	8001410 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7e5b      	ldrb	r3, [r3, #25]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x158>
 8001eb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001eb6:	e000      	b.n	8001eba <HAL_ADC_ConfigChannel+0x15a>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f7ff fae1 	bl	8001482 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6919      	ldr	r1, [r3, #16]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x176>
 8001ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ed4:	e000      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x178>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f7ff fab9 	bl	8001450 <LL_ADC_SetDataRightShift>
 8001ede:	e047      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	069b      	lsls	r3, r3, #26
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f02:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	069b      	lsls	r3, r3, #26
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f26:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f4a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f6e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fbab 	bl	80016d0 <LL_ADC_IsEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 81bb 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f7ff fafc 	bl	800158c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <HAL_ADC_ConfigChannel+0x284>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	f040 8130 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x268>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e01b      	b.n	8002000 <HAL_ADC_ConfigChannel+0x2a0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e005      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x290>
 8001fe4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	bf94      	ite	ls
 8001ffa:	2301      	movls	r3, #1
 8001ffc:	2300      	movhi	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002000:	2b00      	cmp	r3, #0
 8002002:	d079      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x2c0>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	3301      	adds	r3, #1
 8002018:	069b      	lsls	r3, r3, #26
 800201a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201e:	e015      	b.n	800204c <HAL_ADC_ConfigChannel+0x2ec>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800202e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002030:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_ADC_ConfigChannel+0x30c>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	e017      	b.n	800209c <HAL_ADC_ConfigChannel+0x33c>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800207e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x362>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	051b      	lsls	r3, r3, #20
 80020c0:	e018      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x394>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80020de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f4:	430b      	orrs	r3, r1
 80020f6:	e07e      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x3b4>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	069b      	lsls	r3, r3, #26
 800210e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002112:	e015      	b.n	8002140 <HAL_ADC_ConfigChannel+0x3e0>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	069b      	lsls	r3, r3, #26
 800213c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x400>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	3301      	adds	r3, #1
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	e017      	b.n	8002190 <HAL_ADC_ConfigChannel+0x430>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	61bb      	str	r3, [r7, #24]
  return result;
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	ea42 0103 	orr.w	r1, r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x45c>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	3b1e      	subs	r3, #30
 80021b4:	051b      	lsls	r3, r3, #20
 80021b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ba:	e01b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x494>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	60fb      	str	r3, [r7, #12]
  return result;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	051b      	lsls	r3, r3, #20
 80021f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f4:	430b      	orrs	r3, r1
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	6892      	ldr	r2, [r2, #8]
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7ff f99b 	bl	8001536 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	da77      	bge.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002208:	4840      	ldr	r0, [pc, #256]	; (800230c <HAL_ADC_ConfigChannel+0x5ac>)
 800220a:	f7ff f8f3 	bl	80013f4 <LL_ADC_GetCommonPathInternalCh>
 800220e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002210:	483f      	ldr	r0, [pc, #252]	; (8002310 <HAL_ADC_ConfigChannel+0x5b0>)
 8002212:	f7ff fa5d 	bl	80016d0 <LL_ADC_IsEnabled>
 8002216:	4604      	mov	r4, r0
 8002218:	483e      	ldr	r0, [pc, #248]	; (8002314 <HAL_ADC_ConfigChannel+0x5b4>)
 800221a:	f7ff fa59 	bl	80016d0 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	4323      	orrs	r3, r4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d155      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_ADC_ConfigChannel+0x5b8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d122      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x516>
 8002230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11d      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a35      	ldr	r2, [pc, #212]	; (8002314 <HAL_ADC_ConfigChannel+0x5b4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d159      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800224a:	4619      	mov	r1, r3
 800224c:	482f      	ldr	r0, [pc, #188]	; (800230c <HAL_ADC_ConfigChannel+0x5ac>)
 800224e:	f7ff f8be 	bl	80013ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_ADC_ConfigChannel+0x5bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	4a31      	ldr	r2, [pc, #196]	; (8002320 <HAL_ADC_ConfigChannel+0x5c0>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	3301      	adds	r3, #1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002266:	e002      	b.n	800226e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3b01      	subs	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002274:	e040      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_ADC_ConfigChannel+0x5c4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d111      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x544>
 8002280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_ADC_ConfigChannel+0x5b4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d131      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	4619      	mov	r1, r3
 800229c:	481b      	ldr	r0, [pc, #108]	; (800230c <HAL_ADC_ConfigChannel+0x5ac>)
 800229e:	f7ff f896 	bl	80013ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a2:	e029      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_ADC_ConfigChannel+0x5c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d124      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
 80022ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11f      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_ADC_ConfigChannel+0x5b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c8:	4619      	mov	r1, r3
 80022ca:	4810      	ldr	r0, [pc, #64]	; (800230c <HAL_ADC_ConfigChannel+0x5ac>)
 80022cc:	f7ff f87f 	bl	80013ce <LL_ADC_SetCommonPathInternalCh>
 80022d0:	e012      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 0220 	orr.w	r2, r3, #32
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022e4:	e008      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002300:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002304:	4618      	mov	r0, r3
 8002306:	3784      	adds	r7, #132	; 0x84
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	40022300 	.word	0x40022300
 8002310:	40022000 	.word	0x40022000
 8002314:	40022100 	.word	0x40022100
 8002318:	cb840000 	.word	0xcb840000
 800231c:	24000000 	.word	0x24000000
 8002320:	053e2d63 	.word	0x053e2d63
 8002324:	bac04000 	.word	0xbac04000
 8002328:	cfb80000 	.word	0xcfb80000

0800232c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f9c9 	bl	80016d0 <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d161      	bne.n	8002408 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4b32      	ldr	r3, [pc, #200]	; (8002414 <ADC_Enable+0xe8>)
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0210 	orr.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04d      	b.n	800240a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f998 	bl	80016a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002378:	f7fe ffe6 	bl	8001348 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237e:	4826      	ldr	r0, [pc, #152]	; (8002418 <ADC_Enable+0xec>)
 8002380:	f7ff f928 	bl	80015d4 <LL_ADC_GetMultimode>
 8002384:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a24      	ldr	r2, [pc, #144]	; (800241c <ADC_Enable+0xf0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d002      	beq.n	8002396 <ADC_Enable+0x6a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e000      	b.n	8002398 <ADC_Enable+0x6c>
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <ADC_Enable+0xf4>)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d130      	bne.n	8002408 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023a6:	e028      	b.n	80023fa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f98f 	bl	80016d0 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f973 	bl	80016a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023c2:	f7fe ffc1 	bl	8001348 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d914      	bls.n	80023fa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d00d      	beq.n	80023fa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e007      	b.n	800240a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d1cf      	bne.n	80023a8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	8000003f 	.word	0x8000003f
 8002418:	40022300 	.word	0x40022300
 800241c:	40022100 	.word	0x40022100
 8002420:	40022000 	.word	0x40022000

08002424 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800242c:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <ADC_ConfigureBoostMode+0x188>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002438:	f001 fbea 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 800243c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002446:	d010      	beq.n	800246a <ADC_ConfigureBoostMode+0x46>
 8002448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800244c:	d871      	bhi.n	8002532 <ADC_ConfigureBoostMode+0x10e>
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d002      	beq.n	800245a <ADC_ConfigureBoostMode+0x36>
 8002454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002458:	d16b      	bne.n	8002532 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	60fb      	str	r3, [r7, #12]
        break;
 8002468:	e066      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
        break;
 8002470:	e062      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002472:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002476:	f002 fb33 	bl	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq>
 800247a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002484:	d051      	beq.n	800252a <ADC_ConfigureBoostMode+0x106>
 8002486:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800248a:	d854      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 800248c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002490:	d047      	beq.n	8002522 <ADC_ConfigureBoostMode+0xfe>
 8002492:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002496:	d84e      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 8002498:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800249c:	d03d      	beq.n	800251a <ADC_ConfigureBoostMode+0xf6>
 800249e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024a2:	d848      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a8:	d033      	beq.n	8002512 <ADC_ConfigureBoostMode+0xee>
 80024aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ae:	d842      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024b4:	d029      	beq.n	800250a <ADC_ConfigureBoostMode+0xe6>
 80024b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024ba:	d83c      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024c0:	d01a      	beq.n	80024f8 <ADC_ConfigureBoostMode+0xd4>
 80024c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024c6:	d836      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024cc:	d014      	beq.n	80024f8 <ADC_ConfigureBoostMode+0xd4>
 80024ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024d2:	d830      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d8:	d00e      	beq.n	80024f8 <ADC_ConfigureBoostMode+0xd4>
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024de:	d82a      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024e4:	d008      	beq.n	80024f8 <ADC_ConfigureBoostMode+0xd4>
 80024e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024ea:	d824      	bhi.n	8002536 <ADC_ConfigureBoostMode+0x112>
 80024ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f0:	d002      	beq.n	80024f8 <ADC_ConfigureBoostMode+0xd4>
 80024f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024f6:	d11e      	bne.n	8002536 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c9b      	lsrs	r3, r3, #18
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	60fb      	str	r3, [r7, #12]
        break;
 8002508:	e016      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
        break;
 8002510:	e012      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	60fb      	str	r3, [r7, #12]
        break;
 8002518:	e00e      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	60fb      	str	r3, [r7, #12]
        break;
 8002520:	e00a      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	09db      	lsrs	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
        break;
 8002528:	e006      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	60fb      	str	r3, [r7, #12]
        break;
 8002530:	e002      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
        break;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002536:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <ADC_ConfigureBoostMode+0x18c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d808      	bhi.n	8002558 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002554:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002556:	e025      	b.n	80025a4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <ADC_ConfigureBoostMode+0x190>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d80a      	bhi.n	8002576 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	e016      	b.n	80025a4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <ADC_ConfigureBoostMode+0x194>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d80a      	bhi.n	8002594 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002590:	609a      	str	r2, [r3, #8]
}
 8002592:	e007      	b.n	80025a4 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40022300 	.word	0x40022300
 80025b0:	005f5e10 	.word	0x005f5e10
 80025b4:	00bebc20 	.word	0x00bebc20
 80025b8:	017d7840 	.word	0x017d7840

080025bc <LL_ADC_IsEnabled>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <LL_ADC_IsEnabled+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_ADC_IsEnabled+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d101      	bne.n	80025fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b09f      	sub	sp, #124	; 0x7c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002622:	2302      	movs	r3, #2
 8002624:	e080      	b.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002640:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e001      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e05f      	b.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffb9 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 8002670:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ffb3 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d141      	bne.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	2b00      	cmp	r3, #0
 8002686:	d13e      	bne.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800268a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a6:	4822      	ldr	r0, [pc, #136]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80026a8:	f7ff ff88 	bl	80025bc <LL_ADC_IsEnabled>
 80026ac:	4604      	mov	r4, r0
 80026ae:	4821      	ldr	r0, [pc, #132]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80026b0:	f7ff ff84 	bl	80025bc <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4323      	orrs	r3, r4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12e      	bne.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	e021      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e2:	4813      	ldr	r0, [pc, #76]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80026e4:	f7ff ff6a 	bl	80025bc <LL_ADC_IsEnabled>
 80026e8:	4604      	mov	r4, r0
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80026ec:	f7ff ff66 	bl	80025bc <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80026fe:	4013      	ands	r3, r2
 8002700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002702:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002704:	e009      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002718:	e000      	b.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800271a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002724:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002728:	4618      	mov	r0, r3
 800272a:	377c      	adds	r7, #124	; 0x7c
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	40022100 	.word	0x40022100
 8002738:	40022300 	.word	0x40022300
 800273c:	fffff0e0 	.word	0xfffff0e0

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00
 8002784:	05fa0000 	.word	0x05fa0000

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff29 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff40 	bl	8002788 <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff90 	bl	8002834 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5f 	bl	80027e0 <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff33 	bl	80027a4 <__NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffa4 	bl	800289c <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800296e:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_GPIO_Init+0x234>)
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002972:	e194      	b.n	8002c9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8186 	beq.w	8002c98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x44>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d017      	beq.n	8002a42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d123      	bne.n	8002a96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	69b9      	ldr	r1, [r7, #24]
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80e0 	beq.w	8002c98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x238>)
 8002ada:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_GPIO_Init+0x238>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_GPIO_Init+0x238>)
 8002aea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af6:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <HAL_GPIO_Init+0x23c>)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_GPIO_Init+0x240>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d052      	beq.n	8002bc8 <HAL_GPIO_Init+0x268>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_GPIO_Init+0x244>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d031      	beq.n	8002b8e <HAL_GPIO_Init+0x22e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_GPIO_Init+0x248>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02b      	beq.n	8002b8a <HAL_GPIO_Init+0x22a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_GPIO_Init+0x24c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d025      	beq.n	8002b86 <HAL_GPIO_Init+0x226>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_GPIO_Init+0x250>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01f      	beq.n	8002b82 <HAL_GPIO_Init+0x222>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_GPIO_Init+0x254>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0x21e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <HAL_GPIO_Init+0x258>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x21a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_GPIO_Init+0x25c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00d      	beq.n	8002b76 <HAL_GPIO_Init+0x216>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_GPIO_Init+0x260>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_GPIO_Init+0x264>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_GPIO_Init+0x20e>
 8002b6a:	2309      	movs	r3, #9
 8002b6c:	e02d      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b6e:	230a      	movs	r3, #10
 8002b70:	e02b      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b72:	2308      	movs	r3, #8
 8002b74:	e029      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e027      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e025      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b7e:	2305      	movs	r3, #5
 8002b80:	e023      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e021      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e01f      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e01d      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01b      	b.n	8002bca <HAL_GPIO_Init+0x26a>
 8002b92:	bf00      	nop
 8002b94:	58000080 	.word	0x58000080
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	58000400 	.word	0x58000400
 8002ba0:	58020000 	.word	0x58020000
 8002ba4:	58020400 	.word	0x58020400
 8002ba8:	58020800 	.word	0x58020800
 8002bac:	58020c00 	.word	0x58020c00
 8002bb0:	58021000 	.word	0x58021000
 8002bb4:	58021400 	.word	0x58021400
 8002bb8:	58021800 	.word	0x58021800
 8002bbc:	58021c00 	.word	0x58021c00
 8002bc0:	58022000 	.word	0x58022000
 8002bc4:	58022400 	.word	0x58022400
 8002bc8:	2300      	movs	r3, #0
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	f002 0203 	and.w	r2, r2, #3
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bda:	4938      	ldr	r1, [pc, #224]	; (8002cbc <HAL_GPIO_Init+0x35c>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f47f ae63 	bne.w	8002974 <HAL_GPIO_Init+0x14>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3724      	adds	r7, #36	; 0x24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	58000400 	.word	0x58000400

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cdc:	e003      	b.n	8002ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	619a      	str	r2, [r3, #24]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d00a      	beq.n	8002d1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d08:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e040      	b.n	8002d9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e03e      	b.n	8002d9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d26:	491f      	ldr	r1, [pc, #124]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d2e:	f7fe fb0b 	bl	8001348 <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d34:	e009      	b.n	8002d4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d36:	f7fe fb07 	bl	8001348 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d44:	d901      	bls.n	8002d4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e028      	b.n	8002d9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d1ee      	bne.n	8002d36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b1e      	cmp	r3, #30
 8002d5c:	d008      	beq.n	8002d70 <HAL_PWREx_ConfigSupply+0x7c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b2e      	cmp	r3, #46	; 0x2e
 8002d62:	d005      	beq.n	8002d70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b1d      	cmp	r3, #29
 8002d68:	d002      	beq.n	8002d70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b2d      	cmp	r3, #45	; 0x2d
 8002d6e:	d114      	bne.n	8002d9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d70:	f7fe faea 	bl	8001348 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d76:	e009      	b.n	8002d8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d78:	f7fe fae6 	bl	8001348 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d86:	d901      	bls.n	8002d8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d1ee      	bne.n	8002d78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024800 	.word	0x58024800

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3f4      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b3 	beq.w	8002f2e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc8:	4b95      	ldr	r3, [pc, #596]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dd2:	4b93      	ldr	r3, [pc, #588]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d007      	beq.n	8002dee <HAL_RCC_OscConfig+0x46>
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b18      	cmp	r3, #24
 8002de2:	d112      	bne.n	8002e0a <HAL_RCC_OscConfig+0x62>
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d10d      	bne.n	8002e0a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dee:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8098 	beq.w	8002f2c <HAL_RCC_OscConfig+0x184>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8093 	bne.w	8002f2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e3cc      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x7a>
 8002e14:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a81      	ldr	r2, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e058      	b.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d112      	bne.n	8002e50 <HAL_RCC_OscConfig+0xa8>
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a79      	ldr	r2, [pc, #484]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a76      	ldr	r2, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e041      	b.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0xd8>
 8002e5a:	4b71      	ldr	r3, [pc, #452]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a70      	ldr	r2, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6d      	ldr	r2, [pc, #436]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6a      	ldr	r2, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e029      	b.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x108>
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a64      	ldr	r2, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e011      	b.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002eb0:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5a      	ldr	r2, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ece:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fa34 	bl	8001348 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fa30 	bl	8001348 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e356      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x13c>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fa20 	bl	8001348 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fa1c 	bl	8001348 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e342      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f1e:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x164>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 808d 	beq.w	8003056 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1ba>
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	2b18      	cmp	r3, #24
 8002f56:	d137      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x220>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d132      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e314      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0219 	bic.w	r2, r3, #25
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4926      	ldr	r1, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f8c:	f7fe f9dc 	bl	8001348 <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fe f9d8 	bl	8001348 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e2fe      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	4917      	ldr	r1, [pc, #92]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc6:	e046      	b.n	8003056 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d029      	beq.n	8003024 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 0219 	bic.w	r2, r3, #25
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4910      	ldr	r1, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f9b1 	bl	8001348 <HAL_GetTick>
 8002fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe f9ad 	bl	8001348 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e2d3      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4902      	ldr	r1, [pc, #8]	; (8003020 <HAL_RCC_OscConfig+0x278>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e01b      	b.n	8003056 <HAL_RCC_OscConfig+0x2ae>
 800301e:	bf00      	nop
 8003020:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003024:	4b97      	ldr	r3, [pc, #604]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a96      	ldr	r2, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f98a 	bl	8001348 <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe f986 	bl	8001348 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e2ac      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800304a:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06a      	beq.n	8003138 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800306a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800306c:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d007      	beq.n	8003088 <HAL_RCC_OscConfig+0x2e0>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b18      	cmp	r3, #24
 800307c:	d11b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x30e>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d116      	bne.n	80030b6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003088:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2f8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e281      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	4975      	ldr	r1, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030b4:	e040      	b.n	8003138 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a70      	ldr	r2, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f93d 	bl	8001348 <HAL_GetTick>
 80030ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030d2:	f7fe f939 	bl	8001348 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e25f      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030e4:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f0:	4b64      	ldr	r3, [pc, #400]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	4961      	ldr	r1, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	60cb      	str	r3, [r1, #12]
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003106:	4b5f      	ldr	r3, [pc, #380]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5e      	ldr	r2, [pc, #376]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe f919 	bl	8001348 <HAL_GetTick>
 8003116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800311a:	f7fe f915 	bl	8001348 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e23b      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800312c:	4b55      	ldr	r3, [pc, #340]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d036      	beq.n	80031b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe f8f6 	bl	8001348 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003160:	f7fe f8f2 	bl	8001348 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e218      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x3b8>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003180:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	4a3f      	ldr	r2, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe f8dc 	bl	8001348 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe f8d8 	bl	8001348 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1fe      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d019      	beq.n	80031fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80031cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031d2:	f7fe f8b9 	bl	8001348 <HAL_GetTick>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031da:	f7fe f8b5 	bl	8001348 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1db      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x432>
 80031f8:	e018      	b.n	800322c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a21      	ldr	r2, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003206:	f7fe f89f 	bl	8001348 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800320e:	f7fe f89b 	bl	8001348 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e1c1      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80af 	beq.w	8003398 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCC_OscConfig+0x4e0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_RCC_OscConfig+0x4e0>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003246:	f7fe f87f 	bl	8001348 <HAL_GetTick>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fe f87b 	bl	8001348 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	; 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a1      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x4e0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x4e4>
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a02      	ldr	r2, [pc, #8]	; (8003284 <HAL_RCC_OscConfig+0x4dc>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e05b      	b.n	800333a <HAL_RCC_OscConfig+0x592>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	58024800 	.word	0x58024800
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x512>
 8003294:	4b9d      	ldr	r3, [pc, #628]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a9c      	ldr	r2, [pc, #624]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b9a      	ldr	r3, [pc, #616]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a99      	ldr	r2, [pc, #612]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	4b97      	ldr	r3, [pc, #604]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a96      	ldr	r2, [pc, #600]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e03f      	b.n	800333a <HAL_RCC_OscConfig+0x592>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d112      	bne.n	80032e8 <HAL_RCC_OscConfig+0x540>
 80032c2:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a91      	ldr	r2, [pc, #580]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	4b8f      	ldr	r3, [pc, #572]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a8e      	ldr	r2, [pc, #568]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	4b8c      	ldr	r3, [pc, #560]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a8b      	ldr	r2, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	e028      	b.n	800333a <HAL_RCC_OscConfig+0x592>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b85      	cmp	r3, #133	; 0x85
 80032ee:	d112      	bne.n	8003316 <HAL_RCC_OscConfig+0x56e>
 80032f0:	4b86      	ldr	r3, [pc, #536]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a85      	ldr	r2, [pc, #532]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	4b83      	ldr	r3, [pc, #524]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a82      	ldr	r2, [pc, #520]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a7f      	ldr	r2, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e011      	b.n	800333a <HAL_RCC_OscConfig+0x592>
 8003316:	4b7d      	ldr	r3, [pc, #500]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a7c      	ldr	r2, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	4b7a      	ldr	r3, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a79      	ldr	r2, [pc, #484]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	4b77      	ldr	r3, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a76      	ldr	r2, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe f801 	bl	8001348 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd fffd 	bl	8001348 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e121      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003360:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCC_OscConfig+0x5a2>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fd ffeb 	bl	8001348 <HAL_GetTick>
 8003372:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fd ffe7 	bl	8001348 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10b      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8100 	beq.w	80035a2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033a2:	4b5a      	ldr	r3, [pc, #360]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033aa:	2b18      	cmp	r3, #24
 80033ac:	f000 80bb 	beq.w	8003526 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f040 8095 	bne.w	80034e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b54      	ldr	r3, [pc, #336]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a53      	ldr	r2, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80033c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd ffbf 	bl	8001348 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fd ffbb 	bl	8001348 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0e1      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033e0:	4b4a      	ldr	r3, [pc, #296]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ec:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80033ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x768>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	430a      	orrs	r2, r1
 8003400:	4942      	ldr	r1, [pc, #264]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003402:	4313      	orrs	r3, r2
 8003404:	628b      	str	r3, [r1, #40]	; 0x28
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	3b01      	subs	r3, #1
 800340c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	3b01      	subs	r3, #1
 8003416:	025b      	lsls	r3, r3, #9
 8003418:	b29b      	uxth	r3, r3
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	3b01      	subs	r3, #1
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003436:	4935      	ldr	r1, [pc, #212]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003438:	4313      	orrs	r3, r2
 800343a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	4a32      	ldr	r2, [pc, #200]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800344a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x76c>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003454:	00d2      	lsls	r2, r2, #3
 8003456:	492d      	ldr	r1, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003458:	4313      	orrs	r3, r2
 800345a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	f023 020c 	bic.w	r2, r3, #12
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4928      	ldr	r1, [pc, #160]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800346a:	4313      	orrs	r3, r2
 800346c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	f023 0202 	bic.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4924      	ldr	r1, [pc, #144]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800347c:	4313      	orrs	r3, r2
 800347e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_RCC_OscConfig+0x764>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4a1b      	ldr	r2, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x764>)
 800349e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fd ff44 	bl	8001348 <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd ff40 	bl	8001348 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e066      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x71c>
 80034e2:	e05e      	b.n	80035a2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_RCC_OscConfig+0x764>)
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd ff2a 	bl	8001348 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034f6:	e00f      	b.n	8003518 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd ff26 	bl	8001348 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d908      	bls.n	8003518 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04c      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
 800350a:	bf00      	nop
 800350c:	58024400 	.word	0x58024400
 8003510:	fffffc0c 	.word	0xfffffc0c
 8003514:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x804>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e9      	bne.n	80034f8 <HAL_RCC_OscConfig+0x750>
 8003524:	e03d      	b.n	80035a2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_RCC_OscConfig+0x804>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <HAL_RCC_OscConfig+0x804>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b01      	cmp	r3, #1
 8003538:	d031      	beq.n	800359e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d12a      	bne.n	800359e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d122      	bne.n	800359e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d11a      	bne.n	800359e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0a5b      	lsrs	r3, r3, #9
 800356c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d111      	bne.n	800359e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d108      	bne.n	800359e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	0e1b      	lsrs	r3, r3, #24
 8003590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400

080035b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e19c      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b8a      	ldr	r3, [pc, #552]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b87      	ldr	r3, [pc, #540]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4985      	ldr	r1, [pc, #532]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b83      	ldr	r3, [pc, #524]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e184      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	4b7b      	ldr	r3, [pc, #492]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360c:	429a      	cmp	r2, r3
 800360e:	d908      	bls.n	8003622 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003610:	4b78      	ldr	r3, [pc, #480]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	4975      	ldr	r1, [pc, #468]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800361e:	4313      	orrs	r3, r2
 8003620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800363a:	429a      	cmp	r2, r3
 800363c:	d908      	bls.n	8003650 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800363e:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	496a      	ldr	r1, [pc, #424]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003668:	429a      	cmp	r2, r3
 800366a:	d908      	bls.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	495e      	ldr	r1, [pc, #376]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800367a:	4313      	orrs	r3, r2
 800367c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003696:	429a      	cmp	r2, r3
 8003698:	d908      	bls.n	80036ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800369a:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4953      	ldr	r1, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d908      	bls.n	80036da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f023 020f 	bic.w	r2, r3, #15
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4947      	ldr	r1, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d055      	beq.n	8003792 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4940      	ldr	r1, [pc, #256]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d121      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0f6      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d107      	bne.n	8003728 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d115      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0ea      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003730:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0de      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0d6      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f023 0207 	bic.w	r2, r3, #7
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4925      	ldr	r1, [pc, #148]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 800375e:	4313      	orrs	r3, r2
 8003760:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd fdf1 	bl	8001348 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003768:	e00a      	b.n	8003780 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376a:	f7fd fded 	bl	8001348 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0be      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	429a      	cmp	r2, r3
 8003790:	d1eb      	bne.n	800376a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d208      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f023 020f 	bic.w	r2, r3, #15
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x244>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d214      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 020f 	bic.w	r2, r3, #15
 80037d6:	4906      	ldr	r1, [pc, #24]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e086      	b.n	80038fe <HAL_RCC_ClockConfig+0x34e>
 80037f0:	52002000 	.word	0x52002000
 80037f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003810:	429a      	cmp	r2, r3
 8003812:	d208      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003814:	4b3c      	ldr	r3, [pc, #240]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4939      	ldr	r1, [pc, #228]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003822:	4313      	orrs	r3, r2
 8003824:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383e:	429a      	cmp	r2, r3
 8003840:	d208      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003842:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	492e      	ldr	r1, [pc, #184]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	429a      	cmp	r2, r3
 800386e:	d208      	bcs.n	8003882 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003870:	4b25      	ldr	r3, [pc, #148]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	4922      	ldr	r1, [pc, #136]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 800387e:	4313      	orrs	r3, r2
 8003880:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389a:	429a      	cmp	r2, r3
 800389c:	d208      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4917      	ldr	r1, [pc, #92]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80038b0:	f000 f834 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	4912      	ldr	r1, [pc, #72]	; (800390c <HAL_RCC_ClockConfig+0x35c>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x358>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_RCC_ClockConfig+0x35c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x360>)
 80038e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x364>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x368>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fcde 	bl	80012b4 <HAL_InitTick>
 80038f8:	4603      	mov	r3, r0
 80038fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	58024400 	.word	0x58024400
 800390c:	0800937c 	.word	0x0800937c
 8003910:	24000004 	.word	0x24000004
 8003914:	24000000 	.word	0x24000000
 8003918:	24000008 	.word	0x24000008

0800391c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003922:	4bb3      	ldr	r3, [pc, #716]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392a:	2b18      	cmp	r3, #24
 800392c:	f200 8155 	bhi.w	8003bda <HAL_RCC_GetSysClockFreq+0x2be>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800399d 	.word	0x0800399d
 800393c:	08003bdb 	.word	0x08003bdb
 8003940:	08003bdb 	.word	0x08003bdb
 8003944:	08003bdb 	.word	0x08003bdb
 8003948:	08003bdb 	.word	0x08003bdb
 800394c:	08003bdb 	.word	0x08003bdb
 8003950:	08003bdb 	.word	0x08003bdb
 8003954:	08003bdb 	.word	0x08003bdb
 8003958:	080039c3 	.word	0x080039c3
 800395c:	08003bdb 	.word	0x08003bdb
 8003960:	08003bdb 	.word	0x08003bdb
 8003964:	08003bdb 	.word	0x08003bdb
 8003968:	08003bdb 	.word	0x08003bdb
 800396c:	08003bdb 	.word	0x08003bdb
 8003970:	08003bdb 	.word	0x08003bdb
 8003974:	08003bdb 	.word	0x08003bdb
 8003978:	080039c9 	.word	0x080039c9
 800397c:	08003bdb 	.word	0x08003bdb
 8003980:	08003bdb 	.word	0x08003bdb
 8003984:	08003bdb 	.word	0x08003bdb
 8003988:	08003bdb 	.word	0x08003bdb
 800398c:	08003bdb 	.word	0x08003bdb
 8003990:	08003bdb 	.word	0x08003bdb
 8003994:	08003bdb 	.word	0x08003bdb
 8003998:	080039cf 	.word	0x080039cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800399c:	4b94      	ldr	r3, [pc, #592]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039a8:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	08db      	lsrs	r3, r3, #3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	4a90      	ldr	r2, [pc, #576]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80039ba:	e111      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039bc:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039be:	61bb      	str	r3, [r7, #24]
    break;
 80039c0:	e10e      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039c4:	61bb      	str	r3, [r7, #24]
    break;
 80039c6:	e10b      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80039c8:	4b8c      	ldr	r3, [pc, #560]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039ca:	61bb      	str	r3, [r7, #24]
    break;
 80039cc:	e108      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80039d8:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039e4:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80039ee:	4b80      	ldr	r3, [pc, #512]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	08db      	lsrs	r3, r3, #3
 80039f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80e1 	beq.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	f000 8083 	beq.w	8003b20 <HAL_RCC_GetSysClockFreq+0x204>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f200 80a1 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x248>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x114>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d056      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a2e:	e099      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02d      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a3c:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	4a6b      	ldr	r2, [pc, #428]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a96:	e087      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003abe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ada:	e065      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b1e:	e043      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b62:	e021      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ba6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	0a5b      	lsrs	r3, r3, #9
 8003bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bcc:	ee17 3a90 	vmov	r3, s15
 8003bd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003bd2:	e005      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
    break;
 8003bd8:	e002      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bdc:	61bb      	str	r3, [r7, #24]
    break;
 8003bde:	bf00      	nop
  }

  return sysclockfreq;
 8003be0:	69bb      	ldr	r3, [r7, #24]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	03d09000 	.word	0x03d09000
 8003bf8:	003d0900 	.word	0x003d0900
 8003bfc:	007a1200 	.word	0x007a1200
 8003c00:	46000000 	.word	0x46000000
 8003c04:	4c742400 	.word	0x4c742400
 8003c08:	4a742400 	.word	0x4a742400
 8003c0c:	4af42400 	.word	0x4af42400

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003c16:	f7ff fe81 	bl	800391c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490f      	ldr	r1, [pc, #60]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	58024400 	.word	0x58024400
 8003c64:	0800937c 	.word	0x0800937c
 8003c68:	24000004 	.word	0x24000004
 8003c6c:	24000000 	.word	0x24000000

08003c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003c74:	f7ff ffcc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4904      	ldr	r1, [pc, #16]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	58024400 	.word	0x58024400
 8003c98:	0800937c 	.word	0x0800937c

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003ca0:	f7ff ffb6 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	0800937c 	.word	0x0800937c

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03f      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cec:	d02a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cf2:	d824      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf8:	d018      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cfe:	d81e      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d08:	d007      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d0a:	e018      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d0c:	4b9f      	ldr	r3, [pc, #636]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	4a9e      	ldr	r2, [pc, #632]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d18:	e015      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 ff1b 	bl	8005b5c <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d2a:	e00c      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3324      	adds	r3, #36	; 0x24
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 ffc4 	bl	8005cc0 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
      break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d4c:	4b8f      	ldr	r3, [pc, #572]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d58:	498c      	ldr	r1, [pc, #560]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d826      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d95 	.word	0x08003d95
 8003d84:	08003da3 	.word	0x08003da3
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d94:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003da0:	e015      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fed7 	bl	8005b5c <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003db2:	e00c      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 ff80 	bl	8005cc0 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd4:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	f023 0207 	bic.w	r2, r3, #7
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	496a      	ldr	r1, [pc, #424]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	650b      	str	r3, [r1, #80]	; 0x50
 8003de6:	e001      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d04a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e00:	d031      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e06:	d82b      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	d02d      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e12:	d825      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e14:	2bc0      	cmp	r3, #192	; 0xc0
 8003e16:	d02a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e18:	2bc0      	cmp	r3, #192	; 0xc0
 8003e1a:	d821      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d81d      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003e2c:	e018      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2e:	4b57      	ldr	r3, [pc, #348]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	4a56      	ldr	r2, [pc, #344]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e3a:	e019      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fe8a 	bl	8005b5c <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e4c:	e010      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 ff33 	bl	8005cc0 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e5e:	e007      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
      break;
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e76:	4b45      	ldr	r3, [pc, #276]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4942      	ldr	r1, [pc, #264]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	650b      	str	r3, [r1, #80]	; 0x50
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d04f      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ea2:	d036      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003ea4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ea8:	d830      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eae:	d032      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d82a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003eb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003eba:	d02e      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003ebc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ec0:	d824      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d018      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	d81e      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	d007      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003ed8:	e018      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003ee6:	e019      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 fe34 	bl	8005b5c <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003ef8:	e010      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 fedd 	bl	8005cc0 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f0a:	e007      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	650b      	str	r3, [r1, #80]	; 0x50
 8003f34:	e001      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d034      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b30      	cmp	r3, #48	; 0x30
 8003f4c:	d01c      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	d817      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d00c      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d813      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d10f      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003f6e:	e010      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fdf0 	bl	8005b5c <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003f80:	e007      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
      break;
 8003f86:	e004      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f8c:	58024400 	.word	0x58024400
      break;
 8003f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f98:	4b9b      	ldr	r3, [pc, #620]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	4998      	ldr	r1, [pc, #608]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003faa:	e001      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d047      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc4:	d030      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fca:	d82a      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd0:	d02c      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd6:	d824      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d018      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d81e      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d007      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003fee:	e018      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b85      	ldr	r3, [pc, #532]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a84      	ldr	r2, [pc, #528]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ffc:	e017      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fda9 	bl	8005b5c <RCCEx_PLL2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800400e:	e00e      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fe52 	bl	8005cc0 <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800402c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004034:	4b74      	ldr	r3, [pc, #464]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	4971      	ldr	r1, [pc, #452]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004042:	4313      	orrs	r3, r2
 8004044:	650b      	str	r3, [r1, #80]	; 0x50
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d049      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d02e      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004066:	d828      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800406c:	d02a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800406e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004072:	d822      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004078:	d026      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800407a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800407e:	d81c      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004084:	d010      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408a:	d816      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d111      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f001 fd5d 	bl	8005b5c <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040a6:	e012      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fe06 	bl	8005cc0 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040b8:	e009      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040c0:	bf00      	nop
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e0:	4949      	ldr	r1, [pc, #292]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	650b      	str	r3, [r1, #80]	; 0x50
 80040e6:	e001      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d053      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004102:	d034      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004104:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004108:	d82e      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800410a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410e:	d030      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004114:	d828      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d02c      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d822      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004126:	d028      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800412c:	d81c      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d010      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004138:	d816      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01f      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004142:	d111      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fd06 	bl	8005b5c <RCCEx_PLL2_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004154:	e014      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3324      	adds	r3, #36	; 0x24
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fdaf 	bl	8005cc0 <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004166:	e00b      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
      break;
 800416c:	e008      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800416e:	bf00      	nop
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800417e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004194:	491c      	ldr	r1, [pc, #112]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004196:	4313      	orrs	r3, r2
 8004198:	658b      	str	r3, [r1, #88]	; 0x58
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d031      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d00e      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80041b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ba:	d814      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80041c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a0f      	ldr	r2, [pc, #60]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041d2:	e00c      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 fcbe 	bl	8005b5c <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041e4:	e003      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80041ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004200:	4901      	ldr	r1, [pc, #4]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004202:	4313      	orrs	r3, r2
 8004204:	650b      	str	r3, [r1, #80]	; 0x50
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d032      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	2b03      	cmp	r3, #3
 8004222:	d81b      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004263 	.word	0x08004263
 8004230:	0800423d 	.word	0x0800423d
 8004234:	0800424b 	.word	0x0800424b
 8004238:	08004263 	.word	0x08004263
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4bb2      	ldr	r3, [pc, #712]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4ab1      	ldr	r2, [pc, #708]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004248:	e00c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	2102      	movs	r1, #2
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fc83 	bl	8005b5c <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800426a:	4ba7      	ldr	r3, [pc, #668]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	49a4      	ldr	r1, [pc, #656]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004278:	4313      	orrs	r3, r2
 800427a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800427c:	e001      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8086 	beq.w	800439c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004290:	4b9e      	ldr	r3, [pc, #632]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a9d      	ldr	r2, [pc, #628]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800429c:	f7fd f854 	bl	8001348 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a2:	e009      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a4:	f7fd f850 	bl	8001348 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d902      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	75fb      	strb	r3, [r7, #23]
        break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b8:	4b94      	ldr	r3, [pc, #592]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d166      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042ca:	4b8f      	ldr	r3, [pc, #572]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042d4:	4053      	eors	r3, r2
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d013      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042de:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e8:	4b87      	ldr	r3, [pc, #540]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a86      	ldr	r2, [pc, #536]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f4:	4b84      	ldr	r3, [pc, #528]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004300:	4a81      	ldr	r2, [pc, #516]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d115      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd f819 	bl	8001348 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004318:	e00b      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd f815 	bl	8001348 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d902      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	75fb      	strb	r3, [r7, #23]
            break;
 8004330:	e005      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004332:	4b75      	ldr	r3, [pc, #468]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0ed      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d126      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800434a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004352:	d10d      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004362:	0919      	lsrs	r1, r3, #4
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004366:	400b      	ands	r3, r1
 8004368:	4967      	ldr	r1, [pc, #412]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
 800436e:	e005      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004370:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	4a64      	ldr	r2, [pc, #400]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004376:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800437a:	6113      	str	r3, [r2, #16]
 800437c:	4b62      	ldr	r3, [pc, #392]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800437e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438a:	495f      	ldr	r1, [pc, #380]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800438c:	4313      	orrs	r3, r2
 800438e:	670b      	str	r3, [r1, #112]	; 0x70
 8004390:	e004      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	75bb      	strb	r3, [r7, #22]
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d07f      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d866      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	08004487 	.word	0x08004487
 80043bc:	08004481 	.word	0x08004481
 80043c0:	08004481 	.word	0x08004481
 80043c4:	08004481 	.word	0x08004481
 80043c8:	08004481 	.word	0x08004481
 80043cc:	08004481 	.word	0x08004481
 80043d0:	08004481 	.word	0x08004481
 80043d4:	08004481 	.word	0x08004481
 80043d8:	0800445d 	.word	0x0800445d
 80043dc:	08004481 	.word	0x08004481
 80043e0:	08004481 	.word	0x08004481
 80043e4:	08004481 	.word	0x08004481
 80043e8:	08004481 	.word	0x08004481
 80043ec:	08004481 	.word	0x08004481
 80043f0:	08004481 	.word	0x08004481
 80043f4:	08004481 	.word	0x08004481
 80043f8:	0800446f 	.word	0x0800446f
 80043fc:	08004481 	.word	0x08004481
 8004400:	08004481 	.word	0x08004481
 8004404:	08004481 	.word	0x08004481
 8004408:	08004481 	.word	0x08004481
 800440c:	08004481 	.word	0x08004481
 8004410:	08004481 	.word	0x08004481
 8004414:	08004481 	.word	0x08004481
 8004418:	08004487 	.word	0x08004487
 800441c:	08004481 	.word	0x08004481
 8004420:	08004481 	.word	0x08004481
 8004424:	08004481 	.word	0x08004481
 8004428:	08004481 	.word	0x08004481
 800442c:	08004481 	.word	0x08004481
 8004430:	08004481 	.word	0x08004481
 8004434:	08004481 	.word	0x08004481
 8004438:	08004487 	.word	0x08004487
 800443c:	08004481 	.word	0x08004481
 8004440:	08004481 	.word	0x08004481
 8004444:	08004481 	.word	0x08004481
 8004448:	08004481 	.word	0x08004481
 800444c:	08004481 	.word	0x08004481
 8004450:	08004481 	.word	0x08004481
 8004454:	08004481 	.word	0x08004481
 8004458:	08004487 	.word	0x08004487
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fb7a 	bl	8005b5c <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800446c:	e00c      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3324      	adds	r3, #36	; 0x24
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f001 fc23 	bl	8005cc0 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800447e:	e003      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
      break;
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449c:	491a      	ldr	r1, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	654b      	str	r3, [r1, #84]	; 0x54
 80044a2:	e001      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d821      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	08004515 	.word	0x08004515
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044ef 	.word	0x080044ef
 80044d0:	08004515 	.word	0x08004515
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004515 	.word	0x08004515
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fb3a 	bl	8005b5c <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044ec:	e013      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fbe3 	bl	8005cc0 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044fe:	e00a      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      break;
 8004504:	e007      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
 800450c:	58024800 	.word	0x58024800
 8004510:	00ffffcf 	.word	0x00ffffcf
      break;
 8004514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800451c:	4b9f      	ldr	r3, [pc, #636]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f023 0207 	bic.w	r2, r3, #7
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	499c      	ldr	r1, [pc, #624]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	654b      	str	r3, [r1, #84]	; 0x54
 800452e:	e001      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d039      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004546:	2b05      	cmp	r3, #5
 8004548:	d820      	bhi.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004593 	.word	0x08004593
 8004554:	08004569 	.word	0x08004569
 8004558:	0800457b 	.word	0x0800457b
 800455c:	08004593 	.word	0x08004593
 8004560:	08004593 	.word	0x08004593
 8004564:	08004593 	.word	0x08004593
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	2101      	movs	r1, #1
 800456e:	4618      	mov	r0, r3
 8004570:	f001 faf4 	bl	8005b5c <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004578:	e00c      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3324      	adds	r3, #36	; 0x24
 800457e:	2101      	movs	r1, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fb9d 	bl	8005cc0 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
      break;
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459a:	4b80      	ldr	r3, [pc, #512]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f023 0207 	bic.w	r2, r3, #7
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a8:	497c      	ldr	r1, [pc, #496]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	658b      	str	r3, [r1, #88]	; 0x58
 80045ae:	e001      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d04b      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ca:	d02e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80045cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045d0:	d828      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d02a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d822      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80045de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045e2:	d026      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80045e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045e8:	d81c      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80045ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ee:	d010      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80045f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f4:	d816      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01d      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80045fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045fe:	d111      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 faa8 	bl	8005b5c <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004610:	e012      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fb51 	bl	8005cc0 <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004622:	e009      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800462a:	bf00      	nop
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464c:	4953      	ldr	r1, [pc, #332]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	654b      	str	r3, [r1, #84]	; 0x54
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d04b      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800466a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800466e:	d02e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004670:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004674:	d828      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d02a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d822      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004686:	d026      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800468c:	d81c      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800468e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004692:	d010      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004698:	d816      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01d      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d111      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fa56 	bl	8005b5c <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046b4:	e012      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3324      	adds	r3, #36	; 0x24
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 faff 	bl	8005cc0 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046c6:	e009      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	e006      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80046ce:	bf00      	nop
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80046da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046f0:	492a      	ldr	r1, [pc, #168]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	658b      	str	r3, [r1, #88]	; 0x58
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d04d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800470e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004712:	d02e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004714:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004718:	d828      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d02a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d822      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004726:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800472a:	d026      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800472c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004730:	d81c      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d010      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800473c:	d816      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01d      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fa04 	bl	8005b5c <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004758:	e012      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3324      	adds	r3, #36	; 0x24
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f001 faad 	bl	8005cc0 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800476a:	e009      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004772:	bf00      	nop
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800477e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004794:	4901      	ldr	r1, [pc, #4]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	658b      	str	r3, [r1, #88]	; 0x58
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800479c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
 80047a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ba:	d10a      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3324      	adds	r3, #36	; 0x24
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fa7c 	bl	8005cc0 <RCCEx_PLL3_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047d2:	4b8c      	ldr	r3, [pc, #560]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	4988      	ldr	r1, [pc, #544]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fc:	d10a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fa5b 	bl	8005cc0 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004814:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004822:	4978      	ldr	r1, [pc, #480]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d034      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800483a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483e:	d01d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004844:	d817      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d009      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004850:	e011      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 f97f 	bl	8005b5c <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004862:	e00c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fa28 	bl	8005cc0 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      break;
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800487c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004884:	4b5f      	ldr	r3, [pc, #380]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004892:	495c      	ldr	r1, [pc, #368]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	658b      	str	r3, [r1, #88]	; 0x58
 8004898:	e001      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d033      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b4:	d01c      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80048b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ba:	d816      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80048bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80048c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c6:	d007      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80048c8:	e00f      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ca:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	4a4d      	ldr	r2, [pc, #308]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f9ee 	bl	8005cc0 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
      break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f8:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004906:	493f      	ldr	r1, [pc, #252]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	654b      	str	r3, [r1, #84]	; 0x54
 800490c:	e001      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d029      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492a:	d007      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800492c:	e00f      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492e:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	4a34      	ldr	r2, [pc, #208]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800493a:	e00b      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	2102      	movs	r1, #2
 8004942:	4618      	mov	r0, r3
 8004944:	f001 f90a 	bl	8005b5c <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
      break;
 8004952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800495a:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	4927      	ldr	r1, [pc, #156]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004968:	4313      	orrs	r3, r2
 800496a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800496c:	e001      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f99b 	bl	8005cc0 <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d035      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d017      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d811      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d013      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d80b      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d010      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049d4:	e007      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      break;
 80049da:	e004      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80049dc:	bf00      	nop
 80049de:	e002      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80049e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fa:	4902      	ldr	r1, [pc, #8]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004a00:	e004      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a24:	492d      	ldr	r1, [pc, #180]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a36:	4b29      	ldr	r3, [pc, #164]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	4926      	ldr	r1, [pc, #152]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a54:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	491e      	ldr	r1, [pc, #120]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a7c:	6113      	str	r3, [r2, #16]
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a88:	4914      	ldr	r1, [pc, #80]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da08      	bge.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	4906      	ldr	r1, [pc, #24]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004ac8:	7dbb      	ldrb	r3, [r7, #22]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400

08004ae0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b090      	sub	sp, #64	; 0x40
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	f040 8089 	bne.w	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004af2:	4b91      	ldr	r3, [pc, #580]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d87d      	bhi.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b1d 	.word	0x08004b1d
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004bf9 	.word	0x08004bf9
 8004b18:	08004b89 	.word	0x08004b89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b1c:	4b86      	ldr	r3, [pc, #536]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b28:	d107      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fec2 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b38:	e3f4      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b3e:	e3f1      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b40:	4b7d      	ldr	r3, [pc, #500]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fc08 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b5c:	e3e2      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b62:	e3df      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b64:	4b74      	ldr	r3, [pc, #464]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b70:	d107      	bne.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fd4a 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b80:	e3d0      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b86:	e3cd      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b88:	4b6b      	ldr	r3, [pc, #428]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b92:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba4:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	08db      	lsrs	r3, r3, #3
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	4a63      	ldr	r2, [pc, #396]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb6:	e01e      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bb8:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bcc:	d102      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd2:	e010      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bd4:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d102      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004bea:	4b56      	ldr	r3, [pc, #344]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	e002      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bf4:	e396      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004bf6:	e395      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfc:	e392      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c02:	e38f      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0a:	f040 809f 	bne.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004c0e:	4b4a      	ldr	r3, [pc, #296]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d04d      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c26:	f200 8084 	bhi.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2bc0      	cmp	r3, #192	; 0xc0
 8004c2e:	d07d      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2bc0      	cmp	r3, #192	; 0xc0
 8004c34:	d87d      	bhi.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d02d      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d877      	bhi.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d012      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004c4e:	e070      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fe28 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c6c:	e35a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c72:	e357      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c80:	d107      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c82:	f107 0318 	add.w	r3, r7, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb6e 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c90:	e348      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c96:	e345      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fcb0 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb4:	e336      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cba:	e333      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cea:	e01e      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d00:	d102      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d06:	e010      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d14:	d106      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d22:	e002      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d28:	e2fc      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d2a:	e2fb      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d30:	e2f8      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d36:	e2f5      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	03d09000 	.word	0x03d09000
 8004d40:	003d0900 	.word	0x003d0900
 8004d44:	007a1200 	.word	0x007a1200
 8004d48:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	f040 809c 	bne.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004d56:	4b9d      	ldr	r3, [pc, #628]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d054      	beq.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6e:	f200 808b 	bhi.w	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d78:	f000 8083 	beq.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d82:	f200 8081 	bhi.w	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d02f      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d878      	bhi.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da2:	d012      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004da4:	e070      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd7d 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc2:	e2af      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc8:	e2ac      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dca:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd8:	f107 0318 	add.w	r3, r7, #24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fac3 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004de6:	e29d      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dec:	e29a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dee:	4b77      	ldr	r3, [pc, #476]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fc05 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e0a:	e28b      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e10:	e288      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e12:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e1c:	4b6b      	ldr	r3, [pc, #428]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e2e:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	08db      	lsrs	r3, r3, #3
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e40:	e01e      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e56:	d102      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5c:	e010      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d102      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e74:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e78:	e002      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004e7e:	e251      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004e80:	e250      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e82:	4b56      	ldr	r3, [pc, #344]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e86:	e24d      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e8c:	e24a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	f040 80a7 	bne.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea8:	d055      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb0:	f200 8096 	bhi.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eba:	f000 8084 	beq.w	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec4:	f200 808c 	bhi.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ece:	d030      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	f200 8083 	bhi.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d012      	beq.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004ee8:	e07a      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eea:	4b38      	ldr	r3, [pc, #224]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fcdb 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f06:	e20d      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0c:	e20a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1c:	f107 0318 	add.w	r3, r7, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fa21 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f2a:	e1fb      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f30:	e1f8      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb63 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f4e:	e1e9      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f54:	e1e6      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	08db      	lsrs	r3, r3, #3
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f84:	e01e      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa0:	e010      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fae:	d106      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fc2:	e1af      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004fc4:	e1ae      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fca:	e1ab      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	03d09000 	.word	0x03d09000
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe4:	e19e      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fec:	d173      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004fee:	4b9d      	ldr	r3, [pc, #628]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffe:	d02f      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005006:	d863      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d012      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005016:	e05b      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005018:	4b92      	ldr	r3, [pc, #584]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005024:	d107      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005026:	f107 0318 	add.w	r3, r7, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f99c 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005034:	e176      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800503a:	e173      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800503c:	4b89      	ldr	r3, [pc, #548]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005048:	d107      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800504a:	f107 030c 	add.w	r3, r7, #12
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fade 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005058:	e164      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800505e:	e161      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005060:	4b80      	ldr	r3, [pc, #512]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005068:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800506a:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b04      	cmp	r3, #4
 8005074:	d10c      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800507c:	4b79      	ldr	r3, [pc, #484]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	4a78      	ldr	r2, [pc, #480]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508e:	e01e      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005090:	4b74      	ldr	r3, [pc, #464]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509c:	d106      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a4:	d102      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050a6:	4b71      	ldr	r3, [pc, #452]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050aa:	e010      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050ac:	4b6d      	ldr	r3, [pc, #436]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d102      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050c2:	4b6b      	ldr	r3, [pc, #428]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050cc:	e12a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80050ce:	e129      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d4:	e126      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d133      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d012      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80050f6:	e023      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f8:	4b5a      	ldr	r3, [pc, #360]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005104:	d107      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fbd4 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005114:	e106      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800511a:	e103      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800511c:	4b51      	ldr	r3, [pc, #324]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005128:	d107      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512a:	f107 0318 	add.w	r3, r7, #24
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f91a 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005138:	e0f4      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513e:	e0f1      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005144:	e0ee      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800514c:	f040 809b 	bne.w	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005150:	4b44      	ldr	r3, [pc, #272]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005158:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005160:	f000 808b 	beq.w	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800516a:	f200 8089 	bhi.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005174:	d06c      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800517c:	f200 8080 	bhi.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d056      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518e:	d877      	bhi.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005196:	d03b      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800519e:	d86f      	bhi.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a6:	d021      	beq.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ae:	d867      	bhi.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051bc:	d004      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80051be:	e05f      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80051c0:	f000 f8bc 	bl	800533c <HAL_RCCEx_GetD3PCLK1Freq>
 80051c4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80051c6:	e0ad      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051c8:	4b26      	ldr	r3, [pc, #152]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d4:	d107      	bne.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d6:	f107 0318 	add.w	r3, r7, #24
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f8c4 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051e4:	e09e      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ea:	e09b      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f8:	d107      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa06 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005208:	e08c      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800520e:	e089      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b04      	cmp	r3, #4
 800521a:	d109      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800522e:	e079      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005234:	e076      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d102      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005248:	e06c      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800524e:	e069      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800525c:	d10a      	bne.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005262:	e05f      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005264:	58024400 	.word	0x58024400
 8005268:	03d09000 	.word	0x03d09000
 800526c:	003d0900 	.word	0x003d0900
 8005270:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005278:	e054      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800527a:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527e:	e051      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005284:	e04e      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	d148      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800528e:	4b29      	ldr	r3, [pc, #164]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529e:	d02a      	beq.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d838      	bhi.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b4:	d00d      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80052b6:	e030      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c4:	d102      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80052c6:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052ca:	e02b      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d0:	e028      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052de:	d107      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fae7 	bl	80058b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052ee:	e019      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f4:	e016      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d107      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005304:	f107 0318 	add.w	r3, r7, #24
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f82d 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005312:	e007      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005318:	e004      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800531e:	e001      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005326:	4618      	mov	r0, r3
 8005328:	3740      	adds	r7, #64	; 0x40
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	00bb8000 	.word	0x00bb8000
 8005334:	58024400 	.word	0x58024400
 8005338:	007a1200 	.word	0x007a1200

0800533c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005340:	f7fe fc66 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4904      	ldr	r1, [pc, #16]	; (8005364 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	58024400 	.word	0x58024400
 8005364:	0800937c 	.word	0x0800937c

08005368 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005370:	4ba1      	ldr	r3, [pc, #644]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800537a:	4b9f      	ldr	r3, [pc, #636]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	0b1b      	lsrs	r3, r3, #12
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005386:	4b9c      	ldr	r3, [pc, #624]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005392:	4b99      	ldr	r3, [pc, #612]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8111 	beq.w	80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	f000 8083 	beq.w	80054c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	f200 80a1 	bhi.w	8005508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d056      	beq.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053d2:	e099      	b.n	8005508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d4:	4b88      	ldr	r3, [pc, #544]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02d      	beq.n	800543c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053e0:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	4a84      	ldr	r2, [pc, #528]	; (80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b7b      	ldr	r3, [pc, #492]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800543a:	e087      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b6a      	ldr	r3, [pc, #424]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800547e:	e065      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800548e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005492:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054c2:	e043      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d6:	4b48      	ldr	r3, [pc, #288]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005506:	e021      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800554a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800554c:	4b2a      	ldr	r3, [pc, #168]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005566:	edd7 6a07 	vldr	s13, [r7, #28]
 800556a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005594:	edd7 6a07 	vldr	s13, [r7, #28]
 8005598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a0:	ee17 2a90 	vmov	r2, s15
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	0e1b      	lsrs	r3, r3, #24
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ce:	ee17 2a90 	vmov	r2, s15
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055d6:	e008      	b.n	80055ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
}
 80055ea:	bf00      	nop
 80055ec:	3724      	adds	r7, #36	; 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	03d09000 	.word	0x03d09000
 8005600:	46000000 	.word	0x46000000
 8005604:	4c742400 	.word	0x4c742400
 8005608:	4a742400 	.word	0x4a742400
 800560c:	4af42400 	.word	0x4af42400

08005610 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005618:	4ba1      	ldr	r3, [pc, #644]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005622:	4b9f      	ldr	r3, [pc, #636]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	0d1b      	lsrs	r3, r3, #20
 8005628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800562e:	4b9c      	ldr	r3, [pc, #624]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800563a:	4b99      	ldr	r3, [pc, #612]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	08db      	lsrs	r3, r3, #3
 8005640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8111 	beq.w	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b02      	cmp	r3, #2
 8005662:	f000 8083 	beq.w	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b02      	cmp	r3, #2
 800566a:	f200 80a1 	bhi.w	80057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d056      	beq.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800567a:	e099      	b.n	80057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800567c:	4b88      	ldr	r3, [pc, #544]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02d      	beq.n	80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005688:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	4a84      	ldr	r2, [pc, #528]	; (80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b2:	4b7b      	ldr	r3, [pc, #492]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056e2:	e087      	b.n	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b6a      	ldr	r3, [pc, #424]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a03 	vldr	s12, [r7, #12]
 800570a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005726:	e065      	b.n	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a03 	vldr	s12, [r7, #12]
 800574e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800576a:	e043      	b.n	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b48      	ldr	r3, [pc, #288]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005792:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ae:	e021      	b.n	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057f4:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	0a5b      	lsrs	r3, r3, #9
 80057fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800580a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581a:	ee17 2a90 	vmov	r2, s15
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005822:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	0c1b      	lsrs	r3, r3, #16
 8005828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582c:	ee07 3a90 	vmov	s15, r3
 8005830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005848:	ee17 2a90 	vmov	r2, s15
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	0e1b      	lsrs	r3, r3, #24
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800586a:	edd7 6a07 	vldr	s13, [r7, #28]
 800586e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005876:	ee17 2a90 	vmov	r2, s15
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800587e:	e008      	b.n	8005892 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
}
 8005892:	bf00      	nop
 8005894:	3724      	adds	r7, #36	; 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	58024400 	.word	0x58024400
 80058a4:	03d09000 	.word	0x03d09000
 80058a8:	46000000 	.word	0x46000000
 80058ac:	4c742400 	.word	0x4c742400
 80058b0:	4a742400 	.word	0x4a742400
 80058b4:	4af42400 	.word	0x4af42400

080058b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	; 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058c0:	4ba0      	ldr	r3, [pc, #640]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80058ca:	4b9e      	ldr	r3, [pc, #632]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80058d6:	4b9b      	ldr	r3, [pc, #620]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058e0:	4b98      	ldr	r3, [pc, #608]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8111 	beq.w	8005b26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b02      	cmp	r3, #2
 8005908:	f000 8083 	beq.w	8005a12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b02      	cmp	r3, #2
 8005910:	f200 80a1 	bhi.w	8005a56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d056      	beq.n	80059ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005920:	e099      	b.n	8005a56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02d      	beq.n	800598a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800592e:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	4a83      	ldr	r2, [pc, #524]	; (8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800593a:	fa22 f303 	lsr.w	r3, r2, r3
 800593e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005958:	4b7a      	ldr	r3, [pc, #488]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005968:	ed97 6a03 	vldr	s12, [r7, #12]
 800596c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005984:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005988:	e087      	b.n	8005a9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005994:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599c:	4b69      	ldr	r3, [pc, #420]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059cc:	e065      	b.n	8005a9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005b54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80059dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e0:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a10:	e043      	b.n	8005a9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a24:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a54:	e021      	b.n	8005a9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	0a5b      	lsrs	r3, r3, #9
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac0:	ee17 2a90 	vmov	r2, s15
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aee:	ee17 2a90 	vmov	r2, s15
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	0e1b      	lsrs	r3, r3, #24
 8005afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1c:	ee17 2a90 	vmov	r2, s15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3724      	adds	r7, #36	; 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	58024400 	.word	0x58024400
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	46000000 	.word	0x46000000
 8005b50:	4c742400 	.word	0x4c742400
 8005b54:	4a742400 	.word	0x4a742400
 8005b58:	4af42400 	.word	0x4af42400

08005b5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b6a:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d101      	bne.n	8005b7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e099      	b.n	8005cae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b7a:	4b4f      	ldr	r3, [pc, #316]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a4e      	ldr	r2, [pc, #312]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b86:	f7fb fbdf 	bl	8001348 <HAL_GetTick>
 8005b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b8c:	e008      	b.n	8005ba0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b8e:	f7fb fbdb 	bl	8001348 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e086      	b.n	8005cae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ba0:	4b45      	ldr	r3, [pc, #276]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f0      	bne.n	8005b8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bac:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	628b      	str	r3, [r1, #40]	; 0x28
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	025b      	lsls	r3, r3, #9
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bf0:	4931      	ldr	r1, [pc, #196]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	492d      	ldr	r1, [pc, #180]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c08:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f023 0220 	bic.w	r2, r3, #32
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	4928      	ldr	r1, [pc, #160]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c1a:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c20:	f023 0310 	bic.w	r3, r3, #16
 8005c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c26:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2a:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <RCCEx_PLL2_Config+0x160>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	69d2      	ldr	r2, [r2, #28]
 8005c32:	00d2      	lsls	r2, r2, #3
 8005c34:	4920      	ldr	r1, [pc, #128]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c3a:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c40:	f043 0310 	orr.w	r3, r3, #16
 8005c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c58:	e00f      	b.n	8005c7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c60:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c6c:	e005      	b.n	8005c7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a11      	ldr	r2, [pc, #68]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fb fb5f 	bl	8001348 <HAL_GetTick>
 8005c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c8c:	e008      	b.n	8005ca0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c8e:	f7fb fb5b 	bl	8001348 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <RCCEx_PLL2_Config+0x15c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	ffff0007 	.word	0xffff0007

08005cc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cce:	4b53      	ldr	r3, [pc, #332]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d101      	bne.n	8005cde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e099      	b.n	8005e12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cde:	4b4f      	ldr	r3, [pc, #316]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4e      	ldr	r2, [pc, #312]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cea:	f7fb fb2d 	bl	8001348 <HAL_GetTick>
 8005cee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cf0:	e008      	b.n	8005d04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cf2:	f7fb fb29 	bl	8001348 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e086      	b.n	8005e12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d04:	4b45      	ldr	r3, [pc, #276]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f0      	bne.n	8005cf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d10:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	493f      	ldr	r1, [pc, #252]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	628b      	str	r3, [r1, #40]	; 0x28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	025b      	lsls	r3, r3, #9
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d54:	4931      	ldr	r1, [pc, #196]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	492d      	ldr	r1, [pc, #180]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	4928      	ldr	r1, [pc, #160]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d7e:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <RCCEx_PLL3_Config+0x160>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	69d2      	ldr	r2, [r2, #28]
 8005d96:	00d2      	lsls	r2, r2, #3
 8005d98:	4920      	ldr	r1, [pc, #128]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d9e:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	4a1e      	ldr	r2, [pc, #120]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dbc:	e00f      	b.n	8005dde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d106      	bne.n	8005dd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005dca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dd0:	e005      	b.n	8005dde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dea:	f7fb faad 	bl	8001348 <HAL_GetTick>
 8005dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005df0:	e008      	b.n	8005e04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005df2:	f7fb faa9 	bl	8001348 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e006      	b.n	8005e12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <RCCEx_PLL3_Config+0x15c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	ffff0007 	.word	0xffff0007

08005e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e049      	b.n	8005eca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fb f83e 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f000 fb5e 	bl	8006524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d001      	beq.n	8005eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e04c      	b.n	8005f86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <HAL_TIM_Base_Start+0xc0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <HAL_TIM_Base_Start+0xc4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_TIM_Base_Start+0xc8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_TIM_Base_Start+0xcc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <HAL_TIM_Base_Start+0xd0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_TIM_Base_Start+0xd4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIM_Base_Start+0x70>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_TIM_Base_Start+0xd8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d115      	bne.n	8005f70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_TIM_Base_Start+0xdc>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d015      	beq.n	8005f82 <HAL_TIM_Base_Start+0xae>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d011      	beq.n	8005f82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	e008      	b.n	8005f82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40001800 	.word	0x40001800
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	00010007 	.word	0x00010007

08005fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d001      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e054      	b.n	8006076 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d01d      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a22      	ldr	r2, [pc, #136]	; (8006088 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a21      	ldr	r2, [pc, #132]	; (800608c <HAL_TIM_Base_Start_IT+0xd8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <HAL_TIM_Base_Start_IT+0xdc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <HAL_TIM_Base_Start_IT+0xe0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1c      	ldr	r2, [pc, #112]	; (8006098 <HAL_TIM_Base_Start_IT+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x80>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1b      	ldr	r2, [pc, #108]	; (800609c <HAL_TIM_Base_Start_IT+0xe8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d115      	bne.n	8006060 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_TIM_Base_Start_IT+0xec>)
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d015      	beq.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d011      	beq.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	e008      	b.n	8006072 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e000      	b.n	8006074 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40001800 	.word	0x40001800
 800609c:	40014000 	.word	0x40014000
 80060a0:	00010007 	.word	0x00010007

080060a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d122      	bne.n	8006100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d11b      	bne.n	8006100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0202 	mvn.w	r2, #2
 80060d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9fe 	bl	80064e8 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9f0 	bl	80064d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fa01 	bl	80064fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b04      	cmp	r3, #4
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0204 	mvn.w	r2, #4
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9d4 	bl	80064e8 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9c6 	bl	80064d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f9d7 	bl	80064fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b08      	cmp	r3, #8
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b08      	cmp	r3, #8
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0208 	mvn.w	r2, #8
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2204      	movs	r2, #4
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9aa 	bl	80064e8 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f99c 	bl	80064d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f9ad 	bl	80064fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0210 	mvn.w	r2, #16
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2208      	movs	r2, #8
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f980 	bl	80064e8 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f972 	bl	80064d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f983 	bl	80064fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10e      	bne.n	8006228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d107      	bne.n	8006228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0201 	mvn.w	r2, #1
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fa fc76 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fb38 	bl	80068c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	d10e      	bne.n	8006282 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d107      	bne.n	8006282 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fb2b 	bl	80068d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d10e      	bne.n	80062ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f931 	bl	8006510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0220 	mvn.w	r2, #32
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 faeb 	bl	80068b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_TIM_ConfigClockSource+0x1c>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e0dc      	b.n	80064ba <HAL_TIM_ConfigClockSource+0x1d6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800631c:	4013      	ands	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a64      	ldr	r2, [pc, #400]	; (80064c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f000 80a9 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 800633c:	4a62      	ldr	r2, [pc, #392]	; (80064c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f200 80ae 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006344:	4a61      	ldr	r2, [pc, #388]	; (80064cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f000 80a1 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 800634c:	4a5f      	ldr	r2, [pc, #380]	; (80064cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	f200 80a6 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006354:	4a5e      	ldr	r2, [pc, #376]	; (80064d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006356:	4293      	cmp	r3, r2
 8006358:	f000 8099 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 800635c:	4a5c      	ldr	r2, [pc, #368]	; (80064d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800635e:	4293      	cmp	r3, r2
 8006360:	f200 809e 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006368:	f000 8091 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 800636c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006370:	f200 8096 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006378:	f000 8089 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 800637c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006380:	f200 808e 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0x124>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	f000 8086 	beq.w	80064a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xf6>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x16a>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b0:	2b50      	cmp	r3, #80	; 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x14a>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x18a>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x1aa>
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f000 f9b3 	bl	8006754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04f      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 f99c 	bl	8006754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 f90c 	bl	8006658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f966 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 800644c:	e02c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 f92b 	bl	80066b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	; 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f956 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 800646c:	e01c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 f8ec 	bl	8006658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f946 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 f93d 	bl	8006718 <TIM_ITRx_SetConfig>
      break;
 800649e:	e003      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80064a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	ffceff88 	.word	0xffceff88
 80064c8:	00100040 	.word	0x00100040
 80064cc:	00100030 	.word	0x00100030
 80064d0:	00100020 	.word	0x00100020

080064d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a40      	ldr	r2, [pc, #256]	; (8006638 <TIM_Base_SetConfig+0x114>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3d      	ldr	r2, [pc, #244]	; (800663c <TIM_Base_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3c      	ldr	r2, [pc, #240]	; (8006640 <TIM_Base_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3b      	ldr	r2, [pc, #236]	; (8006644 <TIM_Base_SetConfig+0x120>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3a      	ldr	r2, [pc, #232]	; (8006648 <TIM_Base_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d108      	bne.n	8006576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2f      	ldr	r2, [pc, #188]	; (8006638 <TIM_Base_SetConfig+0x114>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01f      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d01b      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <TIM_Base_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d017      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <TIM_Base_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2a      	ldr	r2, [pc, #168]	; (8006644 <TIM_Base_SetConfig+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a29      	ldr	r2, [pc, #164]	; (8006648 <TIM_Base_SetConfig+0x124>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a28      	ldr	r2, [pc, #160]	; (800664c <TIM_Base_SetConfig+0x128>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a27      	ldr	r2, [pc, #156]	; (8006650 <TIM_Base_SetConfig+0x12c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a26      	ldr	r2, [pc, #152]	; (8006654 <TIM_Base_SetConfig+0x130>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <TIM_Base_SetConfig+0x114>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <TIM_Base_SetConfig+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <TIM_Base_SetConfig+0x128>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a10      	ldr	r2, [pc, #64]	; (8006650 <TIM_Base_SetConfig+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a0f      	ldr	r2, [pc, #60]	; (8006654 <TIM_Base_SetConfig+0x130>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d103      	bne.n	8006624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	615a      	str	r2, [r3, #20]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800

08006658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 030a 	bic.w	r3, r3, #10
 8006694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0210 	bic.w	r2, r3, #16
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <TIM_ITRx_SetConfig+0x38>)
 800672c:	4013      	ands	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	f043 0307 	orr.w	r3, r3, #7
 800673a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	609a      	str	r2, [r3, #8]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	ffcfff8f 	.word	0xffcfff8f

08006754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	431a      	orrs	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4313      	orrs	r3, r2
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e06d      	b.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a30      	ldr	r2, [pc, #192]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d108      	bne.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a20      	ldr	r2, [pc, #128]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d022      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d01d      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1d      	ldr	r2, [pc, #116]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d018      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00e      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d009      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d004      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10c      	bne.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40001800 	.word	0x40001800
 80068ac:	40014000 	.word	0x40014000

080068b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e042      	b.n	8006984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fa fb1b 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2224      	movs	r2, #36	; 0x24
 800691a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8c2 	bl	8006ab8 <UART_SetConfig>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e022      	b.n	8006984 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 ff22 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800695a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800696a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 ffa9 	bl	80078d4 <UART_CheckIdleState>
 8006982:	4603      	mov	r3, r0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	f040 8083 	bne.w	8006aae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Transmit+0x28>
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e07b      	b.n	8006ab0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Transmit+0x3a>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e074      	b.n	8006ab0 <HAL_UART_Transmit+0x124>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2221      	movs	r2, #33	; 0x21
 80069da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069de:	f7fa fcb3 	bl	8001348 <HAL_GetTick>
 80069e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	d108      	bne.n	8006a10 <HAL_UART_Transmit+0x84>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e003      	b.n	8006a18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006a20:	e02c      	b.n	8006a7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 ff9c 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e039      	b.n	8006ab0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	3302      	adds	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e007      	b.n	8006a6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1cc      	bne.n	8006a22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 ff69 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e006      	b.n	8006ab0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006abc:	b092      	sub	sp, #72	; 0x48
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4bbe      	ldr	r3, [pc, #760]	; (8006de0 <UART_SetConfig+0x328>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4ab3      	ldr	r2, [pc, #716]	; (8006de4 <UART_SetConfig+0x32c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b20:	4313      	orrs	r3, r2
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	4baf      	ldr	r3, [pc, #700]	; (8006de8 <UART_SetConfig+0x330>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	f023 010f 	bic.w	r1, r3, #15
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4aa6      	ldr	r2, [pc, #664]	; (8006dec <UART_SetConfig+0x334>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d177      	bne.n	8006c48 <UART_SetConfig+0x190>
 8006b58:	4ba5      	ldr	r3, [pc, #660]	; (8006df0 <UART_SetConfig+0x338>)
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b60:	2b28      	cmp	r3, #40	; 0x28
 8006b62:	d86d      	bhi.n	8006c40 <UART_SetConfig+0x188>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0xb4>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006c11 	.word	0x08006c11
 8006b70:	08006c41 	.word	0x08006c41
 8006b74:	08006c41 	.word	0x08006c41
 8006b78:	08006c41 	.word	0x08006c41
 8006b7c:	08006c41 	.word	0x08006c41
 8006b80:	08006c41 	.word	0x08006c41
 8006b84:	08006c41 	.word	0x08006c41
 8006b88:	08006c41 	.word	0x08006c41
 8006b8c:	08006c19 	.word	0x08006c19
 8006b90:	08006c41 	.word	0x08006c41
 8006b94:	08006c41 	.word	0x08006c41
 8006b98:	08006c41 	.word	0x08006c41
 8006b9c:	08006c41 	.word	0x08006c41
 8006ba0:	08006c41 	.word	0x08006c41
 8006ba4:	08006c41 	.word	0x08006c41
 8006ba8:	08006c41 	.word	0x08006c41
 8006bac:	08006c21 	.word	0x08006c21
 8006bb0:	08006c41 	.word	0x08006c41
 8006bb4:	08006c41 	.word	0x08006c41
 8006bb8:	08006c41 	.word	0x08006c41
 8006bbc:	08006c41 	.word	0x08006c41
 8006bc0:	08006c41 	.word	0x08006c41
 8006bc4:	08006c41 	.word	0x08006c41
 8006bc8:	08006c41 	.word	0x08006c41
 8006bcc:	08006c29 	.word	0x08006c29
 8006bd0:	08006c41 	.word	0x08006c41
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006c41 	.word	0x08006c41
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e326      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e322      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e31e      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e31a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e316      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e312      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e30e      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a69      	ldr	r2, [pc, #420]	; (8006df4 <UART_SetConfig+0x33c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d130      	bne.n	8006cb4 <UART_SetConfig+0x1fc>
 8006c52:	4b67      	ldr	r3, [pc, #412]	; (8006df0 <UART_SetConfig+0x338>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d826      	bhi.n	8006cac <UART_SetConfig+0x1f4>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x1ac>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e2f0      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e2ec      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e2e8      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9a:	e2e4      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca2:	e2e0      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006caa:	e2dc      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb2:	e2d8      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a4f      	ldr	r2, [pc, #316]	; (8006df8 <UART_SetConfig+0x340>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d130      	bne.n	8006d20 <UART_SetConfig+0x268>
 8006cbe:	4b4c      	ldr	r3, [pc, #304]	; (8006df0 <UART_SetConfig+0x338>)
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d826      	bhi.n	8006d18 <UART_SetConfig+0x260>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0x218>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e2ba      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e2b6      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfe:	e2b2      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e2ae      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e2aa      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e2a6      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e2a2      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a35      	ldr	r2, [pc, #212]	; (8006dfc <UART_SetConfig+0x344>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d130      	bne.n	8006d8c <UART_SetConfig+0x2d4>
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <UART_SetConfig+0x338>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d826      	bhi.n	8006d84 <UART_SetConfig+0x2cc>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0x284>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	08006d65 	.word	0x08006d65
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e284      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e280      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e27c      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e278      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d74:	2320      	movs	r3, #32
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e274      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e270      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d84:	2380      	movs	r3, #128	; 0x80
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e26c      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <UART_SetConfig+0x348>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d142      	bne.n	8006e1c <UART_SetConfig+0x364>
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <UART_SetConfig+0x338>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d838      	bhi.n	8006e14 <UART_SetConfig+0x35c>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x2f0>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e24e      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e24a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e246      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e242      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006de0:	cfff69f3 	.word	0xcfff69f3
 8006de4:	58000c00 	.word	0x58000c00
 8006de8:	11fff4ff 	.word	0x11fff4ff
 8006dec:	40011000 	.word	0x40011000
 8006df0:	58024400 	.word	0x58024400
 8006df4:	40004400 	.word	0x40004400
 8006df8:	40004800 	.word	0x40004800
 8006dfc:	40004c00 	.word	0x40004c00
 8006e00:	40005000 	.word	0x40005000
 8006e04:	2320      	movs	r3, #32
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e22c      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e228      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006e14:	2380      	movs	r3, #128	; 0x80
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e224      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4ab1      	ldr	r2, [pc, #708]	; (80070e8 <UART_SetConfig+0x630>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d176      	bne.n	8006f14 <UART_SetConfig+0x45c>
 8006e26:	4bb1      	ldr	r3, [pc, #708]	; (80070ec <UART_SetConfig+0x634>)
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e2e:	2b28      	cmp	r3, #40	; 0x28
 8006e30:	d86c      	bhi.n	8006f0c <UART_SetConfig+0x454>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x380>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006edd 	.word	0x08006edd
 8006e3c:	08006f0d 	.word	0x08006f0d
 8006e40:	08006f0d 	.word	0x08006f0d
 8006e44:	08006f0d 	.word	0x08006f0d
 8006e48:	08006f0d 	.word	0x08006f0d
 8006e4c:	08006f0d 	.word	0x08006f0d
 8006e50:	08006f0d 	.word	0x08006f0d
 8006e54:	08006f0d 	.word	0x08006f0d
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006f0d 	.word	0x08006f0d
 8006e60:	08006f0d 	.word	0x08006f0d
 8006e64:	08006f0d 	.word	0x08006f0d
 8006e68:	08006f0d 	.word	0x08006f0d
 8006e6c:	08006f0d 	.word	0x08006f0d
 8006e70:	08006f0d 	.word	0x08006f0d
 8006e74:	08006f0d 	.word	0x08006f0d
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006f0d 	.word	0x08006f0d
 8006e80:	08006f0d 	.word	0x08006f0d
 8006e84:	08006f0d 	.word	0x08006f0d
 8006e88:	08006f0d 	.word	0x08006f0d
 8006e8c:	08006f0d 	.word	0x08006f0d
 8006e90:	08006f0d 	.word	0x08006f0d
 8006e94:	08006f0d 	.word	0x08006f0d
 8006e98:	08006ef5 	.word	0x08006ef5
 8006e9c:	08006f0d 	.word	0x08006f0d
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006f0d 	.word	0x08006f0d
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006f0d 	.word	0x08006f0d
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e1c0      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e1bc      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e1b8      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e1b4      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e1b0      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e1ac      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e1a8      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a75      	ldr	r2, [pc, #468]	; (80070f0 <UART_SetConfig+0x638>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d130      	bne.n	8006f80 <UART_SetConfig+0x4c8>
 8006f1e:	4b73      	ldr	r3, [pc, #460]	; (80070ec <UART_SetConfig+0x634>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d826      	bhi.n	8006f78 <UART_SetConfig+0x4c0>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x478>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e18a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e186      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e182      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e17e      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e17a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e176      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e172      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5b      	ldr	r2, [pc, #364]	; (80070f4 <UART_SetConfig+0x63c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d130      	bne.n	8006fec <UART_SetConfig+0x534>
 8006f8a:	4b58      	ldr	r3, [pc, #352]	; (80070ec <UART_SetConfig+0x634>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d826      	bhi.n	8006fe4 <UART_SetConfig+0x52c>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x4e4>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e154      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e150      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e14c      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e148      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e144      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e140      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e13c      	b.n	8007266 <UART_SetConfig+0x7ae>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a41      	ldr	r2, [pc, #260]	; (80070f8 <UART_SetConfig+0x640>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	f040 8082 	bne.w	80070fc <UART_SetConfig+0x644>
 8006ff8:	4b3c      	ldr	r3, [pc, #240]	; (80070ec <UART_SetConfig+0x634>)
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007000:	2b28      	cmp	r3, #40	; 0x28
 8007002:	d86d      	bhi.n	80070e0 <UART_SetConfig+0x628>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x554>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	080070b1 	.word	0x080070b1
 8007010:	080070e1 	.word	0x080070e1
 8007014:	080070e1 	.word	0x080070e1
 8007018:	080070e1 	.word	0x080070e1
 800701c:	080070e1 	.word	0x080070e1
 8007020:	080070e1 	.word	0x080070e1
 8007024:	080070e1 	.word	0x080070e1
 8007028:	080070e1 	.word	0x080070e1
 800702c:	080070b9 	.word	0x080070b9
 8007030:	080070e1 	.word	0x080070e1
 8007034:	080070e1 	.word	0x080070e1
 8007038:	080070e1 	.word	0x080070e1
 800703c:	080070e1 	.word	0x080070e1
 8007040:	080070e1 	.word	0x080070e1
 8007044:	080070e1 	.word	0x080070e1
 8007048:	080070e1 	.word	0x080070e1
 800704c:	080070c1 	.word	0x080070c1
 8007050:	080070e1 	.word	0x080070e1
 8007054:	080070e1 	.word	0x080070e1
 8007058:	080070e1 	.word	0x080070e1
 800705c:	080070e1 	.word	0x080070e1
 8007060:	080070e1 	.word	0x080070e1
 8007064:	080070e1 	.word	0x080070e1
 8007068:	080070e1 	.word	0x080070e1
 800706c:	080070c9 	.word	0x080070c9
 8007070:	080070e1 	.word	0x080070e1
 8007074:	080070e1 	.word	0x080070e1
 8007078:	080070e1 	.word	0x080070e1
 800707c:	080070e1 	.word	0x080070e1
 8007080:	080070e1 	.word	0x080070e1
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070e1 	.word	0x080070e1
 800708c:	080070d1 	.word	0x080070d1
 8007090:	080070e1 	.word	0x080070e1
 8007094:	080070e1 	.word	0x080070e1
 8007098:	080070e1 	.word	0x080070e1
 800709c:	080070e1 	.word	0x080070e1
 80070a0:	080070e1 	.word	0x080070e1
 80070a4:	080070e1 	.word	0x080070e1
 80070a8:	080070e1 	.word	0x080070e1
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e0d6      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070b8:	2304      	movs	r3, #4
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e0d2      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070c0:	2308      	movs	r3, #8
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e0ce      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070c8:	2310      	movs	r3, #16
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e0ca      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070d0:	2320      	movs	r3, #32
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e0c6      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070d8:	2340      	movs	r3, #64	; 0x40
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e0c2      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e0be      	b.n	8007266 <UART_SetConfig+0x7ae>
 80070e8:	40011400 	.word	0x40011400
 80070ec:	58024400 	.word	0x58024400
 80070f0:	40007800 	.word	0x40007800
 80070f4:	40007c00 	.word	0x40007c00
 80070f8:	40011800 	.word	0x40011800
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4aad      	ldr	r2, [pc, #692]	; (80073b8 <UART_SetConfig+0x900>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d176      	bne.n	80071f4 <UART_SetConfig+0x73c>
 8007106:	4bad      	ldr	r3, [pc, #692]	; (80073bc <UART_SetConfig+0x904>)
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800710e:	2b28      	cmp	r3, #40	; 0x28
 8007110:	d86c      	bhi.n	80071ec <UART_SetConfig+0x734>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <UART_SetConfig+0x660>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071ed 	.word	0x080071ed
 8007120:	080071ed 	.word	0x080071ed
 8007124:	080071ed 	.word	0x080071ed
 8007128:	080071ed 	.word	0x080071ed
 800712c:	080071ed 	.word	0x080071ed
 8007130:	080071ed 	.word	0x080071ed
 8007134:	080071ed 	.word	0x080071ed
 8007138:	080071c5 	.word	0x080071c5
 800713c:	080071ed 	.word	0x080071ed
 8007140:	080071ed 	.word	0x080071ed
 8007144:	080071ed 	.word	0x080071ed
 8007148:	080071ed 	.word	0x080071ed
 800714c:	080071ed 	.word	0x080071ed
 8007150:	080071ed 	.word	0x080071ed
 8007154:	080071ed 	.word	0x080071ed
 8007158:	080071cd 	.word	0x080071cd
 800715c:	080071ed 	.word	0x080071ed
 8007160:	080071ed 	.word	0x080071ed
 8007164:	080071ed 	.word	0x080071ed
 8007168:	080071ed 	.word	0x080071ed
 800716c:	080071ed 	.word	0x080071ed
 8007170:	080071ed 	.word	0x080071ed
 8007174:	080071ed 	.word	0x080071ed
 8007178:	080071d5 	.word	0x080071d5
 800717c:	080071ed 	.word	0x080071ed
 8007180:	080071ed 	.word	0x080071ed
 8007184:	080071ed 	.word	0x080071ed
 8007188:	080071ed 	.word	0x080071ed
 800718c:	080071ed 	.word	0x080071ed
 8007190:	080071ed 	.word	0x080071ed
 8007194:	080071ed 	.word	0x080071ed
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071ed 	.word	0x080071ed
 80071a0:	080071ed 	.word	0x080071ed
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e050      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e04c      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e048      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e044      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e040      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e03c      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e038      	b.n	8007266 <UART_SetConfig+0x7ae>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a71      	ldr	r2, [pc, #452]	; (80073c0 <UART_SetConfig+0x908>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d130      	bne.n	8007260 <UART_SetConfig+0x7a8>
 80071fe:	4b6f      	ldr	r3, [pc, #444]	; (80073bc <UART_SetConfig+0x904>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b05      	cmp	r3, #5
 8007208:	d826      	bhi.n	8007258 <UART_SetConfig+0x7a0>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x758>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007229 	.word	0x08007229
 8007214:	08007231 	.word	0x08007231
 8007218:	08007239 	.word	0x08007239
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	2302      	movs	r3, #2
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e01a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e016      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e00e      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007248:	2320      	movs	r3, #32
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e00a      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007250:	2340      	movs	r3, #64	; 0x40
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e006      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e002      	b.n	8007266 <UART_SetConfig+0x7ae>
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a55      	ldr	r2, [pc, #340]	; (80073c0 <UART_SetConfig+0x908>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 80f8 	bne.w	8007462 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007272:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007276:	2b20      	cmp	r3, #32
 8007278:	dc46      	bgt.n	8007308 <UART_SetConfig+0x850>
 800727a:	2b02      	cmp	r3, #2
 800727c:	db75      	blt.n	800736a <UART_SetConfig+0x8b2>
 800727e:	3b02      	subs	r3, #2
 8007280:	2b1e      	cmp	r3, #30
 8007282:	d872      	bhi.n	800736a <UART_SetConfig+0x8b2>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x7d4>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	0800730f 	.word	0x0800730f
 8007290:	0800736b 	.word	0x0800736b
 8007294:	08007317 	.word	0x08007317
 8007298:	0800736b 	.word	0x0800736b
 800729c:	0800736b 	.word	0x0800736b
 80072a0:	0800736b 	.word	0x0800736b
 80072a4:	08007327 	.word	0x08007327
 80072a8:	0800736b 	.word	0x0800736b
 80072ac:	0800736b 	.word	0x0800736b
 80072b0:	0800736b 	.word	0x0800736b
 80072b4:	0800736b 	.word	0x0800736b
 80072b8:	0800736b 	.word	0x0800736b
 80072bc:	0800736b 	.word	0x0800736b
 80072c0:	0800736b 	.word	0x0800736b
 80072c4:	08007337 	.word	0x08007337
 80072c8:	0800736b 	.word	0x0800736b
 80072cc:	0800736b 	.word	0x0800736b
 80072d0:	0800736b 	.word	0x0800736b
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	0800736b 	.word	0x0800736b
 80072dc:	0800736b 	.word	0x0800736b
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	0800736b 	.word	0x0800736b
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	0800736b 	.word	0x0800736b
 80072f0:	0800736b 	.word	0x0800736b
 80072f4:	0800736b 	.word	0x0800736b
 80072f8:	0800736b 	.word	0x0800736b
 80072fc:	0800736b 	.word	0x0800736b
 8007300:	0800736b 	.word	0x0800736b
 8007304:	0800735d 	.word	0x0800735d
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d02a      	beq.n	8007362 <UART_SetConfig+0x8aa>
 800730c:	e02d      	b.n	800736a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800730e:	f7fe f815 	bl	800533c <HAL_RCCEx_GetD3PCLK1Freq>
 8007312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007314:	e02f      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe f824 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007324:	e027      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe f970 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e01f      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007336:	4b21      	ldr	r3, [pc, #132]	; (80073bc <UART_SetConfig+0x904>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <UART_SetConfig+0x904>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <UART_SetConfig+0x90c>)
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007354:	e00f      	b.n	8007376 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007356:	4b1b      	ldr	r3, [pc, #108]	; (80073c4 <UART_SetConfig+0x90c>)
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735a:	e00c      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <UART_SetConfig+0x910>)
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007368:	e005      	b.n	8007376 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 81ee 	beq.w	800775a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	4a12      	ldr	r2, [pc, #72]	; (80073cc <UART_SetConfig+0x914>)
 8007384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007388:	461a      	mov	r2, r3
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007390:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	429a      	cmp	r2, r3
 80073a0:	d305      	bcc.n	80073ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d910      	bls.n	80073d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073b4:	e1d1      	b.n	800775a <UART_SetConfig+0xca2>
 80073b6:	bf00      	nop
 80073b8:	40011c00 	.word	0x40011c00
 80073bc:	58024400 	.word	0x58024400
 80073c0:	58000c00 	.word	0x58000c00
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	003d0900 	.word	0x003d0900
 80073cc:	0800938c 	.word	0x0800938c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	2200      	movs	r2, #0
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	60fa      	str	r2, [r7, #12]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	4ac0      	ldr	r2, [pc, #768]	; (80076e0 <UART_SetConfig+0xc28>)
 80073de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2200      	movs	r2, #0
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f2:	f7f8 ffad 	bl	8000350 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	020b      	lsls	r3, r1, #8
 8007408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800740c:	0202      	lsls	r2, r0, #8
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	6849      	ldr	r1, [r1, #4]
 8007412:	0849      	lsrs	r1, r1, #1
 8007414:	2000      	movs	r0, #0
 8007416:	460c      	mov	r4, r1
 8007418:	4605      	mov	r5, r0
 800741a:	eb12 0804 	adds.w	r8, r2, r4
 800741e:	eb43 0905 	adc.w	r9, r3, r5
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	469a      	mov	sl, r3
 800742a:	4693      	mov	fp, r2
 800742c:	4652      	mov	r2, sl
 800742e:	465b      	mov	r3, fp
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 ff8c 	bl	8000350 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4613      	mov	r3, r2
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007446:	d308      	bcc.n	800745a <UART_SetConfig+0x9a2>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744e:	d204      	bcs.n	800745a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	60da      	str	r2, [r3, #12]
 8007458:	e17f      	b.n	800775a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007460:	e17b      	b.n	800775a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746a:	f040 80bd 	bne.w	80075e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800746e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007472:	2b20      	cmp	r3, #32
 8007474:	dc48      	bgt.n	8007508 <UART_SetConfig+0xa50>
 8007476:	2b00      	cmp	r3, #0
 8007478:	db7b      	blt.n	8007572 <UART_SetConfig+0xaba>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d879      	bhi.n	8007572 <UART_SetConfig+0xaba>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x9cc>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	0800750f 	.word	0x0800750f
 8007488:	08007517 	.word	0x08007517
 800748c:	08007573 	.word	0x08007573
 8007490:	08007573 	.word	0x08007573
 8007494:	0800751f 	.word	0x0800751f
 8007498:	08007573 	.word	0x08007573
 800749c:	08007573 	.word	0x08007573
 80074a0:	08007573 	.word	0x08007573
 80074a4:	0800752f 	.word	0x0800752f
 80074a8:	08007573 	.word	0x08007573
 80074ac:	08007573 	.word	0x08007573
 80074b0:	08007573 	.word	0x08007573
 80074b4:	08007573 	.word	0x08007573
 80074b8:	08007573 	.word	0x08007573
 80074bc:	08007573 	.word	0x08007573
 80074c0:	08007573 	.word	0x08007573
 80074c4:	0800753f 	.word	0x0800753f
 80074c8:	08007573 	.word	0x08007573
 80074cc:	08007573 	.word	0x08007573
 80074d0:	08007573 	.word	0x08007573
 80074d4:	08007573 	.word	0x08007573
 80074d8:	08007573 	.word	0x08007573
 80074dc:	08007573 	.word	0x08007573
 80074e0:	08007573 	.word	0x08007573
 80074e4:	08007573 	.word	0x08007573
 80074e8:	08007573 	.word	0x08007573
 80074ec:	08007573 	.word	0x08007573
 80074f0:	08007573 	.word	0x08007573
 80074f4:	08007573 	.word	0x08007573
 80074f8:	08007573 	.word	0x08007573
 80074fc:	08007573 	.word	0x08007573
 8007500:	08007573 	.word	0x08007573
 8007504:	08007565 	.word	0x08007565
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d02e      	beq.n	800756a <UART_SetConfig+0xab2>
 800750c:	e031      	b.n	8007572 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fc fbaf 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8007512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007514:	e033      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007516:	f7fc fbc1 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 800751a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800751c:	e02f      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f7fd ff20 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800752c:	e027      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f86c 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753c:	e01f      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800753e:	4b69      	ldr	r3, [pc, #420]	; (80076e4 <UART_SetConfig+0xc2c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800754a:	4b66      	ldr	r3, [pc, #408]	; (80076e4 <UART_SetConfig+0xc2c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	08db      	lsrs	r3, r3, #3
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	4a64      	ldr	r2, [pc, #400]	; (80076e8 <UART_SetConfig+0xc30>)
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800755c:	e00f      	b.n	800757e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800755e:	4b62      	ldr	r3, [pc, #392]	; (80076e8 <UART_SetConfig+0xc30>)
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007562:	e00c      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007564:	4b61      	ldr	r3, [pc, #388]	; (80076ec <UART_SetConfig+0xc34>)
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007568:	e009      	b.n	800757e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007570:	e005      	b.n	800757e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800757c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80ea 	beq.w	800775a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	4a55      	ldr	r2, [pc, #340]	; (80076e0 <UART_SetConfig+0xc28>)
 800758c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007590:	461a      	mov	r2, r3
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	fbb3 f3f2 	udiv	r3, r3, r2
 8007598:	005a      	lsls	r2, r3, #1
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	441a      	add	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	2b0f      	cmp	r3, #15
 80075b0:	d916      	bls.n	80075e0 <UART_SetConfig+0xb28>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d212      	bcs.n	80075e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f023 030f 	bic.w	r3, r3, #15
 80075c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075d2:	4313      	orrs	r3, r2
 80075d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	e0bc      	b.n	800775a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075e6:	e0b8      	b.n	800775a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	dc4b      	bgt.n	8007688 <UART_SetConfig+0xbd0>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f2c0 8087 	blt.w	8007704 <UART_SetConfig+0xc4c>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	f200 8084 	bhi.w	8007704 <UART_SetConfig+0xc4c>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <UART_SetConfig+0xb4c>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	0800768f 	.word	0x0800768f
 8007608:	08007697 	.word	0x08007697
 800760c:	08007705 	.word	0x08007705
 8007610:	08007705 	.word	0x08007705
 8007614:	0800769f 	.word	0x0800769f
 8007618:	08007705 	.word	0x08007705
 800761c:	08007705 	.word	0x08007705
 8007620:	08007705 	.word	0x08007705
 8007624:	080076af 	.word	0x080076af
 8007628:	08007705 	.word	0x08007705
 800762c:	08007705 	.word	0x08007705
 8007630:	08007705 	.word	0x08007705
 8007634:	08007705 	.word	0x08007705
 8007638:	08007705 	.word	0x08007705
 800763c:	08007705 	.word	0x08007705
 8007640:	08007705 	.word	0x08007705
 8007644:	080076bf 	.word	0x080076bf
 8007648:	08007705 	.word	0x08007705
 800764c:	08007705 	.word	0x08007705
 8007650:	08007705 	.word	0x08007705
 8007654:	08007705 	.word	0x08007705
 8007658:	08007705 	.word	0x08007705
 800765c:	08007705 	.word	0x08007705
 8007660:	08007705 	.word	0x08007705
 8007664:	08007705 	.word	0x08007705
 8007668:	08007705 	.word	0x08007705
 800766c:	08007705 	.word	0x08007705
 8007670:	08007705 	.word	0x08007705
 8007674:	08007705 	.word	0x08007705
 8007678:	08007705 	.word	0x08007705
 800767c:	08007705 	.word	0x08007705
 8007680:	08007705 	.word	0x08007705
 8007684:	080076f7 	.word	0x080076f7
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d037      	beq.n	80076fc <UART_SetConfig+0xc44>
 800768c:	e03a      	b.n	8007704 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768e:	f7fc faef 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8007692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007694:	e03c      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007696:	f7fc fb01 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 800769a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800769c:	e038      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800769e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fd fe60 	bl	8005368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ac:	e030      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ae:	f107 0318 	add.w	r3, r7, #24
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fd ffac 	bl	8005610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076bc:	e028      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <UART_SetConfig+0xc2c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d012      	beq.n	80076f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076ca:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <UART_SetConfig+0xc2c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	4a04      	ldr	r2, [pc, #16]	; (80076e8 <UART_SetConfig+0xc30>)
 80076d6:	fa22 f303 	lsr.w	r3, r2, r3
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076dc:	e018      	b.n	8007710 <UART_SetConfig+0xc58>
 80076de:	bf00      	nop
 80076e0:	0800938c 	.word	0x0800938c
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80076f0:	4b24      	ldr	r3, [pc, #144]	; (8007784 <UART_SetConfig+0xccc>)
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f4:	e00c      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <UART_SetConfig+0xcd0>)
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fa:	e009      	b.n	8007710 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007702:	e005      	b.n	8007710 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800770e:	bf00      	nop
    }

    if (pclk != 0U)
 8007710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d021      	beq.n	800775a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	4a1c      	ldr	r2, [pc, #112]	; (800778c <UART_SetConfig+0xcd4>)
 800771c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007720:	461a      	mov	r2, r3
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	fbb3 f2f2 	udiv	r2, r3, r2
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	441a      	add	r2, r3
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	2b0f      	cmp	r3, #15
 800773e:	d909      	bls.n	8007754 <UART_SetConfig+0xc9c>
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	d205      	bcs.n	8007754 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	b29a      	uxth	r2, r3
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	e002      	b.n	800775a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2201      	movs	r2, #1
 800775e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2201      	movs	r2, #1
 8007766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2200      	movs	r2, #0
 8007774:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007776:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800777a:	4618      	mov	r0, r3
 800777c:	3748      	adds	r7, #72	; 0x48
 800777e:	46bd      	mov	sp, r7
 8007780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007784:	03d09000 	.word	0x03d09000
 8007788:	003d0900 	.word	0x003d0900
 800778c:	0800938c 	.word	0x0800938c

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7f9 fd30 	bl	8001348 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82f 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e025      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f819 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00f      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800797a:	e0a9      	b.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007982:	f000 80a5 	beq.w	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007986:	f7f9 fcdf 	bl	8001348 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
 8007996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007998:	2b00      	cmp	r3, #0
 800799a:	d140      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079b0:	667b      	str	r3, [r7, #100]	; 0x64
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e069      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d051      	beq.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3a:	d149      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
 8007a66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	613b      	str	r3, [r7, #16]
   return(result);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a98:	623a      	str	r2, [r7, #32]
 8007a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	69f9      	ldr	r1, [r7, #28]
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e010      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f43f af46 	beq.w	800797c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3770      	adds	r7, #112	; 0x70
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e027      	b.n	8007b60 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	; 0x24
 8007b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e02d      	b.n	8007be0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2224      	movs	r2, #36	; 0x24
 8007b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f84f 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e02d      	b.n	8007c5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f811 	bl	8007c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c84:	e031      	b.n	8007cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c86:	2310      	movs	r3, #16
 8007c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c8a:	2310      	movs	r3, #16
 8007c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0e5b      	lsrs	r3, r3, #25
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	0f5b      	lsrs	r3, r3, #29
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	7b3a      	ldrb	r2, [r7, #12]
 8007cb2:	4911      	ldr	r1, [pc, #68]	; (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cb4:	5c8a      	ldrb	r2, [r1, r2]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cba:	7b3a      	ldrb	r2, [r7, #12]
 8007cbc:	490f      	ldr	r1, [pc, #60]	; (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	7b7a      	ldrb	r2, [r7, #13]
 8007cd0:	4909      	ldr	r1, [pc, #36]	; (8007cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cd2:	5c8a      	ldrb	r2, [r1, r2]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cd8:	7b7a      	ldrb	r2, [r7, #13]
 8007cda:	4908      	ldr	r1, [pc, #32]	; (8007cfc <UARTEx_SetNbDataToProcess+0x98>)
 8007cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	080093a4 	.word	0x080093a4
 8007cfc:	080093ac 	.word	0x080093ac

08007d00 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	60da      	str	r2, [r3, #12]
 8007d14:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8007d22:	f000 fcc9 	bl	80086b8 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d2c:	e10c      	b.n	8007f48 <STEPPERS_Init+0x248>
    {
    	for(j=0; j<4; j++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d34:	e082      	b.n	8007e3c <STEPPERS_Init+0x13c>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8007d36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d3a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007d3e:	4887      	ldr	r0, [pc, #540]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	440b      	add	r3, r1
 8007d48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d4c:	4a84      	ldr	r2, [pc, #528]	; (8007f60 <STEPPERS_Init+0x260>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10f      	bne.n	8007d72 <STEPPERS_Init+0x72>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d52:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <STEPPERS_Init+0x264>)
 8007d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d58:	4a82      	ldr	r2, [pc, #520]	; (8007f64 <STEPPERS_Init+0x264>)
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007d62:	4b80      	ldr	r3, [pc, #512]	; (8007f64 <STEPPERS_Init+0x264>)
 8007d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	e03a      	b.n	8007de8 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8007d72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d76:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007d7a:	4878      	ldr	r0, [pc, #480]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	440b      	add	r3, r1
 8007d84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d88:	4a77      	ldr	r2, [pc, #476]	; (8007f68 <STEPPERS_Init+0x268>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d10f      	bne.n	8007dae <STEPPERS_Init+0xae>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d8e:	4b75      	ldr	r3, [pc, #468]	; (8007f64 <STEPPERS_Init+0x264>)
 8007d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d94:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <STEPPERS_Init+0x264>)
 8007d96:	f043 0302 	orr.w	r3, r3, #2
 8007d9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007d9e:	4b71      	ldr	r3, [pc, #452]	; (8007f64 <STEPPERS_Init+0x264>)
 8007da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	60bb      	str	r3, [r7, #8]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	e01c      	b.n	8007de8 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8007dae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007db2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007db6:	4869      	ldr	r0, [pc, #420]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007dc4:	4a69      	ldr	r2, [pc, #420]	; (8007f6c <STEPPERS_Init+0x26c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d10e      	bne.n	8007de8 <STEPPERS_Init+0xe8>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dca:	4b66      	ldr	r3, [pc, #408]	; (8007f64 <STEPPERS_Init+0x264>)
 8007dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007dd0:	4a64      	ldr	r2, [pc, #400]	; (8007f64 <STEPPERS_Init+0x264>)
 8007dd2:	f043 0304 	orr.w	r3, r3, #4
 8007dd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007dda:	4b62      	ldr	r3, [pc, #392]	; (8007f64 <STEPPERS_Init+0x264>)
 8007ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8007de8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007dec:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007df0:	485a      	ldr	r0, [pc, #360]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007df2:	4613      	mov	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007e02:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e04:	2301      	movs	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8007e10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e14:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007e18:	4850      	ldr	r0, [pc, #320]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	440b      	add	r3, r1
 8007e22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e26:	f107 0210 	add.w	r2, r7, #16
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fa fd97 	bl	8002960 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8007e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e36:	3301      	adds	r3, #1
 8007e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	f67f af78 	bls.w	8007d36 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8007e46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e4a:	4949      	ldr	r1, [pc, #292]	; (8007f70 <STEPPERS_Init+0x270>)
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	3311      	adds	r3, #17
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8007e5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e60:	4943      	ldr	r1, [pc, #268]	; (8007f70 <STEPPERS_Init+0x270>)
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	330f      	adds	r3, #15
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8007e72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e76:	493e      	ldr	r1, [pc, #248]	; (8007f70 <STEPPERS_Init+0x270>)
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8007e86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e8a:	4939      	ldr	r1, [pc, #228]	; (8007f70 <STEPPERS_Init+0x270>)
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	3304      	adds	r3, #4
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8007e9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ea0:	4933      	ldr	r1, [pc, #204]	; (8007f70 <STEPPERS_Init+0x270>)
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	3308      	adds	r3, #8
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8007eb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007eb6:	492e      	ldr	r1, [pc, #184]	; (8007f70 <STEPPERS_Init+0x270>)
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	330e      	adds	r3, #14
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8007ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ecc:	4923      	ldr	r1, [pc, #140]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	331b      	adds	r3, #27
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d00b      	beq.n	8007ef8 <STEPPERS_Init+0x1f8>
 8007ee0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ee4:	491d      	ldr	r1, [pc, #116]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	331b      	adds	r3, #27
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <STEPPERS_Init+0x210>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8007ef8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007efc:	491c      	ldr	r1, [pc, #112]	; (8007f70 <STEPPERS_Init+0x270>)
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3310      	adds	r3, #16
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	e016      	b.n	8007f3e <STEPPERS_Init+0x23e>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8007f10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f14:	4911      	ldr	r1, [pc, #68]	; (8007f5c <STEPPERS_Init+0x25c>)
 8007f16:	4613      	mov	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	331b      	adds	r3, #27
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d10a      	bne.n	8007f3e <STEPPERS_Init+0x23e>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8007f28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f2c:	4910      	ldr	r1, [pc, #64]	; (8007f70 <STEPPERS_Init+0x270>)
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	3310      	adds	r3, #16
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8007f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f42:	3301      	adds	r3, #1
 8007f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f43f aeee 	beq.w	8007d2e <STEPPERS_Init+0x2e>
    	}
    }
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	3728      	adds	r7, #40	; 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	080093b4 	.word	0x080093b4
 8007f60:	58020000 	.word	0x58020000
 8007f64:	58024400 	.word	0x58024400
 8007f68:	58020400 	.word	0x58020400
 8007f6c:	58020800 	.word	0x58020800
 8007f70:	24030ffc 	.word	0x24030ffc

08007f74 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f7c:	f107 0314 	add.w	r3, r7, #20
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	605a      	str	r2, [r3, #4]
 8007f94:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8007f9a:	f7ff feb1 	bl	8007d00 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8007f9e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a17      	ldr	r2, [pc, #92]	; (8008004 <STEPPERS_Init_TMR+0x90>)
 8007fa8:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2263      	movs	r2, #99	; 0x63
 8007fae:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1e5a      	subs	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2280      	movs	r2, #128	; 0x80
 8007fc8:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fd ff2a 	bl	8005e24 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd4:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8007fd6:	f107 0314 	add.w	r3, r7, #20
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fe f981 	bl	80062e4 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe fbcf 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fd ffdc 	bl	8005fb4 <HAL_TIM_Base_Start_IT>
    }
}
 8007ffc:	bf00      	nop
 8007ffe:	3728      	adds	r7, #40	; 0x28
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	40014800 	.word	0x40014800

08008008 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	460a      	mov	r2, r1
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	4613      	mov	r3, r2
 8008016:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	4926      	ldr	r1, [pc, #152]	; (80080b8 <STEPPER_SetSpeed+0xb0>)
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	330c      	adds	r3, #12
 800802c:	88ba      	ldrh	r2, [r7, #4]
 800802e:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8008030:	79fa      	ldrb	r2, [r7, #7]
 8008032:	4922      	ldr	r1, [pc, #136]	; (80080bc <STEPPER_SetSpeed+0xb4>)
 8008034:	4613      	mov	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	331b      	adds	r3, #27
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d10b      	bne.n	800805e <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8008046:	79fa      	ldrb	r2, [r7, #7]
 8008048:	491c      	ldr	r1, [pc, #112]	; (80080bc <STEPPER_SetSpeed+0xb4>)
 800804a:	4613      	mov	r3, r2
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	3318      	adds	r3, #24
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e009      	b.n	8008072 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 800805e:	79fa      	ldrb	r2, [r7, #7]
 8008060:	4916      	ldr	r1, [pc, #88]	; (80080bc <STEPPER_SetSpeed+0xb4>)
 8008062:	4613      	mov	r3, r2
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	3318      	adds	r3, #24
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8008072:	88bb      	ldrh	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8008082:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80080b0 <STEPPER_SetSpeed+0xa8>
 8008086:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800808a:	79fa      	ldrb	r2, [r7, #7]
 800808c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008090:	ee17 0a90 	vmov	r0, s15
 8008094:	4908      	ldr	r1, [pc, #32]	; (80080b8 <STEPPER_SetSpeed+0xb0>)
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	3308      	adds	r3, #8
 80080a2:	6018      	str	r0, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	00000000 	.word	0x00000000
 80080b4:	40ed4c00 	.word	0x40ed4c00
 80080b8:	24030ffc 	.word	0x24030ffc
 80080bc:	080093b4 	.word	0x080093b4

080080c0 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 80080c0:	b590      	push	{r4, r7, lr}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 80080ca:	79fa      	ldrb	r2, [r7, #7]
 80080cc:	4999      	ldr	r1, [pc, #612]	; (8008334 <STEPPER_One_Step+0x274>)
 80080ce:	4613      	mov	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	331a      	adds	r3, #26
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 81c4 	bne.w	800846a <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80080e2:	79fa      	ldrb	r2, [r7, #7]
 80080e4:	4993      	ldr	r1, [pc, #588]	; (8008334 <STEPPER_One_Step+0x274>)
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	331b      	adds	r3, #27
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8088 	bne.w	800820a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	498d      	ldr	r1, [pc, #564]	; (8008334 <STEPPER_One_Step+0x274>)
 80080fe:	4613      	mov	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	79fa      	ldrb	r2, [r7, #7]
 800810c:	4989      	ldr	r1, [pc, #548]	; (8008334 <STEPPER_One_Step+0x274>)
 800810e:	4613      	mov	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	3310      	adds	r3, #16
 800811a:	8819      	ldrh	r1, [r3, #0]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	4c86      	ldr	r4, [pc, #536]	; (8008338 <STEPPER_One_Step+0x278>)
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4423      	add	r3, r4
 800812a:	330f      	adds	r3, #15
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	4b82      	ldr	r3, [pc, #520]	; (800833c <STEPPER_One_Step+0x27c>)
 8008132:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8008136:	461a      	mov	r2, r3
 8008138:	f7fa fdc2 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800813c:	79fa      	ldrb	r2, [r7, #7]
 800813e:	497d      	ldr	r1, [pc, #500]	; (8008334 <STEPPER_One_Step+0x274>)
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	3304      	adds	r3, #4
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	79fa      	ldrb	r2, [r7, #7]
 8008150:	4978      	ldr	r1, [pc, #480]	; (8008334 <STEPPER_One_Step+0x274>)
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	3312      	adds	r3, #18
 800815e:	8819      	ldrh	r1, [r3, #0]
 8008160:	79fa      	ldrb	r2, [r7, #7]
 8008162:	4c75      	ldr	r4, [pc, #468]	; (8008338 <STEPPER_One_Step+0x278>)
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4423      	add	r3, r4
 800816e:	330f      	adds	r3, #15
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4a72      	ldr	r2, [pc, #456]	; (800833c <STEPPER_One_Step+0x27c>)
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	461a      	mov	r2, r3
 800817c:	f7fa fda0 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008180:	79fa      	ldrb	r2, [r7, #7]
 8008182:	496c      	ldr	r1, [pc, #432]	; (8008334 <STEPPER_One_Step+0x274>)
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3308      	adds	r3, #8
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	79fa      	ldrb	r2, [r7, #7]
 8008194:	4967      	ldr	r1, [pc, #412]	; (8008334 <STEPPER_One_Step+0x274>)
 8008196:	4613      	mov	r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	3314      	adds	r3, #20
 80081a2:	8819      	ldrh	r1, [r3, #0]
 80081a4:	79fa      	ldrb	r2, [r7, #7]
 80081a6:	4c64      	ldr	r4, [pc, #400]	; (8008338 <STEPPER_One_Step+0x278>)
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4423      	add	r3, r4
 80081b2:	330f      	adds	r3, #15
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	4a61      	ldr	r2, [pc, #388]	; (800833c <STEPPER_One_Step+0x27c>)
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	789b      	ldrb	r3, [r3, #2]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7fa fd7e 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	495b      	ldr	r1, [pc, #364]	; (8008334 <STEPPER_One_Step+0x274>)
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	330c      	adds	r3, #12
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	79fa      	ldrb	r2, [r7, #7]
 80081d8:	4956      	ldr	r1, [pc, #344]	; (8008334 <STEPPER_One_Step+0x274>)
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	3316      	adds	r3, #22
 80081e6:	8819      	ldrh	r1, [r3, #0]
 80081e8:	79fa      	ldrb	r2, [r7, #7]
 80081ea:	4c53      	ldr	r4, [pc, #332]	; (8008338 <STEPPER_One_Step+0x278>)
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4423      	add	r3, r4
 80081f6:	330f      	adds	r3, #15
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4a50      	ldr	r2, [pc, #320]	; (800833c <STEPPER_One_Step+0x27c>)
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	78db      	ldrb	r3, [r3, #3]
 8008202:	461a      	mov	r2, r3
 8008204:	f7fa fd5c 	bl	8002cc0 <HAL_GPIO_WritePin>
 8008208:	e12f      	b.n	800846a <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800820a:	79fa      	ldrb	r2, [r7, #7]
 800820c:	4949      	ldr	r1, [pc, #292]	; (8008334 <STEPPER_One_Step+0x274>)
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	331b      	adds	r3, #27
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 8091 	bne.w	8008344 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8008222:	79fa      	ldrb	r2, [r7, #7]
 8008224:	4943      	ldr	r1, [pc, #268]	; (8008334 <STEPPER_One_Step+0x274>)
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	79fa      	ldrb	r2, [r7, #7]
 8008234:	493f      	ldr	r1, [pc, #252]	; (8008334 <STEPPER_One_Step+0x274>)
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3310      	adds	r3, #16
 8008242:	8819      	ldrh	r1, [r3, #0]
 8008244:	79fa      	ldrb	r2, [r7, #7]
 8008246:	4c3c      	ldr	r4, [pc, #240]	; (8008338 <STEPPER_One_Step+0x278>)
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4423      	add	r3, r4
 8008252:	330f      	adds	r3, #15
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	4b39      	ldr	r3, [pc, #228]	; (8008340 <STEPPER_One_Step+0x280>)
 800825a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800825e:	461a      	mov	r2, r3
 8008260:	f7fa fd2e 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8008264:	79fa      	ldrb	r2, [r7, #7]
 8008266:	4933      	ldr	r1, [pc, #204]	; (8008334 <STEPPER_One_Step+0x274>)
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	3304      	adds	r3, #4
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	79fa      	ldrb	r2, [r7, #7]
 8008278:	492e      	ldr	r1, [pc, #184]	; (8008334 <STEPPER_One_Step+0x274>)
 800827a:	4613      	mov	r3, r2
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3312      	adds	r3, #18
 8008286:	8819      	ldrh	r1, [r3, #0]
 8008288:	79fa      	ldrb	r2, [r7, #7]
 800828a:	4c2b      	ldr	r4, [pc, #172]	; (8008338 <STEPPER_One_Step+0x278>)
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4423      	add	r3, r4
 8008296:	330f      	adds	r3, #15
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	4a29      	ldr	r2, [pc, #164]	; (8008340 <STEPPER_One_Step+0x280>)
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7fa fd0c 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80082a8:	79fa      	ldrb	r2, [r7, #7]
 80082aa:	4922      	ldr	r1, [pc, #136]	; (8008334 <STEPPER_One_Step+0x274>)
 80082ac:	4613      	mov	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	3308      	adds	r3, #8
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	79fa      	ldrb	r2, [r7, #7]
 80082bc:	491d      	ldr	r1, [pc, #116]	; (8008334 <STEPPER_One_Step+0x274>)
 80082be:	4613      	mov	r3, r2
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3314      	adds	r3, #20
 80082ca:	8819      	ldrh	r1, [r3, #0]
 80082cc:	79fa      	ldrb	r2, [r7, #7]
 80082ce:	4c1a      	ldr	r4, [pc, #104]	; (8008338 <STEPPER_One_Step+0x278>)
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4423      	add	r3, r4
 80082da:	330f      	adds	r3, #15
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	4a18      	ldr	r2, [pc, #96]	; (8008340 <STEPPER_One_Step+0x280>)
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	789b      	ldrb	r3, [r3, #2]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f7fa fcea 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80082ec:	79fa      	ldrb	r2, [r7, #7]
 80082ee:	4911      	ldr	r1, [pc, #68]	; (8008334 <STEPPER_One_Step+0x274>)
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	330c      	adds	r3, #12
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	79fa      	ldrb	r2, [r7, #7]
 8008300:	490c      	ldr	r1, [pc, #48]	; (8008334 <STEPPER_One_Step+0x274>)
 8008302:	4613      	mov	r3, r2
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	3316      	adds	r3, #22
 800830e:	8819      	ldrh	r1, [r3, #0]
 8008310:	79fa      	ldrb	r2, [r7, #7]
 8008312:	4c09      	ldr	r4, [pc, #36]	; (8008338 <STEPPER_One_Step+0x278>)
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4423      	add	r3, r4
 800831e:	330f      	adds	r3, #15
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <STEPPER_One_Step+0x280>)
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	78db      	ldrb	r3, [r3, #3]
 800832a:	461a      	mov	r2, r3
 800832c:	f7fa fcc8 	bl	8002cc0 <HAL_GPIO_WritePin>
 8008330:	e09b      	b.n	800846a <STEPPER_One_Step+0x3aa>
 8008332:	bf00      	nop
 8008334:	080093b4 	.word	0x080093b4
 8008338:	24030ffc 	.word	0x24030ffc
 800833c:	24000010 	.word	0x24000010
 8008340:	24000020 	.word	0x24000020
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8008344:	79fa      	ldrb	r2, [r7, #7]
 8008346:	4988      	ldr	r1, [pc, #544]	; (8008568 <STEPPER_One_Step+0x4a8>)
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	331b      	adds	r3, #27
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b02      	cmp	r3, #2
 8008358:	f040 8087 	bne.w	800846a <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800835c:	79fa      	ldrb	r2, [r7, #7]
 800835e:	4982      	ldr	r1, [pc, #520]	; (8008568 <STEPPER_One_Step+0x4a8>)
 8008360:	4613      	mov	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	1a9b      	subs	r3, r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	79fa      	ldrb	r2, [r7, #7]
 800836e:	497e      	ldr	r1, [pc, #504]	; (8008568 <STEPPER_One_Step+0x4a8>)
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3310      	adds	r3, #16
 800837c:	8819      	ldrh	r1, [r3, #0]
 800837e:	79fa      	ldrb	r2, [r7, #7]
 8008380:	4c7a      	ldr	r4, [pc, #488]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4423      	add	r3, r4
 800838c:	330f      	adds	r3, #15
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	4b77      	ldr	r3, [pc, #476]	; (8008570 <STEPPER_One_Step+0x4b0>)
 8008394:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8008398:	461a      	mov	r2, r3
 800839a:	f7fa fc91 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800839e:	79fa      	ldrb	r2, [r7, #7]
 80083a0:	4971      	ldr	r1, [pc, #452]	; (8008568 <STEPPER_One_Step+0x4a8>)
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	3304      	adds	r3, #4
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	79fa      	ldrb	r2, [r7, #7]
 80083b2:	496d      	ldr	r1, [pc, #436]	; (8008568 <STEPPER_One_Step+0x4a8>)
 80083b4:	4613      	mov	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	3312      	adds	r3, #18
 80083c0:	8819      	ldrh	r1, [r3, #0]
 80083c2:	79fa      	ldrb	r2, [r7, #7]
 80083c4:	4c69      	ldr	r4, [pc, #420]	; (800856c <STEPPER_One_Step+0x4ac>)
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4423      	add	r3, r4
 80083d0:	330f      	adds	r3, #15
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	4a66      	ldr	r2, [pc, #408]	; (8008570 <STEPPER_One_Step+0x4b0>)
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	461a      	mov	r2, r3
 80083de:	f7fa fc6f 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80083e2:	79fa      	ldrb	r2, [r7, #7]
 80083e4:	4960      	ldr	r1, [pc, #384]	; (8008568 <STEPPER_One_Step+0x4a8>)
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	3308      	adds	r3, #8
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	79fa      	ldrb	r2, [r7, #7]
 80083f6:	495c      	ldr	r1, [pc, #368]	; (8008568 <STEPPER_One_Step+0x4a8>)
 80083f8:	4613      	mov	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	3314      	adds	r3, #20
 8008404:	8819      	ldrh	r1, [r3, #0]
 8008406:	79fa      	ldrb	r2, [r7, #7]
 8008408:	4c58      	ldr	r4, [pc, #352]	; (800856c <STEPPER_One_Step+0x4ac>)
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4423      	add	r3, r4
 8008414:	330f      	adds	r3, #15
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	4a55      	ldr	r2, [pc, #340]	; (8008570 <STEPPER_One_Step+0x4b0>)
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	789b      	ldrb	r3, [r3, #2]
 8008420:	461a      	mov	r2, r3
 8008422:	f7fa fc4d 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	494f      	ldr	r1, [pc, #316]	; (8008568 <STEPPER_One_Step+0x4a8>)
 800842a:	4613      	mov	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	330c      	adds	r3, #12
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	79fa      	ldrb	r2, [r7, #7]
 800843a:	494b      	ldr	r1, [pc, #300]	; (8008568 <STEPPER_One_Step+0x4a8>)
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	3316      	adds	r3, #22
 8008448:	8819      	ldrh	r1, [r3, #0]
 800844a:	79fa      	ldrb	r2, [r7, #7]
 800844c:	4c47      	ldr	r4, [pc, #284]	; (800856c <STEPPER_One_Step+0x4ac>)
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4423      	add	r3, r4
 8008458:	330f      	adds	r3, #15
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	4a44      	ldr	r2, [pc, #272]	; (8008570 <STEPPER_One_Step+0x4b0>)
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	78db      	ldrb	r3, [r3, #3]
 8008464:	461a      	mov	r2, r3
 8008466:	f7fa fc2b 	bl	8002cc0 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800846a:	79fa      	ldrb	r2, [r7, #7]
 800846c:	493f      	ldr	r1, [pc, #252]	; (800856c <STEPPER_One_Step+0x4ac>)
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3311      	adds	r3, #17
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d132      	bne.n	80084e6 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8008480:	79fa      	ldrb	r2, [r7, #7]
 8008482:	493a      	ldr	r1, [pc, #232]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	330f      	adds	r3, #15
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d112      	bne.n	80084bc <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8008496:	79f9      	ldrb	r1, [r7, #7]
 8008498:	79fa      	ldrb	r2, [r7, #7]
 800849a:	4834      	ldr	r0, [pc, #208]	; (800856c <STEPPER_One_Step+0x4ac>)
 800849c:	460b      	mov	r3, r1
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4403      	add	r3, r0
 80084a6:	3310      	adds	r3, #16
 80084a8:	7818      	ldrb	r0, [r3, #0]
 80084aa:	4930      	ldr	r1, [pc, #192]	; (800856c <STEPPER_One_Step+0x4ac>)
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	330f      	adds	r3, #15
 80084b8:	4602      	mov	r2, r0
 80084ba:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 80084bc:	79fa      	ldrb	r2, [r7, #7]
 80084be:	492b      	ldr	r1, [pc, #172]	; (800856c <STEPPER_One_Step+0x4ac>)
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	330f      	adds	r3, #15
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b2d8      	uxtb	r0, r3
 80084d2:	4926      	ldr	r1, [pc, #152]	; (800856c <STEPPER_One_Step+0x4ac>)
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	330f      	adds	r3, #15
 80084e0:	4602      	mov	r2, r0
 80084e2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80084e4:	e03c      	b.n	8008560 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80084e6:	79fa      	ldrb	r2, [r7, #7]
 80084e8:	4920      	ldr	r1, [pc, #128]	; (800856c <STEPPER_One_Step+0x4ac>)
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	3311      	adds	r3, #17
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d131      	bne.n	8008560 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	491b      	ldr	r1, [pc, #108]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	330f      	adds	r3, #15
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	b2d8      	uxtb	r0, r3
 8008512:	4916      	ldr	r1, [pc, #88]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	330f      	adds	r3, #15
 8008520:	4602      	mov	r2, r0
 8008522:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8008524:	79fa      	ldrb	r2, [r7, #7]
 8008526:	4911      	ldr	r1, [pc, #68]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	330f      	adds	r3, #15
 8008534:	7819      	ldrb	r1, [r3, #0]
 8008536:	79fa      	ldrb	r2, [r7, #7]
 8008538:	480c      	ldr	r0, [pc, #48]	; (800856c <STEPPER_One_Step+0x4ac>)
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4403      	add	r3, r0
 8008544:	3310      	adds	r3, #16
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	4299      	cmp	r1, r3
 800854a:	d109      	bne.n	8008560 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	4907      	ldr	r1, [pc, #28]	; (800856c <STEPPER_One_Step+0x4ac>)
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	330f      	adds	r3, #15
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bd90      	pop	{r4, r7, pc}
 8008568:	080093b4 	.word	0x080093b4
 800856c:	24030ffc 	.word	0x24030ffc
 8008570:	24000030 	.word	0x24000030

08008574 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
 8008580:	4613      	mov	r3, r2
 8008582:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8008584:	79fa      	ldrb	r2, [r7, #7]
 8008586:	4910      	ldr	r1, [pc, #64]	; (80085c8 <STEPPER_Step_NonBlocking+0x54>)
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	79fa      	ldrb	r2, [r7, #7]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	4419      	add	r1, r3
 800859a:	480b      	ldr	r0, [pc, #44]	; (80085c8 <STEPPER_Step_NonBlocking+0x54>)
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4403      	add	r3, r0
 80085a6:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 80085a8:	79fa      	ldrb	r2, [r7, #7]
 80085aa:	4907      	ldr	r1, [pc, #28]	; (80085c8 <STEPPER_Step_NonBlocking+0x54>)
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	3311      	adds	r3, #17
 80085b8:	79ba      	ldrb	r2, [r7, #6]
 80085ba:	701a      	strb	r2, [r3, #0]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	24030ffc 	.word	0x24030ffc

080085cc <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a34      	ldr	r2, [pc, #208]	; (80086b0 <STEPPER_TMR_OVF_ISR+0xe4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d162      	bne.n	80086a8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
 80085e6:	e05c      	b.n	80086a2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80085e8:	7bfa      	ldrb	r2, [r7, #15]
 80085ea:	4932      	ldr	r1, [pc, #200]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3304      	adds	r3, #4
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	7bfa      	ldrb	r2, [r7, #15]
 80085fc:	482d      	ldr	r0, [pc, #180]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4403      	add	r3, r0
 8008608:	3308      	adds	r3, #8
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4299      	cmp	r1, r3
 800860e:	d333      	bcc.n	8008678 <STEPPER_TMR_OVF_ISR+0xac>
 8008610:	7bfa      	ldrb	r2, [r7, #15]
 8008612:	4928      	ldr	r1, [pc, #160]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	330e      	adds	r3, #14
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d028      	beq.n	8008678 <STEPPER_TMR_OVF_ISR+0xac>
 8008626:	7bfa      	ldrb	r2, [r7, #15]
 8008628:	4922      	ldr	r1, [pc, #136]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01e      	beq.n	8008678 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd3f 	bl	80080c0 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8008642:	7bfa      	ldrb	r2, [r7, #15]
 8008644:	491b      	ldr	r1, [pc, #108]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1e59      	subs	r1, r3, #1
 8008654:	4817      	ldr	r0, [pc, #92]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4403      	add	r3, r0
 8008660:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8008662:	7bfa      	ldrb	r2, [r7, #15]
 8008664:	4913      	ldr	r1, [pc, #76]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	3304      	adds	r3, #4
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	e011      	b.n	800869c <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8008678:	7bfa      	ldrb	r2, [r7, #15]
 800867a:	490e      	ldr	r1, [pc, #56]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3304      	adds	r3, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1c59      	adds	r1, r3, #1
 800868c:	4809      	ldr	r0, [pc, #36]	; (80086b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4403      	add	r3, r0
 8008698:	3304      	adds	r3, #4
 800869a:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	3301      	adds	r3, #1
 80086a0:	73fb      	strb	r3, [r7, #15]
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d09f      	beq.n	80085e8 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	40014800 	.word	0x40014800
 80086b4:	24030ffc 	.word	0x24030ffc

080086b8 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80086bc:	4b14      	ldr	r3, [pc, #80]	; (8008710 <DWT_Delay_Init+0x58>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4a13      	ldr	r2, [pc, #76]	; (8008710 <DWT_Delay_Init+0x58>)
 80086c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086c6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <DWT_Delay_Init+0x58>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a10      	ldr	r2, [pc, #64]	; (8008710 <DWT_Delay_Init+0x58>)
 80086ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086d2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80086d4:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a0e      	ldr	r2, [pc, #56]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086e6:	f043 0301 	orr.w	r3, r3, #1
 80086ea:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80086f2:	bf00      	nop
    __ASM volatile ("NOP");
 80086f4:	bf00      	nop
    __ASM volatile ("NOP");
 80086f6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <DWT_Delay_Init+0x5c>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8008700:	2300      	movs	r3, #0
 8008702:	e000      	b.n	8008706 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8008704:	2301      	movs	r3, #1
    }
}
 8008706:	4618      	mov	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	e000edf0 	.word	0xe000edf0
 8008714:	e0001000 	.word	0xe0001000

08008718 <__errno>:
 8008718:	4b01      	ldr	r3, [pc, #4]	; (8008720 <__errno+0x8>)
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	24000050 	.word	0x24000050

08008724 <__libc_init_array>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	4d0d      	ldr	r5, [pc, #52]	; (800875c <__libc_init_array+0x38>)
 8008728:	4c0d      	ldr	r4, [pc, #52]	; (8008760 <__libc_init_array+0x3c>)
 800872a:	1b64      	subs	r4, r4, r5
 800872c:	10a4      	asrs	r4, r4, #2
 800872e:	2600      	movs	r6, #0
 8008730:	42a6      	cmp	r6, r4
 8008732:	d109      	bne.n	8008748 <__libc_init_array+0x24>
 8008734:	4d0b      	ldr	r5, [pc, #44]	; (8008764 <__libc_init_array+0x40>)
 8008736:	4c0c      	ldr	r4, [pc, #48]	; (8008768 <__libc_init_array+0x44>)
 8008738:	f000 fdd6 	bl	80092e8 <_init>
 800873c:	1b64      	subs	r4, r4, r5
 800873e:	10a4      	asrs	r4, r4, #2
 8008740:	2600      	movs	r6, #0
 8008742:	42a6      	cmp	r6, r4
 8008744:	d105      	bne.n	8008752 <__libc_init_array+0x2e>
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	f855 3b04 	ldr.w	r3, [r5], #4
 800874c:	4798      	blx	r3
 800874e:	3601      	adds	r6, #1
 8008750:	e7ee      	b.n	8008730 <__libc_init_array+0xc>
 8008752:	f855 3b04 	ldr.w	r3, [r5], #4
 8008756:	4798      	blx	r3
 8008758:	3601      	adds	r6, #1
 800875a:	e7f2      	b.n	8008742 <__libc_init_array+0x1e>
 800875c:	0800940c 	.word	0x0800940c
 8008760:	0800940c 	.word	0x0800940c
 8008764:	0800940c 	.word	0x0800940c
 8008768:	08009410 	.word	0x08009410

0800876c <memset>:
 800876c:	4402      	add	r2, r0
 800876e:	4603      	mov	r3, r0
 8008770:	4293      	cmp	r3, r2
 8008772:	d100      	bne.n	8008776 <memset+0xa>
 8008774:	4770      	bx	lr
 8008776:	f803 1b01 	strb.w	r1, [r3], #1
 800877a:	e7f9      	b.n	8008770 <memset+0x4>

0800877c <siprintf>:
 800877c:	b40e      	push	{r1, r2, r3}
 800877e:	b500      	push	{lr}
 8008780:	b09c      	sub	sp, #112	; 0x70
 8008782:	ab1d      	add	r3, sp, #116	; 0x74
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	9006      	str	r0, [sp, #24]
 8008788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800878c:	4809      	ldr	r0, [pc, #36]	; (80087b4 <siprintf+0x38>)
 800878e:	9107      	str	r1, [sp, #28]
 8008790:	9104      	str	r1, [sp, #16]
 8008792:	4909      	ldr	r1, [pc, #36]	; (80087b8 <siprintf+0x3c>)
 8008794:	f853 2b04 	ldr.w	r2, [r3], #4
 8008798:	9105      	str	r1, [sp, #20]
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	a902      	add	r1, sp, #8
 80087a0:	f000 f868 	bl	8008874 <_svfiprintf_r>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	b01c      	add	sp, #112	; 0x70
 80087ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b0:	b003      	add	sp, #12
 80087b2:	4770      	bx	lr
 80087b4:	24000050 	.word	0x24000050
 80087b8:	ffff0208 	.word	0xffff0208

080087bc <__retarget_lock_acquire_recursive>:
 80087bc:	4770      	bx	lr

080087be <__retarget_lock_release_recursive>:
 80087be:	4770      	bx	lr

080087c0 <__ssputs_r>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	688e      	ldr	r6, [r1, #8]
 80087c6:	461f      	mov	r7, r3
 80087c8:	42be      	cmp	r6, r7
 80087ca:	680b      	ldr	r3, [r1, #0]
 80087cc:	4682      	mov	sl, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4690      	mov	r8, r2
 80087d2:	d82c      	bhi.n	800882e <__ssputs_r+0x6e>
 80087d4:	898a      	ldrh	r2, [r1, #12]
 80087d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087da:	d026      	beq.n	800882a <__ssputs_r+0x6a>
 80087dc:	6965      	ldr	r5, [r4, #20]
 80087de:	6909      	ldr	r1, [r1, #16]
 80087e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087e4:	eba3 0901 	sub.w	r9, r3, r1
 80087e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ec:	1c7b      	adds	r3, r7, #1
 80087ee:	444b      	add	r3, r9
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf38      	it	cc
 80087f6:	461d      	movcc	r5, r3
 80087f8:	0553      	lsls	r3, r2, #21
 80087fa:	d527      	bpl.n	800884c <__ssputs_r+0x8c>
 80087fc:	4629      	mov	r1, r5
 80087fe:	f000 fb5b 	bl	8008eb8 <_malloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	b360      	cbz	r0, 8008860 <__ssputs_r+0xa0>
 8008806:	6921      	ldr	r1, [r4, #16]
 8008808:	464a      	mov	r2, r9
 800880a:	f000 fac1 	bl	8008d90 <memcpy>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	6126      	str	r6, [r4, #16]
 800881c:	6165      	str	r5, [r4, #20]
 800881e:	444e      	add	r6, r9
 8008820:	eba5 0509 	sub.w	r5, r5, r9
 8008824:	6026      	str	r6, [r4, #0]
 8008826:	60a5      	str	r5, [r4, #8]
 8008828:	463e      	mov	r6, r7
 800882a:	42be      	cmp	r6, r7
 800882c:	d900      	bls.n	8008830 <__ssputs_r+0x70>
 800882e:	463e      	mov	r6, r7
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	4632      	mov	r2, r6
 8008834:	4641      	mov	r1, r8
 8008836:	f000 fab9 	bl	8008dac <memmove>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	1b9b      	subs	r3, r3, r6
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	4433      	add	r3, r6
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	2000      	movs	r0, #0
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	462a      	mov	r2, r5
 800884e:	f000 fba7 	bl	8008fa0 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e0      	bne.n	800881a <__ssputs_r+0x5a>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f000 fac0 	bl	8008de0 <_free_r>
 8008860:	230c      	movs	r3, #12
 8008862:	f8ca 3000 	str.w	r3, [sl]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008872:	e7e9      	b.n	8008848 <__ssputs_r+0x88>

08008874 <_svfiprintf_r>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	4698      	mov	r8, r3
 800887a:	898b      	ldrh	r3, [r1, #12]
 800887c:	061b      	lsls	r3, r3, #24
 800887e:	b09d      	sub	sp, #116	; 0x74
 8008880:	4607      	mov	r7, r0
 8008882:	460d      	mov	r5, r1
 8008884:	4614      	mov	r4, r2
 8008886:	d50e      	bpl.n	80088a6 <_svfiprintf_r+0x32>
 8008888:	690b      	ldr	r3, [r1, #16]
 800888a:	b963      	cbnz	r3, 80088a6 <_svfiprintf_r+0x32>
 800888c:	2140      	movs	r1, #64	; 0x40
 800888e:	f000 fb13 	bl	8008eb8 <_malloc_r>
 8008892:	6028      	str	r0, [r5, #0]
 8008894:	6128      	str	r0, [r5, #16]
 8008896:	b920      	cbnz	r0, 80088a2 <_svfiprintf_r+0x2e>
 8008898:	230c      	movs	r3, #12
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a0:	e0d0      	b.n	8008a44 <_svfiprintf_r+0x1d0>
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	616b      	str	r3, [r5, #20]
 80088a6:	2300      	movs	r3, #0
 80088a8:	9309      	str	r3, [sp, #36]	; 0x24
 80088aa:	2320      	movs	r3, #32
 80088ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b4:	2330      	movs	r3, #48	; 0x30
 80088b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a5c <_svfiprintf_r+0x1e8>
 80088ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088be:	f04f 0901 	mov.w	r9, #1
 80088c2:	4623      	mov	r3, r4
 80088c4:	469a      	mov	sl, r3
 80088c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ca:	b10a      	cbz	r2, 80088d0 <_svfiprintf_r+0x5c>
 80088cc:	2a25      	cmp	r2, #37	; 0x25
 80088ce:	d1f9      	bne.n	80088c4 <_svfiprintf_r+0x50>
 80088d0:	ebba 0b04 	subs.w	fp, sl, r4
 80088d4:	d00b      	beq.n	80088ee <_svfiprintf_r+0x7a>
 80088d6:	465b      	mov	r3, fp
 80088d8:	4622      	mov	r2, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ff6f 	bl	80087c0 <__ssputs_r>
 80088e2:	3001      	adds	r0, #1
 80088e4:	f000 80a9 	beq.w	8008a3a <_svfiprintf_r+0x1c6>
 80088e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ea:	445a      	add	r2, fp
 80088ec:	9209      	str	r2, [sp, #36]	; 0x24
 80088ee:	f89a 3000 	ldrb.w	r3, [sl]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80a1 	beq.w	8008a3a <_svfiprintf_r+0x1c6>
 80088f8:	2300      	movs	r3, #0
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008902:	f10a 0a01 	add.w	sl, sl, #1
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	9307      	str	r3, [sp, #28]
 800890a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890e:	931a      	str	r3, [sp, #104]	; 0x68
 8008910:	4654      	mov	r4, sl
 8008912:	2205      	movs	r2, #5
 8008914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008918:	4850      	ldr	r0, [pc, #320]	; (8008a5c <_svfiprintf_r+0x1e8>)
 800891a:	f7f7 fcc9 	bl	80002b0 <memchr>
 800891e:	9a04      	ldr	r2, [sp, #16]
 8008920:	b9d8      	cbnz	r0, 800895a <_svfiprintf_r+0xe6>
 8008922:	06d0      	lsls	r0, r2, #27
 8008924:	bf44      	itt	mi
 8008926:	2320      	movmi	r3, #32
 8008928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892c:	0711      	lsls	r1, r2, #28
 800892e:	bf44      	itt	mi
 8008930:	232b      	movmi	r3, #43	; 0x2b
 8008932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008936:	f89a 3000 	ldrb.w	r3, [sl]
 800893a:	2b2a      	cmp	r3, #42	; 0x2a
 800893c:	d015      	beq.n	800896a <_svfiprintf_r+0xf6>
 800893e:	9a07      	ldr	r2, [sp, #28]
 8008940:	4654      	mov	r4, sl
 8008942:	2000      	movs	r0, #0
 8008944:	f04f 0c0a 	mov.w	ip, #10
 8008948:	4621      	mov	r1, r4
 800894a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800894e:	3b30      	subs	r3, #48	; 0x30
 8008950:	2b09      	cmp	r3, #9
 8008952:	d94d      	bls.n	80089f0 <_svfiprintf_r+0x17c>
 8008954:	b1b0      	cbz	r0, 8008984 <_svfiprintf_r+0x110>
 8008956:	9207      	str	r2, [sp, #28]
 8008958:	e014      	b.n	8008984 <_svfiprintf_r+0x110>
 800895a:	eba0 0308 	sub.w	r3, r0, r8
 800895e:	fa09 f303 	lsl.w	r3, r9, r3
 8008962:	4313      	orrs	r3, r2
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	46a2      	mov	sl, r4
 8008968:	e7d2      	b.n	8008910 <_svfiprintf_r+0x9c>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1d19      	adds	r1, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9103      	str	r1, [sp, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfbb      	ittet	lt
 8008976:	425b      	neglt	r3, r3
 8008978:	f042 0202 	orrlt.w	r2, r2, #2
 800897c:	9307      	strge	r3, [sp, #28]
 800897e:	9307      	strlt	r3, [sp, #28]
 8008980:	bfb8      	it	lt
 8008982:	9204      	strlt	r2, [sp, #16]
 8008984:	7823      	ldrb	r3, [r4, #0]
 8008986:	2b2e      	cmp	r3, #46	; 0x2e
 8008988:	d10c      	bne.n	80089a4 <_svfiprintf_r+0x130>
 800898a:	7863      	ldrb	r3, [r4, #1]
 800898c:	2b2a      	cmp	r3, #42	; 0x2a
 800898e:	d134      	bne.n	80089fa <_svfiprintf_r+0x186>
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	9203      	str	r2, [sp, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	bfb8      	it	lt
 800899c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089a0:	3402      	adds	r4, #2
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a6c <_svfiprintf_r+0x1f8>
 80089a8:	7821      	ldrb	r1, [r4, #0]
 80089aa:	2203      	movs	r2, #3
 80089ac:	4650      	mov	r0, sl
 80089ae:	f7f7 fc7f 	bl	80002b0 <memchr>
 80089b2:	b138      	cbz	r0, 80089c4 <_svfiprintf_r+0x150>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	eba0 000a 	sub.w	r0, r0, sl
 80089ba:	2240      	movs	r2, #64	; 0x40
 80089bc:	4082      	lsls	r2, r0
 80089be:	4313      	orrs	r3, r2
 80089c0:	3401      	adds	r4, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c8:	4825      	ldr	r0, [pc, #148]	; (8008a60 <_svfiprintf_r+0x1ec>)
 80089ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ce:	2206      	movs	r2, #6
 80089d0:	f7f7 fc6e 	bl	80002b0 <memchr>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d038      	beq.n	8008a4a <_svfiprintf_r+0x1d6>
 80089d8:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <_svfiprintf_r+0x1f0>)
 80089da:	bb1b      	cbnz	r3, 8008a24 <_svfiprintf_r+0x1b0>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	3307      	adds	r3, #7
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	4433      	add	r3, r6
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	e768      	b.n	80088c2 <_svfiprintf_r+0x4e>
 80089f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f4:	460c      	mov	r4, r1
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7a6      	b.n	8008948 <_svfiprintf_r+0xd4>
 80089fa:	2300      	movs	r3, #0
 80089fc:	3401      	adds	r4, #1
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a0c:	3a30      	subs	r2, #48	; 0x30
 8008a0e:	2a09      	cmp	r2, #9
 8008a10:	d903      	bls.n	8008a1a <_svfiprintf_r+0x1a6>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0c6      	beq.n	80089a4 <_svfiprintf_r+0x130>
 8008a16:	9105      	str	r1, [sp, #20]
 8008a18:	e7c4      	b.n	80089a4 <_svfiprintf_r+0x130>
 8008a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7f0      	b.n	8008a06 <_svfiprintf_r+0x192>
 8008a24:	ab03      	add	r3, sp, #12
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <_svfiprintf_r+0x1f4>)
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f3af 8000 	nop.w
 8008a34:	1c42      	adds	r2, r0, #1
 8008a36:	4606      	mov	r6, r0
 8008a38:	d1d6      	bne.n	80089e8 <_svfiprintf_r+0x174>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af2d 	bmi.w	800889c <_svfiprintf_r+0x28>
 8008a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a44:	b01d      	add	sp, #116	; 0x74
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	ab03      	add	r3, sp, #12
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <_svfiprintf_r+0x1f4>)
 8008a52:	a904      	add	r1, sp, #16
 8008a54:	4638      	mov	r0, r7
 8008a56:	f000 f879 	bl	8008b4c <_printf_i>
 8008a5a:	e7eb      	b.n	8008a34 <_svfiprintf_r+0x1c0>
 8008a5c:	080093d0 	.word	0x080093d0
 8008a60:	080093da 	.word	0x080093da
 8008a64:	00000000 	.word	0x00000000
 8008a68:	080087c1 	.word	0x080087c1
 8008a6c:	080093d6 	.word	0x080093d6

08008a70 <_printf_common>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	4616      	mov	r6, r2
 8008a76:	4699      	mov	r9, r3
 8008a78:	688a      	ldr	r2, [r1, #8]
 8008a7a:	690b      	ldr	r3, [r1, #16]
 8008a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a80:	4293      	cmp	r3, r2
 8008a82:	bfb8      	it	lt
 8008a84:	4613      	movlt	r3, r2
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	b10a      	cbz	r2, 8008a96 <_printf_common+0x26>
 8008a92:	3301      	adds	r3, #1
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	0699      	lsls	r1, r3, #26
 8008a9a:	bf42      	ittt	mi
 8008a9c:	6833      	ldrmi	r3, [r6, #0]
 8008a9e:	3302      	addmi	r3, #2
 8008aa0:	6033      	strmi	r3, [r6, #0]
 8008aa2:	6825      	ldr	r5, [r4, #0]
 8008aa4:	f015 0506 	ands.w	r5, r5, #6
 8008aa8:	d106      	bne.n	8008ab8 <_printf_common+0x48>
 8008aaa:	f104 0a19 	add.w	sl, r4, #25
 8008aae:	68e3      	ldr	r3, [r4, #12]
 8008ab0:	6832      	ldr	r2, [r6, #0]
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	42ab      	cmp	r3, r5
 8008ab6:	dc26      	bgt.n	8008b06 <_printf_common+0x96>
 8008ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008abc:	1e13      	subs	r3, r2, #0
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	bf18      	it	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	0692      	lsls	r2, r2, #26
 8008ac6:	d42b      	bmi.n	8008b20 <_printf_common+0xb0>
 8008ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008acc:	4649      	mov	r1, r9
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d01e      	beq.n	8008b14 <_printf_common+0xa4>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	f003 0306 	and.w	r3, r3, #6
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	bf02      	ittt	eq
 8008ae2:	68e5      	ldreq	r5, [r4, #12]
 8008ae4:	6833      	ldreq	r3, [r6, #0]
 8008ae6:	1aed      	subeq	r5, r5, r3
 8008ae8:	68a3      	ldr	r3, [r4, #8]
 8008aea:	bf0c      	ite	eq
 8008aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008af0:	2500      	movne	r5, #0
 8008af2:	4293      	cmp	r3, r2
 8008af4:	bfc4      	itt	gt
 8008af6:	1a9b      	subgt	r3, r3, r2
 8008af8:	18ed      	addgt	r5, r5, r3
 8008afa:	2600      	movs	r6, #0
 8008afc:	341a      	adds	r4, #26
 8008afe:	42b5      	cmp	r5, r6
 8008b00:	d11a      	bne.n	8008b38 <_printf_common+0xc8>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e008      	b.n	8008b18 <_printf_common+0xa8>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4652      	mov	r2, sl
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	47c0      	blx	r8
 8008b10:	3001      	adds	r0, #1
 8008b12:	d103      	bne.n	8008b1c <_printf_common+0xac>
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	e7c6      	b.n	8008aae <_printf_common+0x3e>
 8008b20:	18e1      	adds	r1, r4, r3
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	2030      	movs	r0, #48	; 0x30
 8008b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b2a:	4422      	add	r2, r4
 8008b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b34:	3302      	adds	r3, #2
 8008b36:	e7c7      	b.n	8008ac8 <_printf_common+0x58>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4638      	mov	r0, r7
 8008b40:	47c0      	blx	r8
 8008b42:	3001      	adds	r0, #1
 8008b44:	d0e6      	beq.n	8008b14 <_printf_common+0xa4>
 8008b46:	3601      	adds	r6, #1
 8008b48:	e7d9      	b.n	8008afe <_printf_common+0x8e>
	...

08008b4c <_printf_i>:
 8008b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	7e0f      	ldrb	r7, [r1, #24]
 8008b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b54:	2f78      	cmp	r7, #120	; 0x78
 8008b56:	4691      	mov	r9, r2
 8008b58:	4680      	mov	r8, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	469a      	mov	sl, r3
 8008b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b62:	d807      	bhi.n	8008b74 <_printf_i+0x28>
 8008b64:	2f62      	cmp	r7, #98	; 0x62
 8008b66:	d80a      	bhi.n	8008b7e <_printf_i+0x32>
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	f000 80d4 	beq.w	8008d16 <_printf_i+0x1ca>
 8008b6e:	2f58      	cmp	r7, #88	; 0x58
 8008b70:	f000 80c0 	beq.w	8008cf4 <_printf_i+0x1a8>
 8008b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b7c:	e03a      	b.n	8008bf4 <_printf_i+0xa8>
 8008b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b82:	2b15      	cmp	r3, #21
 8008b84:	d8f6      	bhi.n	8008b74 <_printf_i+0x28>
 8008b86:	a101      	add	r1, pc, #4	; (adr r1, 8008b8c <_printf_i+0x40>)
 8008b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b8c:	08008be5 	.word	0x08008be5
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008b75 	.word	0x08008b75
 8008b98:	08008b75 	.word	0x08008b75
 8008b9c:	08008b75 	.word	0x08008b75
 8008ba0:	08008b75 	.word	0x08008b75
 8008ba4:	08008bf9 	.word	0x08008bf9
 8008ba8:	08008b75 	.word	0x08008b75
 8008bac:	08008b75 	.word	0x08008b75
 8008bb0:	08008b75 	.word	0x08008b75
 8008bb4:	08008b75 	.word	0x08008b75
 8008bb8:	08008cfd 	.word	0x08008cfd
 8008bbc:	08008c25 	.word	0x08008c25
 8008bc0:	08008cb7 	.word	0x08008cb7
 8008bc4:	08008b75 	.word	0x08008b75
 8008bc8:	08008b75 	.word	0x08008b75
 8008bcc:	08008d1f 	.word	0x08008d1f
 8008bd0:	08008b75 	.word	0x08008b75
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008b75 	.word	0x08008b75
 8008bdc:	08008b75 	.word	0x08008b75
 8008be0:	08008cbf 	.word	0x08008cbf
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	1d1a      	adds	r2, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	602a      	str	r2, [r5, #0]
 8008bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e09f      	b.n	8008d38 <_printf_i+0x1ec>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	0607      	lsls	r7, r0, #24
 8008bfe:	f103 0104 	add.w	r1, r3, #4
 8008c02:	6029      	str	r1, [r5, #0]
 8008c04:	d501      	bpl.n	8008c0a <_printf_i+0xbe>
 8008c06:	681e      	ldr	r6, [r3, #0]
 8008c08:	e003      	b.n	8008c12 <_printf_i+0xc6>
 8008c0a:	0646      	lsls	r6, r0, #25
 8008c0c:	d5fb      	bpl.n	8008c06 <_printf_i+0xba>
 8008c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	da03      	bge.n	8008c1e <_printf_i+0xd2>
 8008c16:	232d      	movs	r3, #45	; 0x2d
 8008c18:	4276      	negs	r6, r6
 8008c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1e:	485a      	ldr	r0, [pc, #360]	; (8008d88 <_printf_i+0x23c>)
 8008c20:	230a      	movs	r3, #10
 8008c22:	e012      	b.n	8008c4a <_printf_i+0xfe>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	6820      	ldr	r0, [r4, #0]
 8008c28:	1d19      	adds	r1, r3, #4
 8008c2a:	6029      	str	r1, [r5, #0]
 8008c2c:	0605      	lsls	r5, r0, #24
 8008c2e:	d501      	bpl.n	8008c34 <_printf_i+0xe8>
 8008c30:	681e      	ldr	r6, [r3, #0]
 8008c32:	e002      	b.n	8008c3a <_printf_i+0xee>
 8008c34:	0641      	lsls	r1, r0, #25
 8008c36:	d5fb      	bpl.n	8008c30 <_printf_i+0xe4>
 8008c38:	881e      	ldrh	r6, [r3, #0]
 8008c3a:	4853      	ldr	r0, [pc, #332]	; (8008d88 <_printf_i+0x23c>)
 8008c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c3e:	bf0c      	ite	eq
 8008c40:	2308      	moveq	r3, #8
 8008c42:	230a      	movne	r3, #10
 8008c44:	2100      	movs	r1, #0
 8008c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c4a:	6865      	ldr	r5, [r4, #4]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	bfa2      	ittt	ge
 8008c52:	6821      	ldrge	r1, [r4, #0]
 8008c54:	f021 0104 	bicge.w	r1, r1, #4
 8008c58:	6021      	strge	r1, [r4, #0]
 8008c5a:	b90e      	cbnz	r6, 8008c60 <_printf_i+0x114>
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	d04b      	beq.n	8008cf8 <_printf_i+0x1ac>
 8008c60:	4615      	mov	r5, r2
 8008c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c66:	fb03 6711 	mls	r7, r3, r1, r6
 8008c6a:	5dc7      	ldrb	r7, [r0, r7]
 8008c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c70:	4637      	mov	r7, r6
 8008c72:	42bb      	cmp	r3, r7
 8008c74:	460e      	mov	r6, r1
 8008c76:	d9f4      	bls.n	8008c62 <_printf_i+0x116>
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d10b      	bne.n	8008c94 <_printf_i+0x148>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	07de      	lsls	r6, r3, #31
 8008c80:	d508      	bpl.n	8008c94 <_printf_i+0x148>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	6861      	ldr	r1, [r4, #4]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	bfde      	ittt	le
 8008c8a:	2330      	movle	r3, #48	; 0x30
 8008c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c94:	1b52      	subs	r2, r2, r5
 8008c96:	6122      	str	r2, [r4, #16]
 8008c98:	f8cd a000 	str.w	sl, [sp]
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	aa03      	add	r2, sp, #12
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7ff fee4 	bl	8008a70 <_printf_common>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d14a      	bne.n	8008d42 <_printf_i+0x1f6>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cb0:	b004      	add	sp, #16
 8008cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f043 0320 	orr.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	4833      	ldr	r0, [pc, #204]	; (8008d8c <_printf_i+0x240>)
 8008cc0:	2778      	movs	r7, #120	; 0x78
 8008cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	061f      	lsls	r7, r3, #24
 8008ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cd0:	d402      	bmi.n	8008cd8 <_printf_i+0x18c>
 8008cd2:	065f      	lsls	r7, r3, #25
 8008cd4:	bf48      	it	mi
 8008cd6:	b2b6      	uxthmi	r6, r6
 8008cd8:	07df      	lsls	r7, r3, #31
 8008cda:	bf48      	it	mi
 8008cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce0:	6029      	str	r1, [r5, #0]
 8008ce2:	bf48      	it	mi
 8008ce4:	6023      	strmi	r3, [r4, #0]
 8008ce6:	b91e      	cbnz	r6, 8008cf0 <_printf_i+0x1a4>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	f023 0320 	bic.w	r3, r3, #32
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	e7a7      	b.n	8008c44 <_printf_i+0xf8>
 8008cf4:	4824      	ldr	r0, [pc, #144]	; (8008d88 <_printf_i+0x23c>)
 8008cf6:	e7e4      	b.n	8008cc2 <_printf_i+0x176>
 8008cf8:	4615      	mov	r5, r2
 8008cfa:	e7bd      	b.n	8008c78 <_printf_i+0x12c>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	6826      	ldr	r6, [r4, #0]
 8008d00:	6961      	ldr	r1, [r4, #20]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6028      	str	r0, [r5, #0]
 8008d06:	0635      	lsls	r5, r6, #24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0x1c4>
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0x1ca>
 8008d10:	0670      	lsls	r0, r6, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0x1c0>
 8008d14:	8019      	strh	r1, [r3, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	e7bc      	b.n	8008c98 <_printf_i+0x14c>
 8008d1e:	682b      	ldr	r3, [r5, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	602a      	str	r2, [r5, #0]
 8008d24:	681d      	ldr	r5, [r3, #0]
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7f7 fac0 	bl	80002b0 <memchr>
 8008d30:	b108      	cbz	r0, 8008d36 <_printf_i+0x1ea>
 8008d32:	1b40      	subs	r0, r0, r5
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d40:	e7aa      	b.n	8008c98 <_printf_i+0x14c>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	462a      	mov	r2, r5
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0ad      	beq.n	8008cac <_printf_i+0x160>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d413      	bmi.n	8008d7e <_printf_i+0x232>
 8008d56:	68e0      	ldr	r0, [r4, #12]
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bfb8      	it	lt
 8008d5e:	4618      	movlt	r0, r3
 8008d60:	e7a6      	b.n	8008cb0 <_printf_i+0x164>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d09d      	beq.n	8008cac <_printf_i+0x160>
 8008d70:	3501      	adds	r5, #1
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	9903      	ldr	r1, [sp, #12]
 8008d76:	1a5b      	subs	r3, r3, r1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dcf2      	bgt.n	8008d62 <_printf_i+0x216>
 8008d7c:	e7eb      	b.n	8008d56 <_printf_i+0x20a>
 8008d7e:	2500      	movs	r5, #0
 8008d80:	f104 0619 	add.w	r6, r4, #25
 8008d84:	e7f5      	b.n	8008d72 <_printf_i+0x226>
 8008d86:	bf00      	nop
 8008d88:	080093e1 	.word	0x080093e1
 8008d8c:	080093f2 	.word	0x080093f2

08008d90 <memcpy>:
 8008d90:	440a      	add	r2, r1
 8008d92:	4291      	cmp	r1, r2
 8008d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d98:	d100      	bne.n	8008d9c <memcpy+0xc>
 8008d9a:	4770      	bx	lr
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da6:	4291      	cmp	r1, r2
 8008da8:	d1f9      	bne.n	8008d9e <memcpy+0xe>
 8008daa:	bd10      	pop	{r4, pc}

08008dac <memmove>:
 8008dac:	4288      	cmp	r0, r1
 8008dae:	b510      	push	{r4, lr}
 8008db0:	eb01 0402 	add.w	r4, r1, r2
 8008db4:	d902      	bls.n	8008dbc <memmove+0x10>
 8008db6:	4284      	cmp	r4, r0
 8008db8:	4623      	mov	r3, r4
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x20>
 8008dbc:	1e43      	subs	r3, r0, #1
 8008dbe:	42a1      	cmp	r1, r4
 8008dc0:	d008      	beq.n	8008dd4 <memmove+0x28>
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0x12>
 8008dcc:	4402      	add	r2, r0
 8008dce:	4601      	mov	r1, r0
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d100      	bne.n	8008dd6 <memmove+0x2a>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dde:	e7f7      	b.n	8008dd0 <memmove+0x24>

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f913 	bl	8009020 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b90e 	b.w	800902c <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	440c      	add	r4, r1
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	24031014 	.word	0x24031014

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 f8bc 	bl	8009000 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 f8b7 	bl	8009000 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f8ac 	bl	8009000 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	24031018 	.word	0x24031018

08008eb8 <_malloc_r>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	4e2e      	ldr	r6, [pc, #184]	; (8008f9c <_malloc_r+0xe4>)
 8008ee2:	f000 f89d 	bl	8009020 <__malloc_lock>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	461c      	mov	r4, r3
 8008eea:	bb34      	cbnz	r4, 8008f3a <_malloc_r+0x82>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7ff ffc2 	bl	8008e78 <sbrk_aligned>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	d14d      	bne.n	8008f96 <_malloc_r+0xde>
 8008efa:	6834      	ldr	r4, [r6, #0]
 8008efc:	4626      	mov	r6, r4
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d140      	bne.n	8008f84 <_malloc_r+0xcc>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4631      	mov	r1, r6
 8008f06:	4638      	mov	r0, r7
 8008f08:	eb04 0803 	add.w	r8, r4, r3
 8008f0c:	f000 f878 	bl	8009000 <_sbrk_r>
 8008f10:	4580      	cmp	r8, r0
 8008f12:	d13a      	bne.n	8008f8a <_malloc_r+0xd2>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	3503      	adds	r5, #3
 8008f18:	1aed      	subs	r5, r5, r3
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <sbrk_aligned>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d02b      	beq.n	8008f8a <_malloc_r+0xd2>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	442b      	add	r3, r5
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	e00e      	b.n	8008f58 <_malloc_r+0xa0>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	d41e      	bmi.n	8008f7e <_malloc_r+0xc6>
 8008f40:	2a0b      	cmp	r2, #11
 8008f42:	d916      	bls.n	8008f72 <_malloc_r+0xba>
 8008f44:	1961      	adds	r1, r4, r5
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	bf18      	it	ne
 8008f4c:	6059      	strne	r1, [r3, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	bf08      	it	eq
 8008f52:	6031      	streq	r1, [r6, #0]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 f865 	bl	800902c <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0b6      	beq.n	8008eda <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7b3      	b.n	8008eda <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	6032      	streq	r2, [r6, #0]
 8008f7a:	605a      	strne	r2, [r3, #4]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xa0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7b2      	b.n	8008eea <_malloc_r+0x32>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b9      	b.n	8008efe <_malloc_r+0x46>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f000 f84c 	bl	800902c <__malloc_unlock>
 8008f94:	e7a1      	b.n	8008eda <_malloc_r+0x22>
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa0>
 8008f9a:	bf00      	nop
 8008f9c:	24031014 	.word	0x24031014

08008fa0 <_realloc_r>:
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	460e      	mov	r6, r1
 8008faa:	b921      	cbnz	r1, 8008fb6 <_realloc_r+0x16>
 8008fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	f7ff bf81 	b.w	8008eb8 <_malloc_r>
 8008fb6:	b92a      	cbnz	r2, 8008fc4 <_realloc_r+0x24>
 8008fb8:	f7ff ff12 	bl	8008de0 <_free_r>
 8008fbc:	4625      	mov	r5, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	f000 f838 	bl	8009038 <_malloc_usable_size_r>
 8008fc8:	4284      	cmp	r4, r0
 8008fca:	4607      	mov	r7, r0
 8008fcc:	d802      	bhi.n	8008fd4 <_realloc_r+0x34>
 8008fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fd2:	d812      	bhi.n	8008ffa <_realloc_r+0x5a>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7ff ff6e 	bl	8008eb8 <_malloc_r>
 8008fdc:	4605      	mov	r5, r0
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d0ed      	beq.n	8008fbe <_realloc_r+0x1e>
 8008fe2:	42bc      	cmp	r4, r7
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	bf28      	it	cs
 8008fea:	463a      	movcs	r2, r7
 8008fec:	f7ff fed0 	bl	8008d90 <memcpy>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	f7ff fef4 	bl	8008de0 <_free_r>
 8008ff8:	e7e1      	b.n	8008fbe <_realloc_r+0x1e>
 8008ffa:	4635      	mov	r5, r6
 8008ffc:	e7df      	b.n	8008fbe <_realloc_r+0x1e>
	...

08009000 <_sbrk_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_sbrk_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 f83e 	bl	800108c <_sbrk>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_sbrk_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_sbrk_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	2403101c 	.word	0x2403101c

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_lock+0x8>)
 8009022:	f7ff bbcb 	b.w	80087bc <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	24031010 	.word	0x24031010

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_unlock+0x8>)
 800902e:	f7ff bbc6 	b.w	80087be <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	24031010 	.word	0x24031010

08009038 <_malloc_usable_size_r>:
 8009038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903c:	1f18      	subs	r0, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfbc      	itt	lt
 8009042:	580b      	ldrlt	r3, [r1, r0]
 8009044:	18c0      	addlt	r0, r0, r3
 8009046:	4770      	bx	lr

08009048 <__udivmoddi4>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4686      	mov	lr, r0
 800904e:	468c      	mov	ip, r1
 8009050:	4608      	mov	r0, r1
 8009052:	9e08      	ldr	r6, [sp, #32]
 8009054:	4615      	mov	r5, r2
 8009056:	4674      	mov	r4, lr
 8009058:	4619      	mov	r1, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	f040 80c2 	bne.w	80091e4 <__udivmoddi4+0x19c>
 8009060:	4285      	cmp	r5, r0
 8009062:	fab2 f282 	clz	r2, r2
 8009066:	d945      	bls.n	80090f4 <__udivmoddi4+0xac>
 8009068:	b14a      	cbz	r2, 800907e <__udivmoddi4+0x36>
 800906a:	f1c2 0320 	rsb	r3, r2, #32
 800906e:	fa00 fc02 	lsl.w	ip, r0, r2
 8009072:	fa2e f303 	lsr.w	r3, lr, r3
 8009076:	4095      	lsls	r5, r2
 8009078:	ea43 0c0c 	orr.w	ip, r3, ip
 800907c:	4094      	lsls	r4, r2
 800907e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009082:	b2a8      	uxth	r0, r5
 8009084:	fbbc f8fe 	udiv	r8, ip, lr
 8009088:	0c23      	lsrs	r3, r4, #16
 800908a:	fb0e cc18 	mls	ip, lr, r8, ip
 800908e:	fb08 f900 	mul.w	r9, r8, r0
 8009092:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009096:	4599      	cmp	r9, r3
 8009098:	d928      	bls.n	80090ec <__udivmoddi4+0xa4>
 800909a:	18eb      	adds	r3, r5, r3
 800909c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 80090a0:	d204      	bcs.n	80090ac <__udivmoddi4+0x64>
 80090a2:	4599      	cmp	r9, r3
 80090a4:	d902      	bls.n	80090ac <__udivmoddi4+0x64>
 80090a6:	f1a8 0702 	sub.w	r7, r8, #2
 80090aa:	442b      	add	r3, r5
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	b2a4      	uxth	r4, r4
 80090b2:	fbb3 fcfe 	udiv	ip, r3, lr
 80090b6:	fb0e 331c 	mls	r3, lr, ip, r3
 80090ba:	fb0c f000 	mul.w	r0, ip, r0
 80090be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80090c2:	42a0      	cmp	r0, r4
 80090c4:	d914      	bls.n	80090f0 <__udivmoddi4+0xa8>
 80090c6:	192c      	adds	r4, r5, r4
 80090c8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80090cc:	d204      	bcs.n	80090d8 <__udivmoddi4+0x90>
 80090ce:	42a0      	cmp	r0, r4
 80090d0:	d902      	bls.n	80090d8 <__udivmoddi4+0x90>
 80090d2:	f1ac 0302 	sub.w	r3, ip, #2
 80090d6:	442c      	add	r4, r5
 80090d8:	1a24      	subs	r4, r4, r0
 80090da:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80090de:	b11e      	cbz	r6, 80090e8 <__udivmoddi4+0xa0>
 80090e0:	40d4      	lsrs	r4, r2
 80090e2:	2300      	movs	r3, #0
 80090e4:	6034      	str	r4, [r6, #0]
 80090e6:	6073      	str	r3, [r6, #4]
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	4647      	mov	r7, r8
 80090ee:	e7dd      	b.n	80090ac <__udivmoddi4+0x64>
 80090f0:	4663      	mov	r3, ip
 80090f2:	e7f1      	b.n	80090d8 <__udivmoddi4+0x90>
 80090f4:	bb92      	cbnz	r2, 800915c <__udivmoddi4+0x114>
 80090f6:	1b43      	subs	r3, r0, r5
 80090f8:	2101      	movs	r1, #1
 80090fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80090fe:	b2af      	uxth	r7, r5
 8009100:	fbb3 fcfe 	udiv	ip, r3, lr
 8009104:	0c20      	lsrs	r0, r4, #16
 8009106:	fb0e 331c 	mls	r3, lr, ip, r3
 800910a:	fb0c f807 	mul.w	r8, ip, r7
 800910e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8009112:	4598      	cmp	r8, r3
 8009114:	d962      	bls.n	80091dc <__udivmoddi4+0x194>
 8009116:	18eb      	adds	r3, r5, r3
 8009118:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800911c:	d204      	bcs.n	8009128 <__udivmoddi4+0xe0>
 800911e:	4598      	cmp	r8, r3
 8009120:	d902      	bls.n	8009128 <__udivmoddi4+0xe0>
 8009122:	f1ac 0002 	sub.w	r0, ip, #2
 8009126:	442b      	add	r3, r5
 8009128:	eba3 0308 	sub.w	r3, r3, r8
 800912c:	b2a4      	uxth	r4, r4
 800912e:	fbb3 fcfe 	udiv	ip, r3, lr
 8009132:	fb0e 331c 	mls	r3, lr, ip, r3
 8009136:	fb0c f707 	mul.w	r7, ip, r7
 800913a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800913e:	42a7      	cmp	r7, r4
 8009140:	d94e      	bls.n	80091e0 <__udivmoddi4+0x198>
 8009142:	192c      	adds	r4, r5, r4
 8009144:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8009148:	d204      	bcs.n	8009154 <__udivmoddi4+0x10c>
 800914a:	42a7      	cmp	r7, r4
 800914c:	d902      	bls.n	8009154 <__udivmoddi4+0x10c>
 800914e:	f1ac 0302 	sub.w	r3, ip, #2
 8009152:	442c      	add	r4, r5
 8009154:	1be4      	subs	r4, r4, r7
 8009156:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800915a:	e7c0      	b.n	80090de <__udivmoddi4+0x96>
 800915c:	f1c2 0320 	rsb	r3, r2, #32
 8009160:	fa20 f103 	lsr.w	r1, r0, r3
 8009164:	4095      	lsls	r5, r2
 8009166:	4090      	lsls	r0, r2
 8009168:	fa2e f303 	lsr.w	r3, lr, r3
 800916c:	4303      	orrs	r3, r0
 800916e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009172:	b2af      	uxth	r7, r5
 8009174:	fbb1 fcfe 	udiv	ip, r1, lr
 8009178:	fb0e 101c 	mls	r0, lr, ip, r1
 800917c:	0c19      	lsrs	r1, r3, #16
 800917e:	fb0c f807 	mul.w	r8, ip, r7
 8009182:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009186:	4588      	cmp	r8, r1
 8009188:	fa04 f402 	lsl.w	r4, r4, r2
 800918c:	d922      	bls.n	80091d4 <__udivmoddi4+0x18c>
 800918e:	1869      	adds	r1, r5, r1
 8009190:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8009194:	d204      	bcs.n	80091a0 <__udivmoddi4+0x158>
 8009196:	4588      	cmp	r8, r1
 8009198:	d902      	bls.n	80091a0 <__udivmoddi4+0x158>
 800919a:	f1ac 0002 	sub.w	r0, ip, #2
 800919e:	4429      	add	r1, r5
 80091a0:	eba1 0108 	sub.w	r1, r1, r8
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	fbb1 fcfe 	udiv	ip, r1, lr
 80091aa:	fb0e 111c 	mls	r1, lr, ip, r1
 80091ae:	fb0c f707 	mul.w	r7, ip, r7
 80091b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80091b6:	429f      	cmp	r7, r3
 80091b8:	d90e      	bls.n	80091d8 <__udivmoddi4+0x190>
 80091ba:	18eb      	adds	r3, r5, r3
 80091bc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80091c0:	d204      	bcs.n	80091cc <__udivmoddi4+0x184>
 80091c2:	429f      	cmp	r7, r3
 80091c4:	d902      	bls.n	80091cc <__udivmoddi4+0x184>
 80091c6:	f1ac 0102 	sub.w	r1, ip, #2
 80091ca:	442b      	add	r3, r5
 80091cc:	1bdb      	subs	r3, r3, r7
 80091ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091d2:	e792      	b.n	80090fa <__udivmoddi4+0xb2>
 80091d4:	4660      	mov	r0, ip
 80091d6:	e7e3      	b.n	80091a0 <__udivmoddi4+0x158>
 80091d8:	4661      	mov	r1, ip
 80091da:	e7f7      	b.n	80091cc <__udivmoddi4+0x184>
 80091dc:	4660      	mov	r0, ip
 80091de:	e7a3      	b.n	8009128 <__udivmoddi4+0xe0>
 80091e0:	4663      	mov	r3, ip
 80091e2:	e7b7      	b.n	8009154 <__udivmoddi4+0x10c>
 80091e4:	4283      	cmp	r3, r0
 80091e6:	d906      	bls.n	80091f6 <__udivmoddi4+0x1ae>
 80091e8:	b916      	cbnz	r6, 80091f0 <__udivmoddi4+0x1a8>
 80091ea:	2100      	movs	r1, #0
 80091ec:	4608      	mov	r0, r1
 80091ee:	e77b      	b.n	80090e8 <__udivmoddi4+0xa0>
 80091f0:	e9c6 e000 	strd	lr, r0, [r6]
 80091f4:	e7f9      	b.n	80091ea <__udivmoddi4+0x1a2>
 80091f6:	fab3 f783 	clz	r7, r3
 80091fa:	b98f      	cbnz	r7, 8009220 <__udivmoddi4+0x1d8>
 80091fc:	4283      	cmp	r3, r0
 80091fe:	d301      	bcc.n	8009204 <__udivmoddi4+0x1bc>
 8009200:	4572      	cmp	r2, lr
 8009202:	d808      	bhi.n	8009216 <__udivmoddi4+0x1ce>
 8009204:	ebbe 0402 	subs.w	r4, lr, r2
 8009208:	eb60 0303 	sbc.w	r3, r0, r3
 800920c:	2001      	movs	r0, #1
 800920e:	469c      	mov	ip, r3
 8009210:	b91e      	cbnz	r6, 800921a <__udivmoddi4+0x1d2>
 8009212:	2100      	movs	r1, #0
 8009214:	e768      	b.n	80090e8 <__udivmoddi4+0xa0>
 8009216:	4638      	mov	r0, r7
 8009218:	e7fa      	b.n	8009210 <__udivmoddi4+0x1c8>
 800921a:	e9c6 4c00 	strd	r4, ip, [r6]
 800921e:	e7f8      	b.n	8009212 <__udivmoddi4+0x1ca>
 8009220:	f1c7 0c20 	rsb	ip, r7, #32
 8009224:	40bb      	lsls	r3, r7
 8009226:	fa22 f40c 	lsr.w	r4, r2, ip
 800922a:	431c      	orrs	r4, r3
 800922c:	fa2e f10c 	lsr.w	r1, lr, ip
 8009230:	fa20 f30c 	lsr.w	r3, r0, ip
 8009234:	40b8      	lsls	r0, r7
 8009236:	4301      	orrs	r1, r0
 8009238:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800923c:	fa0e f507 	lsl.w	r5, lr, r7
 8009240:	fbb3 f8f9 	udiv	r8, r3, r9
 8009244:	fa1f fe84 	uxth.w	lr, r4
 8009248:	fb09 3018 	mls	r0, r9, r8, r3
 800924c:	0c0b      	lsrs	r3, r1, #16
 800924e:	fb08 fa0e 	mul.w	sl, r8, lr
 8009252:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009256:	459a      	cmp	sl, r3
 8009258:	fa02 f207 	lsl.w	r2, r2, r7
 800925c:	d940      	bls.n	80092e0 <__udivmoddi4+0x298>
 800925e:	18e3      	adds	r3, r4, r3
 8009260:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8009264:	d204      	bcs.n	8009270 <__udivmoddi4+0x228>
 8009266:	459a      	cmp	sl, r3
 8009268:	d902      	bls.n	8009270 <__udivmoddi4+0x228>
 800926a:	f1a8 0002 	sub.w	r0, r8, #2
 800926e:	4423      	add	r3, r4
 8009270:	eba3 030a 	sub.w	r3, r3, sl
 8009274:	b289      	uxth	r1, r1
 8009276:	fbb3 f8f9 	udiv	r8, r3, r9
 800927a:	fb09 3318 	mls	r3, r9, r8, r3
 800927e:	fb08 fe0e 	mul.w	lr, r8, lr
 8009282:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009286:	458e      	cmp	lr, r1
 8009288:	d92c      	bls.n	80092e4 <__udivmoddi4+0x29c>
 800928a:	1861      	adds	r1, r4, r1
 800928c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009290:	d204      	bcs.n	800929c <__udivmoddi4+0x254>
 8009292:	458e      	cmp	lr, r1
 8009294:	d902      	bls.n	800929c <__udivmoddi4+0x254>
 8009296:	f1a8 0302 	sub.w	r3, r8, #2
 800929a:	4421      	add	r1, r4
 800929c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80092a0:	fba0 9802 	umull	r9, r8, r0, r2
 80092a4:	eba1 010e 	sub.w	r1, r1, lr
 80092a8:	4541      	cmp	r1, r8
 80092aa:	46ce      	mov	lr, r9
 80092ac:	4643      	mov	r3, r8
 80092ae:	d302      	bcc.n	80092b6 <__udivmoddi4+0x26e>
 80092b0:	d106      	bne.n	80092c0 <__udivmoddi4+0x278>
 80092b2:	454d      	cmp	r5, r9
 80092b4:	d204      	bcs.n	80092c0 <__udivmoddi4+0x278>
 80092b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80092ba:	eb68 0304 	sbc.w	r3, r8, r4
 80092be:	3801      	subs	r0, #1
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	d0a6      	beq.n	8009212 <__udivmoddi4+0x1ca>
 80092c4:	ebb5 020e 	subs.w	r2, r5, lr
 80092c8:	eb61 0103 	sbc.w	r1, r1, r3
 80092cc:	fa01 fc0c 	lsl.w	ip, r1, ip
 80092d0:	fa22 f307 	lsr.w	r3, r2, r7
 80092d4:	ea4c 0303 	orr.w	r3, ip, r3
 80092d8:	40f9      	lsrs	r1, r7
 80092da:	e9c6 3100 	strd	r3, r1, [r6]
 80092de:	e798      	b.n	8009212 <__udivmoddi4+0x1ca>
 80092e0:	4640      	mov	r0, r8
 80092e2:	e7c5      	b.n	8009270 <__udivmoddi4+0x228>
 80092e4:	4643      	mov	r3, r8
 80092e6:	e7d9      	b.n	800929c <__udivmoddi4+0x254>

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
