
h7a3zi_combine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c0  24000074  0800828c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000234  0800828c  00020234  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020ae1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047e8  00000000  00000000  00040b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016d8  00000000  00000000  00045370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001205  00000000  00000000  00046a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003281a  00000000  00000000  00047c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000181c8  00000000  00000000  0007a467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001554ba  00000000  00000000  0009262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000003c  00000000  00000000  001e7ae9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005aac  00000000  00000000  001e7b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000146  00000000  00000000  001ed5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000018b4  00000000  00000000  001ed71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b80c 	b.w	8000380 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f007 fdb2 	bl	8007ed8 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__aeabi_idiv0>:
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <__do_global_dtors_aux>:
 8000384:	b510      	push	{r4, lr}
 8000386:	4c05      	ldr	r4, [pc, #20]	; (800039c <__do_global_dtors_aux+0x18>)
 8000388:	7823      	ldrb	r3, [r4, #0]
 800038a:	b933      	cbnz	r3, 800039a <__do_global_dtors_aux+0x16>
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__do_global_dtors_aux+0x1c>)
 800038e:	b113      	cbz	r3, 8000396 <__do_global_dtors_aux+0x12>
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <__do_global_dtors_aux+0x20>)
 8000392:	f3af 8000 	nop.w
 8000396:	2301      	movs	r3, #1
 8000398:	7023      	strb	r3, [r4, #0]
 800039a:	bd10      	pop	{r4, pc}
 800039c:	24000074 	.word	0x24000074
 80003a0:	00000000 	.word	0x00000000
 80003a4:	08008178 	.word	0x08008178

080003a8 <frame_dummy>:
 80003a8:	b508      	push	{r3, lr}
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <frame_dummy+0x10>)
 80003ac:	b11b      	cbz	r3, 80003b6 <frame_dummy+0xe>
 80003ae:	4903      	ldr	r1, [pc, #12]	; (80003bc <frame_dummy+0x14>)
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <frame_dummy+0x18>)
 80003b2:	f3af 8000 	nop.w
 80003b6:	bd08      	pop	{r3, pc}
 80003b8:	00000000 	.word	0x00000000
 80003bc:	24000078 	.word	0x24000078
 80003c0:	08008178 	.word	0x08008178

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	f5ad 3d43 	sub.w	sp, sp, #199680	; 0x30c00
 80003ca:	b0e4      	sub	sp, #400	; 0x190
 80003cc:	af00      	add	r7, sp, #0
  uint16_t tim_end_ms;
//	uint16_t tim_v_on;
//	uint16_t tim_v_off;

  uint16_t sensor_data[100000];
  uint32_t i = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	4a6d      	ldr	r2, [pc, #436]	; (8000588 <main+0x1c4>)
 80003d2:	443a      	add	r2, r7
 80003d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fe17 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f8f3 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 fa89 	bl	80008f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003e2:	f000 fa33 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80003e6:	f000 fa7d 	bl	80008e4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80003ea:	f000 f969 	bl	80006c0 <MX_ADC1_Init>
  MX_TIM16_Init();
 80003ee:	f000 f9df 	bl	80007b0 <MX_TIM16_Init>
  MX_TIM17_Init();
 80003f2:	f000 fa05 	bl	8000800 <MX_TIM17_Init>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

  /* ACTOREN/SENSOREN CHECK END */

  /* test area */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 		// Pumpe
 80003f6:	2201      	movs	r2, #1
 80003f8:	2102      	movs	r1, #2
 80003fa:	4864      	ldr	r0, [pc, #400]	; (800058c <main+0x1c8>)
 80003fc:	f002 fb46 	bl	8002a8c <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 8000400:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000404:	f000 fe92 	bl	800112c <HAL_Delay>

  HAL_TIM_Base_Start(&htim16); 								// start tim16
 8000408:	4861      	ldr	r0, [pc, #388]	; (8000590 <main+0x1cc>)
 800040a:	f005 fc49 	bl	8005ca0 <HAL_TIM_Base_Start>
  tim_begin_ms = __HAL_TIM_GET_COUNTER(&htim16); 			// get first number of tim16
 800040e:	4b60      	ldr	r3, [pc, #384]	; (8000590 <main+0x1cc>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a5f      	ldr	r2, [pc, #380]	; (8000594 <main+0x1d0>)
 8000416:	443a      	add	r2, r7
 8000418:	8013      	strh	r3, [r2, #0]

  while (tim_val_ms < 10000-1) 								// with presc of 9600 it is exactly 1 sec
 800041a:	e065      	b.n	80004e8 <main+0x124>
  {
	HAL_GPIO_WritePin(GPIOE , GPIO_PIN_1, GPIO_PIN_SET); 	// LED
 800041c:	2201      	movs	r2, #1
 800041e:	2102      	movs	r1, #2
 8000420:	485d      	ldr	r0, [pc, #372]	; (8000598 <main+0x1d4>)
 8000422:	f002 fb33 	bl	8002a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // vibrator
 8000426:	2200      	movs	r2, #0
 8000428:	2110      	movs	r1, #16
 800042a:	4858      	ldr	r0, [pc, #352]	; (800058c <main+0x1c8>)
 800042c:	f002 fb2e 	bl	8002a8c <HAL_GPIO_WritePin>
	tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000430:	4b57      	ldr	r3, [pc, #348]	; (8000590 <main+0x1cc>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000436:	4a59      	ldr	r2, [pc, #356]	; (800059c <main+0x1d8>)
 8000438:	443a      	add	r2, r7
 800043a:	8013      	strh	r3, [r2, #0]

	if (tim_val_ms >= 2000-1 && tim_val_ms <= 4000-1){
 800043c:	4b57      	ldr	r3, [pc, #348]	; (800059c <main+0x1d8>)
 800043e:	443b      	add	r3, r7
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000446:	4293      	cmp	r3, r2
 8000448:	d92c      	bls.n	80004a4 <main+0xe0>
 800044a:	4b54      	ldr	r3, [pc, #336]	; (800059c <main+0x1d8>)
 800044c:	443b      	add	r3, r7
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000454:	d226      	bcs.n	80004a4 <main+0xe0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // vibrator
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	484c      	ldr	r0, [pc, #304]	; (800058c <main+0x1c8>)
 800045c:	f002 fb16 	bl	8002a8c <HAL_GPIO_WritePin>

		HAL_ADC_Start(&hadc1);
 8000460:	484f      	ldr	r0, [pc, #316]	; (80005a0 <main+0x1dc>)
 8000462:	f001 f9c3 	bl	80017ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800046a:	484d      	ldr	r0, [pc, #308]	; (80005a0 <main+0x1dc>)
 800046c:	f001 fa78 	bl	8001960 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8000470:	484b      	ldr	r0, [pc, #300]	; (80005a0 <main+0x1dc>)
 8000472:	f001 fb4d 	bl	8001b10 <HAL_ADC_GetValue>
 8000476:	4603      	mov	r3, r0
 8000478:	4a4a      	ldr	r2, [pc, #296]	; (80005a4 <main+0x1e0>)
 800047a:	443a      	add	r2, r7
 800047c:	8013      	strh	r3, [r2, #0]
		sensor_data[i] = raw;
 800047e:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8000482:	f6a3 5358 	subw	r3, r3, #3416	; 0xd58
 8000486:	4a40      	ldr	r2, [pc, #256]	; (8000588 <main+0x1c4>)
 8000488:	443a      	add	r2, r7
 800048a:	6812      	ldr	r2, [r2, #0]
 800048c:	4945      	ldr	r1, [pc, #276]	; (80005a4 <main+0x1e0>)
 800048e:	4439      	add	r1, r7
 8000490:	8809      	ldrh	r1, [r1, #0]
 8000492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		i++;
 8000496:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <main+0x1c4>)
 8000498:	443b      	add	r3, r7
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a3a      	ldr	r2, [pc, #232]	; (8000588 <main+0x1c4>)
 80004a0:	443a      	add	r2, r7
 80004a2:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Start(&hadc1);
 80004a4:	483e      	ldr	r0, [pc, #248]	; (80005a0 <main+0x1dc>)
 80004a6:	f001 f9a1 	bl	80017ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004ae:	483c      	ldr	r0, [pc, #240]	; (80005a0 <main+0x1dc>)
 80004b0:	f001 fa56 	bl	8001960 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80004b4:	483a      	ldr	r0, [pc, #232]	; (80005a0 <main+0x1dc>)
 80004b6:	f001 fb2b 	bl	8001b10 <HAL_ADC_GetValue>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a39      	ldr	r2, [pc, #228]	; (80005a4 <main+0x1e0>)
 80004be:	443a      	add	r2, r7
 80004c0:	8013      	strh	r3, [r2, #0]
	sensor_data[i] = raw;
 80004c2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80004c6:	f6a3 5358 	subw	r3, r3, #3416	; 0xd58
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <main+0x1c4>)
 80004cc:	443a      	add	r2, r7
 80004ce:	6812      	ldr	r2, [r2, #0]
 80004d0:	4934      	ldr	r1, [pc, #208]	; (80005a4 <main+0x1e0>)
 80004d2:	4439      	add	r1, r7
 80004d4:	8809      	ldrh	r1, [r1, #0]
 80004d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	i++;
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <main+0x1c4>)
 80004dc:	443b      	add	r3, r7
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a29      	ldr	r2, [pc, #164]	; (8000588 <main+0x1c4>)
 80004e4:	443a      	add	r2, r7
 80004e6:	6013      	str	r3, [r2, #0]
  while (tim_val_ms < 10000-1) 								// with presc of 9600 it is exactly 1 sec
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <main+0x1d8>)
 80004ea:	443b      	add	r3, r7
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	f242 720e 	movw	r2, #9998	; 0x270e
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d992      	bls.n	800041c <main+0x58>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); 		// Pumpe
 80004f6:	2200      	movs	r2, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	4824      	ldr	r0, [pc, #144]	; (800058c <main+0x1c8>)
 80004fc:	f002 fac6 	bl	8002a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE , GPIO_PIN_1, GPIO_PIN_RESET); 		// LED
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	4824      	ldr	r0, [pc, #144]	; (8000598 <main+0x1d4>)
 8000506:	f002 fac1 	bl	8002a8c <HAL_GPIO_WritePin>
  tim_end_ms = __HAL_TIM_GET_COUNTER(&htim16);
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <main+0x1cc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000510:	4a25      	ldr	r2, [pc, #148]	; (80005a8 <main+0x1e4>)
 8000512:	443a      	add	r2, r7
 8000514:	8013      	strh	r3, [r2, #0]
//  uart_buf_len = sprintf(uart_buf, "%u ms Ende %u ms i =  %d \r\n",  tim_begin_ms, tim_end_ms, i );
//  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
  /* Transmit an array with data via uart */
  for (j=0; j < i; j++){
 8000516:	2300      	movs	r3, #0
 8000518:	4a24      	ldr	r2, [pc, #144]	; (80005ac <main+0x1e8>)
 800051a:	443a      	add	r2, r7
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e028      	b.n	8000572 <main+0x1ae>
	  uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, sensor_data[j]);
 8000520:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8000524:	f6a3 5358 	subw	r3, r3, #3416	; 0xd58
 8000528:	4a20      	ldr	r2, [pc, #128]	; (80005ac <main+0x1e8>)
 800052a:	443a      	add	r2, r7
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000532:	481f      	ldr	r0, [pc, #124]	; (80005b0 <main+0x1ec>)
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <main+0x1f0>)
 8000536:	4402      	add	r2, r0
 8000538:	19d0      	adds	r0, r2, r7
 800053a:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <main+0x1e8>)
 800053c:	443a      	add	r2, r7
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	491d      	ldr	r1, [pc, #116]	; (80005b8 <main+0x1f4>)
 8000542:	f007 f863 	bl	800760c <siprintf>
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <main+0x1f8>)
 8000548:	443b      	add	r3, r7
 800054a:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len , 100);
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <main+0x1f8>)
 800054e:	443b      	add	r3, r7
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	b29a      	uxth	r2, r3
 8000554:	4916      	ldr	r1, [pc, #88]	; (80005b0 <main+0x1ec>)
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <main+0x1f0>)
 8000558:	440b      	add	r3, r1
 800055a:	19d9      	adds	r1, r3, r7
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <main+0x1fc>)
 8000560:	f005 fe68 	bl	8006234 <HAL_UART_Transmit>
  for (j=0; j < i; j++){
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x1e8>)
 8000566:	443b      	add	r3, r7
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <main+0x1e8>)
 800056e:	443a      	add	r2, r7
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x1e8>)
 8000574:	443b      	add	r3, r7
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <main+0x1c4>)
 800057a:	443b      	add	r3, r7
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3ce      	bcc.n	8000520 <main+0x15c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x1be>
 8000586:	bf00      	nop
 8000588:	00030d88 	.word	0x00030d88
 800058c:	58020000 	.word	0x58020000
 8000590:	240000f4 	.word	0x240000f4
 8000594:	00030d82 	.word	0x00030d82
 8000598:	58021000 	.word	0x58021000
 800059c:	00030d8e 	.word	0x00030d8e
 80005a0:	24000090 	.word	0x24000090
 80005a4:	00030d7a 	.word	0x00030d7a
 80005a8:	00030d80 	.word	0x00030d80
 80005ac:	00030d84 	.word	0x00030d84
 80005b0:	fffcf274 	.word	0xfffcf274
 80005b4:	00030d90 	.word	0x00030d90
 80005b8:	08008190 	.word	0x08008190
 80005bc:	00030d7c 	.word	0x00030d7c
 80005c0:	2400018c 	.word	0x2400018c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b09c      	sub	sp, #112	; 0x70
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	224c      	movs	r2, #76	; 0x4c
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 f812 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2220      	movs	r2, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 f80c 	bl	80075fc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <SystemClock_Config+0xf4>)
 80005e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005ee:	2004      	movs	r0, #4
 80005f0:	f002 fa66 	bl	8002ac0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <SystemClock_Config+0xf8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <SystemClock_Config+0xf8>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <SystemClock_Config+0xf8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000610:	bf00      	nop
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <SystemClock_Config+0xf8>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061e:	d1f8      	bne.n	8000612 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xf4>)
 8000622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000624:	f023 0303 	bic.w	r3, r3, #3
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <SystemClock_Config+0xf4>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000630:	2321      	movs	r3, #33	; 0x21
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800064a:	2318      	movs	r3, #24
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000652:	2304      	movs	r3, #4
 8000654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000656:	2302      	movs	r3, #2
 8000658:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800065a:	230c      	movs	r3, #12
 800065c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800065e:	2300      	movs	r3, #0
 8000660:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fa82 	bl	8002b74 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000676:	f000 fa7f 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	233f      	movs	r3, #63	; 0x3f
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fe6c 	bl	800337c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006aa:	f000 fa65 	bl	8000b78 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3770      	adds	r7, #112	; 0x70
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	58024400 	.word	0x58024400
 80006bc:	58024800 	.word	0x58024800

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e4:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <MX_ADC1_Init+0xe4>)
 80006e6:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <MX_ADC1_Init+0xe8>)
 80006e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_ADC1_Init+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <MX_ADC1_Init+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_ADC1_Init+0xe4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_ADC1_Init+0xe4>)
 80006fe:	2204      	movs	r2, #4
 8000700:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000704:	2200      	movs	r2, #0
 8000706:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800070a:	2200      	movs	r2, #0
 800070c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000710:	2201      	movs	r2, #1
 8000712:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800072e:	2200      	movs	r2, #0
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_ADC1_Init+0xe4>)
 8000742:	f000 fef9 	bl	8001538 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 fa14 	bl	8000b78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800075c:	f001 fe3a 	bl	80023d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000766:	f000 fa07 	bl	8000b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_ADC1_Init+0xec>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800077a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077c:	2304      	movs	r3, #4
 800077e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0xe4>)
 800078e:	f001 f9cd 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000798:	f000 f9ee 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000090 	.word	0x24000090
 80007a8:	40022000 	.word	0x40022000
 80007ac:	43210000 	.word	0x43210000

080007b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_TIM16_Init+0x4c>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007bc:	f242 527f 	movw	r2, #9599	; 0x257f
 80007c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007ca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_TIM16_Init+0x48>)
 80007e4:	f005 fa04 	bl	8005bf0 <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80007ee:	f000 f9c3 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	240000f4 	.word	0x240000f4
 80007fc:	40014400 	.word	0x40014400

08000800 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_TIM17_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_TIM17_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_TIM17_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_TIM17_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_TIM17_Init+0x44>)
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_TIM17_Init+0x44>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_TIM17_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_TIM17_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_TIM17_Init+0x44>)
 8000832:	f005 f9dd 	bl	8005bf0 <HAL_TIM_Base_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800083c:	f000 f99c 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	24000140 	.word	0x24000140
 8000848:	40014800 	.word	0x40014800

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <MX_USART3_UART_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_USART3_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_USART3_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x90>)
 8000896:	f005 fc7d 	bl	8006194 <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f96a 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_USART3_UART_Init+0x90>)
 80008a8:	f006 fdb4 	bl	8007414 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f961 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x90>)
 80008ba:	f006 fde9 	bl	8007490 <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f958 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_USART3_UART_Init+0x90>)
 80008ca:	f006 fd6a 	bl	80073a2 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f950 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2400018c 	.word	0x2400018c
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b93      	ldr	r3, [pc, #588]	; (8000b58 <MX_GPIO_Init+0x264>)
 800090c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000910:	4a91      	ldr	r2, [pc, #580]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800091a:	4b8f      	ldr	r3, [pc, #572]	; (8000b58 <MX_GPIO_Init+0x264>)
 800091c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	623b      	str	r3, [r7, #32]
 8000926:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000928:	4b8b      	ldr	r3, [pc, #556]	; (8000b58 <MX_GPIO_Init+0x264>)
 800092a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092e:	4a8a      	ldr	r2, [pc, #552]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000938:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <MX_GPIO_Init+0x264>)
 800093a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000948:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094c:	4a82      	ldr	r2, [pc, #520]	; (8000b58 <MX_GPIO_Init+0x264>)
 800094e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000952:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000956:	4b80      	ldr	r3, [pc, #512]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000958:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000966:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096a:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <MX_GPIO_Init+0x264>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000974:	4b78      	ldr	r3, [pc, #480]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000976:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b75      	ldr	r3, [pc, #468]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000984:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000988:	4a73      	ldr	r2, [pc, #460]	; (8000b58 <MX_GPIO_Init+0x264>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000992:	4b71      	ldr	r3, [pc, #452]	; (8000b58 <MX_GPIO_Init+0x264>)
 8000994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a0:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a6:	4a6c      	ldr	r2, [pc, #432]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b0:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c4:	4a64      	ldr	r2, [pc, #400]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ce:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009dc:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e2:	4a5d      	ldr	r2, [pc, #372]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ec:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <MX_GPIO_Init+0x264>)
 80009ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a00:	4856      	ldr	r0, [pc, #344]	; (8000b5c <MX_GPIO_Init+0x268>)
 8000a02:	f002 f843 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2112      	movs	r1, #18
 8000a0a:	4855      	ldr	r0, [pc, #340]	; (8000b60 <MX_GPIO_Init+0x26c>)
 8000a0c:	f002 f83e 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a16:	4853      	ldr	r0, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x270>)
 8000a18:	f002 f838 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	21f0      	movs	r1, #240	; 0xf0
 8000a20:	4851      	ldr	r0, [pc, #324]	; (8000b68 <MX_GPIO_Init+0x274>)
 8000a22:	f002 f833 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4850      	ldr	r0, [pc, #320]	; (8000b6c <MX_GPIO_Init+0x278>)
 8000a2c:	f002 f82e 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	484a      	ldr	r0, [pc, #296]	; (8000b70 <MX_GPIO_Init+0x27c>)
 8000a46:	f001 fe71 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	483e      	ldr	r0, [pc, #248]	; (8000b5c <MX_GPIO_Init+0x268>)
 8000a64:	f001 fe62 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000a68:	2312      	movs	r3, #18
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4838      	ldr	r0, [pc, #224]	; (8000b60 <MX_GPIO_Init+0x26c>)
 8000a80:	f001 fe54 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a84:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4831      	ldr	r0, [pc, #196]	; (8000b64 <MX_GPIO_Init+0x270>)
 8000a9e:	f001 fe45 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482f      	ldr	r0, [pc, #188]	; (8000b74 <MX_GPIO_Init+0x280>)
 8000ab8:	f001 fe38 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_GPIO_Init+0x26c>)
 8000ad2:	f001 fe2b 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_GPIO_Init+0x26c>)
 8000af4:	f001 fe1a 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000af8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x26c>)
 8000b12:	f001 fe0b 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b16:	23f0      	movs	r3, #240	; 0xf0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MX_GPIO_Init+0x274>)
 8000b2e:	f001 fdfd 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b32:	2302      	movs	r3, #2
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_GPIO_Init+0x278>)
 8000b4a:	f001 fdef 	bl	800272c <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3738      	adds	r7, #56	; 0x38
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58021400 	.word	0x58021400
 8000b60:	58020000 	.word	0x58020000
 8000b64:	58020400 	.word	0x58020400
 8000b68:	58020c00 	.word	0x58020c00
 8000b6c:	58021000 	.word	0x58021000
 8000b70:	58020800 	.word	0x58020800
 8000b74:	58021800 	.word	0x58021800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	; 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	22b8      	movs	r2, #184	; 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f006 fd0f 	bl	80075fc <memset>
  if(hadc->Instance==ADC1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <HAL_ADC_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000bec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ff3b 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c24:	f7ff ffa8 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c3a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000c7e:	f001 fd55 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	; 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020000 	.word	0x58020000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_TIM_Base_MspInit+0x74>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10f      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000cac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000cbc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cc8:	e01b      	b.n	8000d02 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d116      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000cd6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cda:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x78>)
 8000ce6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2076      	movs	r0, #118	; 0x76
 8000cf8:	f001 fce3 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000cfc:	2076      	movs	r0, #118	; 0x76
 8000cfe:	f001 fcfa 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40014400 	.word	0x40014400
 8000d10:	58024400 	.word	0x58024400
 8000d14:	40014800 	.word	0x40014800

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0b8      	sub	sp, #224	; 0xe0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	22b8      	movs	r2, #184	; 0xb8
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 fc5f 	bl	80075fc <memset>
  if(huart->Instance==USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_UART_MspInit+0xc0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d142      	bne.n	8000dce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fe9c 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff ff09 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d68:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d72:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0xc8>)
 8000dca:	f001 fcaf 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	37e0      	adds	r7, #224	; 0xe0
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020c00 	.word	0x58020c00

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f957 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM17_IRQHandler+0x10>)
 8000e4a:	f004 ff99 	bl	8005d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000140 	.word	0x24000140

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 fb8e 	bl	80075a8 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	24100000 	.word	0x24100000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	2400021c 	.word	0x2400021c
 8000ec0:	24000238 	.word	0x24000238

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <SystemInit+0xd0>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <SystemInit+0xd0>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <SystemInit+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d807      	bhi.n	8000ef4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <SystemInit+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	4a2a      	ldr	r2, [pc, #168]	; (8000f98 <SystemInit+0xd4>)
 8000eee:	f043 0303 	orr.w	r3, r3, #3
 8000ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <SystemInit+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <SystemInit+0xd8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <SystemInit+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <SystemInit+0xd8>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4924      	ldr	r1, [pc, #144]	; (8000f9c <SystemInit+0xd8>)
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SystemInit+0xdc>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SystemInit+0xd4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <SystemInit+0xd4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 030f 	bic.w	r3, r3, #15
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SystemInit+0xd4>)
 8000f28:	f043 0303 	orr.w	r3, r3, #3
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <SystemInit+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <SystemInit+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <SystemInit+0xd8>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <SystemInit+0xe0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <SystemInit+0xd8>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <SystemInit+0xe4>)
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <SystemInit+0xd8>)
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <SystemInit+0xe8>)
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <SystemInit+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <SystemInit+0xd8>)
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <SystemInit+0xe8>)
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <SystemInit+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <SystemInit+0xd8>)
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <SystemInit+0xe8>)
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <SystemInit+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <SystemInit+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <SystemInit+0xd8>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <SystemInit+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <SystemInit+0xec>)
 8000f84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	52002000 	.word	0x52002000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa4:	02020200 	.word	0x02020200
 8000fa8:	01ff0000 	.word	0x01ff0000
 8000fac:	01010280 	.word	0x01010280
 8000fb0:	52004000 	.word	0x52004000

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff ff84 	bl	8000ec4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f006 fae7 	bl	80075b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff f9ed 	bl	80003c4 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000ff8:	08008218 	.word	0x08008218
  ldr r2, =_sbss
 8000ffc:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001000:	24000234 	.word	0x24000234

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f001 fb4c 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001014:	f002 fb68 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f814 	bl	8001080 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fd8f 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	0800819c 	.word	0x0800819c
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fb31 	bl	8002712 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c8:	f001 fafb 	bl	80026c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24000008 	.word	0x24000008

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2400000c 	.word	0x2400000c
 8001110:	24000220 	.word	0x24000220

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	24000220 	.word	0x24000220

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2400000c 	.word	0x2400000c

08001174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3360      	adds	r3, #96	; 0x60
 80011ee:	461a      	mov	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	430b      	orrs	r3, r1
 800120a:	431a      	orrs	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	611a      	str	r2, [r3, #16]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800124e:	b480      	push	{r7}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	431a      	orrs	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	601a      	str	r2, [r3, #0]
  }
}
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3330      	adds	r3, #48	; 0x30
 80012ba:	461a      	mov	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	4413      	add	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	211f      	movs	r1, #31
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	401a      	ands	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0e9b      	lsrs	r3, r3, #26
 80012e2:	f003 011f 	and.w	r1, r3, #31
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001302:	b480      	push	{r7}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3314      	adds	r3, #20
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	0e5b      	lsrs	r3, r3, #25
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	4413      	add	r3, r2
 8001320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	0d1b      	lsrs	r3, r3, #20
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	2107      	movs	r1, #7
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0d1b      	lsrs	r3, r3, #20
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	431a      	orrs	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0318 	and.w	r3, r3, #24
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <LL_ADC_SetChannelSingleDiff+0x44>)
 800137c:	40d9      	lsrs	r1, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	400b      	ands	r3, r1
 8001382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	000fffff 	.word	0x000fffff

080013a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6093      	str	r3, [r2, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	5fffffc0 	.word	0x5fffffc0

080013fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800140c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001410:	d101      	bne.n	8001416 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <LL_ADC_EnableInternalRegulator+0x24>)
 8001432:	4013      	ands	r3, r2
 8001434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	6fffffc0 	.word	0x6fffffc0

0800144c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <LL_ADC_Enable+0x24>)
 8001482:	4013      	ands	r3, r2
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	7fffffc0 	.word	0x7fffffc0

0800149c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <LL_ADC_IsEnabled+0x18>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <LL_ADC_IsEnabled+0x1a>
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_ADC_REG_StartConversion+0x24>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	7fffffc0 	.word	0x7fffffc0

080014ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d101      	bne.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b08      	cmp	r3, #8
 8001524:	d101      	bne.n	800152a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e138      	b.n	80017c4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fb29 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff3f 	bl	80013fc <LL_ADC_IsDeepPowerDownEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff25 	bl	80013d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff5a 	bl	800144c <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d114      	bne.n	80015c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff3e 	bl	8001424 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_ADC_Init+0x294>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <HAL_ADC_Init+0x298>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff3d 	bl	800144c <LL_ADC_IsInternalRegulatorEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0210 	orr.w	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff77 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 80015fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 80d2 	bne.w	80017b2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 80ce 	bne.w	80017b2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff36 	bl	800149c <LL_ADC_IsEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d110      	bne.n	8001658 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001636:	4867      	ldr	r0, [pc, #412]	; (80017d4 <HAL_ADC_Init+0x29c>)
 8001638:	f7ff ff30 	bl	800149c <LL_ADC_IsEnabled>
 800163c:	4604      	mov	r4, r0
 800163e:	4866      	ldr	r0, [pc, #408]	; (80017d8 <HAL_ADC_Init+0x2a0>)
 8001640:	f7ff ff2c 	bl	800149c <LL_ADC_IsEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	4323      	orrs	r3, r4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4619      	mov	r1, r3
 8001652:	4862      	ldr	r0, [pc, #392]	; (80017dc <HAL_ADC_Init+0x2a4>)
 8001654:	f7ff fd8e 	bl	8001174 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d5b      	ldrb	r3, [r3, #21]
 800165c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001662:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001668:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7f1b      	ldrb	r3, [r3, #28]
 800166e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7f1b      	ldrb	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d106      	bne.n	800168a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	3b01      	subs	r3, #1
 8001682:	045b      	lsls	r3, r3, #17
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_ADC_Init+0x2a8>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	69b9      	ldr	r1, [r7, #24]
 80016b6:	430b      	orrs	r3, r1
 80016b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff14 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 80016c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff21 	bl	8001512 <LL_ADC_INJ_IsConversionOngoing>
 80016d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d14a      	bne.n	800176e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d147      	bne.n	800176e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7d1b      	ldrb	r3, [r3, #20]
 80016e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_ADC_Init+0x2ac>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001706:	2b01      	cmp	r3, #1
 8001708:	d11b      	bne.n	8001742 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_ADC_Init+0x2b0>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800171e:	3a01      	subs	r2, #1
 8001720:	0411      	lsls	r1, r2, #16
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001732:	430a      	orrs	r2, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fd41 	bl	80021f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10c      	bne.n	8001790 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f023 010f 	bic.w	r1, r3, #15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	e007      	b.n	80017a0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 020f 	bic.w	r2, r2, #15
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f023 0303 	bic.w	r3, r3, #3
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
 80017b0:	e007      	b.n	80017c2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	24000000 	.word	0x24000000
 80017d0:	053e2d63 	.word	0x053e2d63
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022100 	.word	0x40022100
 80017dc:	40022300 	.word	0x40022300
 80017e0:	fff0c003 	.word	0xfff0c003
 80017e4:	ffffbffc 	.word	0xffffbffc
 80017e8:	fc00f81e 	.word	0xfc00f81e

080017ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f4:	4856      	ldr	r0, [pc, #344]	; (8001950 <HAL_ADC_Start+0x164>)
 80017f6:	f7ff fdd3 	bl	80013a0 <LL_ADC_GetMultimode>
 80017fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe73 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 809a 	bne.w	8001942 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_Start+0x30>
 8001818:	2302      	movs	r3, #2
 800181a:	e095      	b.n	8001948 <HAL_ADC_Start+0x15c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fc67 	bl	80020f8 <ADC_Enable>
 800182a:	4603      	mov	r3, r0
 800182c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 8081 	bne.w	8001938 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_ADC_Start+0x168>)
 800183c:	4013      	ands	r3, r2
 800183e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a43      	ldr	r2, [pc, #268]	; (8001958 <HAL_ADC_Start+0x16c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d002      	beq.n	8001856 <HAL_ADC_Start+0x6a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e000      	b.n	8001858 <HAL_ADC_Start+0x6c>
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_ADC_Start+0x170>)
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	4293      	cmp	r3, r2
 800185e:	d002      	beq.n	8001866 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	d106      	bne.n	800188e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	221c      	movs	r2, #28
 800189a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <HAL_ADC_Start+0x16c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d002      	beq.n	80018b4 <HAL_ADC_Start+0xc8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	e000      	b.n	80018b6 <HAL_ADC_Start+0xca>
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_ADC_Start+0x170>)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d008      	beq.n	80018d0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d002      	beq.n	80018d0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	d114      	bne.n	80018fa <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fde6 	bl	80014c4 <LL_ADC_REG_StartConversion>
 80018f8:	e025      	b.n	8001946 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_ADC_Start+0x16c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d002      	beq.n	8001916 <HAL_ADC_Start+0x12a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e000      	b.n	8001918 <HAL_ADC_Start+0x12c>
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_ADC_Start+0x170>)
 8001918:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00f      	beq.n	8001946 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
 8001936:	e006      	b.n	8001946 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001940:	e001      	b.n	8001946 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001942:	2302      	movs	r3, #2
 8001944:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001946:	7dfb      	ldrb	r3, [r7, #23]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40022300 	.word	0x40022300
 8001954:	fffff0fe 	.word	0xfffff0fe
 8001958:	40022100 	.word	0x40022100
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800196a:	4866      	ldr	r0, [pc, #408]	; (8001b04 <HAL_ADC_PollForConversion+0x1a4>)
 800196c:	f7ff fd18 	bl	80013a0 <LL_ADC_GetMultimode>
 8001970:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d102      	bne.n	8001980 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800197a:	2308      	movs	r3, #8
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e02a      	b.n	80019d6 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d002      	beq.n	8001992 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b09      	cmp	r3, #9
 8001990:	d111      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0a4      	b.n	8001afa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019b0:	2304      	movs	r3, #4
 80019b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019b4:	e00f      	b.n	80019d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019b6:	4853      	ldr	r0, [pc, #332]	; (8001b04 <HAL_ADC_PollForConversion+0x1a4>)
 80019b8:	f7ff fd00 	bl	80013bc <LL_ADC_GetMultiDMATransfer>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f043 0220 	orr.w	r2, r3, #32
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e093      	b.n	8001afa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019d2:	2304      	movs	r3, #4
 80019d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019d6:	f7ff fb9d 	bl	8001114 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019dc:	e021      	b.n	8001a22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e4:	d01d      	beq.n	8001a22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019e6:	f7ff fb95 	bl	8001114 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <HAL_ADC_PollForConversion+0x9c>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d112      	bne.n	8001a22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10b      	bne.n	8001a22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0204 	orr.w	r2, r3, #4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e06b      	b.n	8001afa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0d6      	beq.n	80019de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fc1f 	bl	8001284 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d5b      	ldrb	r3, [r3, #21]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d118      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d111      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <HAL_ADC_PollForConversion+0x1a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_PollForConversion+0x136>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e000      	b.n	8001a98 <HAL_ADC_PollForConversion+0x138>
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_ADC_PollForConversion+0x1ac>)
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d002      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b09      	cmp	r3, #9
 8001ab0:	d104      	bne.n	8001abc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e00c      	b.n	8001ad6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_ADC_PollForConversion+0x1a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d002      	beq.n	8001acc <HAL_ADC_PollForConversion+0x16c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e000      	b.n	8001ace <HAL_ADC_PollForConversion+0x16e>
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_ADC_PollForConversion+0x1ac>)
 8001ace:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d104      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e008      	b.n	8001af8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	220c      	movs	r2, #12
 8001af6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022300 	.word	0x40022300
 8001b08:	40022100 	.word	0x40022100
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b0a1      	sub	sp, #132	; 0x84
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a9a      	ldr	r2, [pc, #616]	; (8001db0 <HAL_ADC_ConfigChannel+0x284>)
 8001b46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x2a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e2bc      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x5a4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fcc2 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 82a1 	bne.w	80020b2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d108      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x62>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2201      	movs	r2, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	e016      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x90>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b9e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e003      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	69d1      	ldr	r1, [r2, #28]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7ff fb67 	bl	80012aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fc83 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001be6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fc90 	bl	8001512 <LL_ADC_INJ_IsConversionOngoing>
 8001bf2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80a0 	bne.w	8001d3c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 809c 	bne.w	8001d3c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f7ff fb76 	bl	8001302 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10b      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x110>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	e00a      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x126>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d027      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6919      	ldr	r1, [r3, #16]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6a:	f7ff fab7 	bl	80011dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	7e5b      	ldrb	r3, [r3, #25]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x158>
 8001c7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x15a>
 8001c84:	2300      	movs	r3, #0
 8001c86:	461a      	mov	r2, r3
 8001c88:	f7ff fae1 	bl	800124e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6919      	ldr	r1, [r3, #16]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7e1b      	ldrb	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x176>
 8001c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca0:	e000      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x178>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f7ff fab9 	bl	800121c <LL_ADC_SetDataRightShift>
 8001caa:	e047      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	069b      	lsls	r3, r3, #26
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	069b      	lsls	r3, r3, #26
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d16:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	069b      	lsls	r3, r3, #26
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fbab 	bl	800149c <LL_ADC_IsEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 81bb 	bne.w	80020c4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff fafc 	bl	8001358 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_ADC_ConfigChannel+0x284>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f040 8130 	bne.w	8001fcc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x268>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e01b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x2a0>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e005      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x290>
 8001db0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b09      	cmp	r3, #9
 8001dc4:	bf94      	ite	ls
 8001dc6:	2301      	movls	r3, #1
 8001dc8:	2300      	movhi	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d079      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x2c0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	069b      	lsls	r3, r3, #26
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	e015      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x2ec>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dfc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x30c>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	e017      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x33c>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e003      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x362>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	051b      	lsls	r3, r3, #20
 8001e8c:	e018      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x394>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	e07e      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x3b4>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	069b      	lsls	r3, r3, #26
 8001eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ede:	e015      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x3e0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x400>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	e017      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x430>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	61bb      	str	r3, [r7, #24]
  return result;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	ea42 0103 	orr.w	r1, r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x45c>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b1e      	subs	r3, #30
 8001f80:	051b      	lsls	r3, r3, #20
 8001f82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f86:	e01b      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x494>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	60fb      	str	r3, [r7, #12]
  return result;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 021f 	and.w	r2, r3, #31
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b1e      	subs	r3, #30
 8001fba:	051b      	lsls	r3, r3, #20
 8001fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6892      	ldr	r2, [r2, #8]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7ff f99b 	bl	8001302 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da77      	bge.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	4840      	ldr	r0, [pc, #256]	; (80020d8 <HAL_ADC_ConfigChannel+0x5ac>)
 8001fd6:	f7ff f8f3 	bl	80011c0 <LL_ADC_GetCommonPathInternalCh>
 8001fda:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fdc:	483f      	ldr	r0, [pc, #252]	; (80020dc <HAL_ADC_ConfigChannel+0x5b0>)
 8001fde:	f7ff fa5d 	bl	800149c <LL_ADC_IsEnabled>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	483e      	ldr	r0, [pc, #248]	; (80020e0 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fe6:	f7ff fa59 	bl	800149c <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4323      	orrs	r3, r4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d155      	bne.n	800209e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_ADC_ConfigChannel+0x5b8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d122      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x516>
 8001ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11d      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d159      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002016:	4619      	mov	r1, r3
 8002018:	482f      	ldr	r0, [pc, #188]	; (80020d8 <HAL_ADC_ConfigChannel+0x5ac>)
 800201a:	f7ff f8be 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_ADC_ConfigChannel+0x5c0>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002040:	e040      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d111      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x544>
 800204c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d131      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	4619      	mov	r1, r3
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <HAL_ADC_ConfigChannel+0x5ac>)
 800206a:	f7ff f896 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800206e:	e029      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d124      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11f      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800208e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002094:	4619      	mov	r1, r3
 8002096:	4810      	ldr	r0, [pc, #64]	; (80020d8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002098:	f7ff f87f 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
 800209c:	e012      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020b0:	e008      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3784      	adds	r7, #132	; 0x84
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	40022300 	.word	0x40022300
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40022100 	.word	0x40022100
 80020e4:	cb840000 	.word	0xcb840000
 80020e8:	24000000 	.word	0x24000000
 80020ec:	053e2d63 	.word	0x053e2d63
 80020f0:	bac04000 	.word	0xbac04000
 80020f4:	cfb80000 	.word	0xcfb80000

080020f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f9c9 	bl	800149c <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d161      	bne.n	80021d4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <ADC_Enable+0xe8>)
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e04d      	b.n	80021d6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f998 	bl	8001474 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002144:	f7fe ffe6 	bl	8001114 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800214a:	4826      	ldr	r0, [pc, #152]	; (80021e4 <ADC_Enable+0xec>)
 800214c:	f7ff f928 	bl	80013a0 <LL_ADC_GetMultimode>
 8002150:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <ADC_Enable+0xf0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d002      	beq.n	8002162 <ADC_Enable+0x6a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e000      	b.n	8002164 <ADC_Enable+0x6c>
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <ADC_Enable+0xf4>)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d02c      	beq.n	80021c6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d130      	bne.n	80021d4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002172:	e028      	b.n	80021c6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f98f 	bl	800149c <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f973 	bl	8001474 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800218e:	f7fe ffc1 	bl	8001114 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d914      	bls.n	80021c6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d00d      	beq.n	80021c6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e007      	b.n	80021d6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d1cf      	bne.n	8002174 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	8000003f 	.word	0x8000003f
 80021e4:	40022300 	.word	0x40022300
 80021e8:	40022100 	.word	0x40022100
 80021ec:	40022000 	.word	0x40022000

080021f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021f8:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <ADC_ConfigureBoostMode+0x188>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002204:	f001 fbea 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8002208:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002212:	d010      	beq.n	8002236 <ADC_ConfigureBoostMode+0x46>
 8002214:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002218:	d871      	bhi.n	80022fe <ADC_ConfigureBoostMode+0x10e>
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d002      	beq.n	8002226 <ADC_ConfigureBoostMode+0x36>
 8002220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002224:	d16b      	bne.n	80022fe <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c1b      	lsrs	r3, r3, #16
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	60fb      	str	r3, [r7, #12]
        break;
 8002234:	e066      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
        break;
 800223c:	e062      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800223e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002242:	f002 fb33 	bl	80048ac <HAL_RCCEx_GetPeriphCLKFreq>
 8002246:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002250:	d051      	beq.n	80022f6 <ADC_ConfigureBoostMode+0x106>
 8002252:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002256:	d854      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 8002258:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800225c:	d047      	beq.n	80022ee <ADC_ConfigureBoostMode+0xfe>
 800225e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002262:	d84e      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 8002264:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002268:	d03d      	beq.n	80022e6 <ADC_ConfigureBoostMode+0xf6>
 800226a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800226e:	d848      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 8002270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002274:	d033      	beq.n	80022de <ADC_ConfigureBoostMode+0xee>
 8002276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800227a:	d842      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 800227c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002280:	d029      	beq.n	80022d6 <ADC_ConfigureBoostMode+0xe6>
 8002282:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002286:	d83c      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 8002288:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800228c:	d01a      	beq.n	80022c4 <ADC_ConfigureBoostMode+0xd4>
 800228e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002292:	d836      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 8002294:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002298:	d014      	beq.n	80022c4 <ADC_ConfigureBoostMode+0xd4>
 800229a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800229e:	d830      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 80022a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a4:	d00e      	beq.n	80022c4 <ADC_ConfigureBoostMode+0xd4>
 80022a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022aa:	d82a      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 80022ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022b0:	d008      	beq.n	80022c4 <ADC_ConfigureBoostMode+0xd4>
 80022b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022b6:	d824      	bhi.n	8002302 <ADC_ConfigureBoostMode+0x112>
 80022b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022bc:	d002      	beq.n	80022c4 <ADC_ConfigureBoostMode+0xd4>
 80022be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022c2:	d11e      	bne.n	8002302 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
        break;
 80022d4:	e016      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
        break;
 80022dc:	e012      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	60fb      	str	r3, [r7, #12]
        break;
 80022e4:	e00e      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	60fb      	str	r3, [r7, #12]
        break;
 80022ec:	e00a      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	09db      	lsrs	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]
        break;
 80022f4:	e006      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
        break;
 80022fc:	e002      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
        break;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002302:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <ADC_ConfigureBoostMode+0x18c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d808      	bhi.n	8002324 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002320:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002322:	e025      	b.n	8002370 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <ADC_ConfigureBoostMode+0x190>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d80a      	bhi.n	8002342 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	e016      	b.n	8002370 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <ADC_ConfigureBoostMode+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d80a      	bhi.n	8002360 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
}
 800235e:	e007      	b.n	8002370 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022300 	.word	0x40022300
 800237c:	005f5e10 	.word	0x005f5e10
 8002380:	00bebc20 	.word	0x00bebc20
 8002384:	017d7840 	.word	0x017d7840

08002388 <LL_ADC_IsEnabled>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <LL_ADC_IsEnabled+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_IsEnabled+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_REG_IsConversionOngoing>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b09f      	sub	sp, #124	; 0x7c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e080      	b.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80023fe:	2300      	movs	r3, #0
 8002400:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a3d      	ldr	r2, [pc, #244]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d102      	bne.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	e001      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e05f      	b.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ffb9 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 800243c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ffb3 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d141      	bne.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	2b00      	cmp	r3, #0
 8002452:	d13e      	bne.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	431a      	orrs	r2, r3
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002472:	4822      	ldr	r0, [pc, #136]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002474:	f7ff ff88 	bl	8002388 <LL_ADC_IsEnabled>
 8002478:	4604      	mov	r4, r0
 800247a:	4821      	ldr	r0, [pc, #132]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800247c:	f7ff ff84 	bl	8002388 <LL_ADC_IsEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	4323      	orrs	r3, r4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d12e      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800248e:	4013      	ands	r3, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	6811      	ldr	r1, [r2, #0]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	430a      	orrs	r2, r1
 800249a:	431a      	orrs	r2, r3
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024a0:	e021      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ae:	4813      	ldr	r0, [pc, #76]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80024b0:	f7ff ff6a 	bl	8002388 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80024b8:	f7ff ff66 	bl	8002388 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d0:	e009      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024e4:	e000      	b.n	80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	377c      	adds	r7, #124	; 0x7c
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	40022000 	.word	0x40022000
 8002500:	40022100 	.word	0x40022100
 8002504:	40022300 	.word	0x40022300
 8002508:	fffff0e0 	.word	0xfffff0e0

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <__NVIC_SetPriorityGrouping+0x40>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x40>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00
 8002550:	05fa0000 	.word	0x05fa0000

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800268c:	f7ff ff8e 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff29 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff40 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff90 	bl	8002600 <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5f 	bl	80025ac <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff33 	bl	8002570 <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa4 	bl	8002668 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_GPIO_Init+0x234>)
 800273c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800273e:	e194      	b.n	8002a6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8186 	beq.w	8002a64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d005      	beq.n	8002770 <HAL_GPIO_Init+0x44>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d130      	bne.n	80027d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027a6:	2201      	movs	r2, #1
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0201 	and.w	r2, r3, #1
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d017      	beq.n	800280e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d123      	bne.n	8002862 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80e0 	beq.w	8002a64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_GPIO_Init+0x238>)
 80028a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80028aa:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_GPIO_Init+0x238>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_GPIO_Init+0x238>)
 80028b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <HAL_GPIO_Init+0x23c>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_GPIO_Init+0x240>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d052      	beq.n	8002994 <HAL_GPIO_Init+0x268>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_GPIO_Init+0x244>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_GPIO_Init+0x22e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_GPIO_Init+0x248>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x22a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_GPIO_Init+0x24c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x226>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_GPIO_Init+0x250>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x222>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_GPIO_Init+0x254>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x21e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_GPIO_Init+0x258>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x21a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x25c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x216>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_GPIO_Init+0x260>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_GPIO_Init+0x264>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x20e>
 8002936:	2309      	movs	r3, #9
 8002938:	e02d      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800293a:	230a      	movs	r3, #10
 800293c:	e02b      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800293e:	2308      	movs	r3, #8
 8002940:	e029      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 8002942:	2307      	movs	r3, #7
 8002944:	e027      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 8002946:	2306      	movs	r3, #6
 8002948:	e025      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800294a:	2305      	movs	r3, #5
 800294c:	e023      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800294e:	2304      	movs	r3, #4
 8002950:	e021      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 8002952:	2303      	movs	r3, #3
 8002954:	e01f      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 8002956:	2302      	movs	r3, #2
 8002958:	e01d      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800295a:	2301      	movs	r3, #1
 800295c:	e01b      	b.n	8002996 <HAL_GPIO_Init+0x26a>
 800295e:	bf00      	nop
 8002960:	58000080 	.word	0x58000080
 8002964:	58024400 	.word	0x58024400
 8002968:	58000400 	.word	0x58000400
 800296c:	58020000 	.word	0x58020000
 8002970:	58020400 	.word	0x58020400
 8002974:	58020800 	.word	0x58020800
 8002978:	58020c00 	.word	0x58020c00
 800297c:	58021000 	.word	0x58021000
 8002980:	58021400 	.word	0x58021400
 8002984:	58021800 	.word	0x58021800
 8002988:	58021c00 	.word	0x58021c00
 800298c:	58022000 	.word	0x58022000
 8002990:	58022400 	.word	0x58022400
 8002994:	2300      	movs	r3, #0
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	f002 0203 	and.w	r2, r2, #3
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	4093      	lsls	r3, r2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a6:	4938      	ldr	r1, [pc, #224]	; (8002a88 <HAL_GPIO_Init+0x35c>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f ae63 	bne.w	8002740 <HAL_GPIO_Init+0x14>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	3724      	adds	r7, #36	; 0x24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	58000400 	.word	0x58000400

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d00a      	beq.n	8002aea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e040      	b.n	8002b68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e03e      	b.n	8002b68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002af2:	491f      	ldr	r1, [pc, #124]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002afa:	f7fe fb0b 	bl	8001114 <HAL_GetTick>
 8002afe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b00:	e009      	b.n	8002b16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b02:	f7fe fb07 	bl	8001114 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b10:	d901      	bls.n	8002b16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e028      	b.n	8002b68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b22:	d1ee      	bne.n	8002b02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b1e      	cmp	r3, #30
 8002b28:	d008      	beq.n	8002b3c <HAL_PWREx_ConfigSupply+0x7c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b2e:	d005      	beq.n	8002b3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b1d      	cmp	r3, #29
 8002b34:	d002      	beq.n	8002b3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b2d      	cmp	r3, #45	; 0x2d
 8002b3a:	d114      	bne.n	8002b66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b3c:	f7fe faea 	bl	8001114 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b42:	e009      	b.n	8002b58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b44:	f7fe fae6 	bl	8001114 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b52:	d901      	bls.n	8002b58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d1ee      	bne.n	8002b44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58024800 	.word	0x58024800

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e3f4      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80b3 	beq.w	8002cfa <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b94:	4b95      	ldr	r3, [pc, #596]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9e:	4b93      	ldr	r3, [pc, #588]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_OscConfig+0x46>
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	2b18      	cmp	r3, #24
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8098 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x184>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 8093 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e3cc      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x7a>
 8002be0:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a81      	ldr	r2, [pc, #516]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e058      	b.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d112      	bne.n	8002c1c <HAL_RCC_OscConfig+0xa8>
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7c      	ldr	r2, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7a      	ldr	r3, [pc, #488]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a79      	ldr	r2, [pc, #484]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b77      	ldr	r3, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a76      	ldr	r2, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e041      	b.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c26:	4b71      	ldr	r3, [pc, #452]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a70      	ldr	r2, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6e      	ldr	r3, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6d      	ldr	r2, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e029      	b.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002c54:	d112      	bne.n	8002c7c <HAL_RCC_OscConfig+0x108>
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a64      	ldr	r2, [pc, #400]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a61      	ldr	r2, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5e      	ldr	r2, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e011      	b.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b55      	ldr	r3, [pc, #340]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fa34 	bl	8001114 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa30 	bl	8001114 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e356      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x13c>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fa20 	bl	8001114 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fa1c 	bl	8001114 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e342      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x164>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 808d 	beq.w	8002e22 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d08:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1ba>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b18      	cmp	r3, #24
 8002d22:	d137      	bne.n	8002d94 <HAL_RCC_OscConfig+0x220>
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d132      	bne.n	8002d94 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e314      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0219 	bic.w	r2, r3, #25
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4926      	ldr	r1, [pc, #152]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d58:	f7fe f9dc 	bl	8001114 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d60:	f7fe f9d8 	bl	8001114 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e2fe      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4917      	ldr	r1, [pc, #92]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d92:	e046      	b.n	8002e22 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d029      	beq.n	8002df0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 0219 	bic.w	r2, r3, #25
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4910      	ldr	r1, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe f9b1 	bl	8001114 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe f9ad 	bl	8001114 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e2d3      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	4902      	ldr	r1, [pc, #8]	; (8002dec <HAL_RCC_OscConfig+0x278>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e01b      	b.n	8002e22 <HAL_RCC_OscConfig+0x2ae>
 8002dea:	bf00      	nop
 8002dec:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df0:	4b97      	ldr	r3, [pc, #604]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a96      	ldr	r2, [pc, #600]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f98a 	bl	8001114 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe f986 	bl	8001114 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2ac      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e16:	4b8e      	ldr	r3, [pc, #568]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06a      	beq.n	8002f04 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2e:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e38:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d007      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2e0>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	d11b      	bne.n	8002e82 <HAL_RCC_OscConfig+0x30e>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d116      	bne.n	8002e82 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e281      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	4975      	ldr	r1, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e80:	e040      	b.n	8002f04 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d023      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e8a:	4b71      	ldr	r3, [pc, #452]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a70      	ldr	r2, [pc, #448]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe f93d 	bl	8001114 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e9e:	f7fe f939 	bl	8001114 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e25f      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb0:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4961      	ldr	r1, [pc, #388]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
 8002ed0:	e018      	b.n	8002f04 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe f919 	bl	8001114 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f915 	bl	8001114 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e23b      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d036      	beq.n	8002f7e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d019      	beq.n	8002f4c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f18:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe f8f6 	bl	8001114 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe f8f2 	bl	8001114 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e218      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3e:	4b44      	ldr	r3, [pc, #272]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x3b8>
 8002f4a:	e018      	b.n	8002f7e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe f8dc 	bl	8001114 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe f8d8 	bl	8001114 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1fe      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d036      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d019      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f8b9 	bl	8001114 <HAL_GetTick>
 8002fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fa6:	f7fe f8b5 	bl	8001114 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1db      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x432>
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a21      	ldr	r2, [pc, #132]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe f89f 	bl	8001114 <HAL_GetTick>
 8002fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fda:	f7fe f89b 	bl	8001114 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1c1      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80af 	beq.w	8003164 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x4e0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_RCC_OscConfig+0x4e0>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003012:	f7fe f87f 	bl	8001114 <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800301a:	f7fe f87b 	bl	8001114 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	; 0x64
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a1      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_OscConfig+0x4e0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10b      	bne.n	8003058 <HAL_RCC_OscConfig+0x4e4>
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_RCC_OscConfig+0x4dc>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	e05b      	b.n	8003106 <HAL_RCC_OscConfig+0x592>
 800304e:	bf00      	nop
 8003050:	58024400 	.word	0x58024400
 8003054:	58024800 	.word	0x58024800
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d112      	bne.n	8003086 <HAL_RCC_OscConfig+0x512>
 8003060:	4b9d      	ldr	r3, [pc, #628]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a9c      	ldr	r2, [pc, #624]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a99      	ldr	r2, [pc, #612]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	4b97      	ldr	r3, [pc, #604]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a96      	ldr	r2, [pc, #600]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	e03f      	b.n	8003106 <HAL_RCC_OscConfig+0x592>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x540>
 800308e:	4b92      	ldr	r3, [pc, #584]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a91      	ldr	r2, [pc, #580]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a8e      	ldr	r2, [pc, #568]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a8b      	ldr	r2, [pc, #556]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
 80030b2:	e028      	b.n	8003106 <HAL_RCC_OscConfig+0x592>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b85      	cmp	r3, #133	; 0x85
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x56e>
 80030bc:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a85      	ldr	r2, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	4b83      	ldr	r3, [pc, #524]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a82      	ldr	r2, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a7f      	ldr	r2, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	e011      	b.n	8003106 <HAL_RCC_OscConfig+0x592>
 80030e2:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a7c      	ldr	r2, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a79      	ldr	r2, [pc, #484]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	4b77      	ldr	r3, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a76      	ldr	r2, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d015      	beq.n	800313a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe f801 	bl	8001114 <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fd fffd 	bl	8001114 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e121      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ee      	beq.n	8003116 <HAL_RCC_OscConfig+0x5a2>
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fd ffeb 	bl	8001114 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd ffe7 	bl	8001114 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e10b      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003158:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ee      	bne.n	8003142 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8100 	beq.w	800336e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800316e:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003176:	2b18      	cmp	r3, #24
 8003178:	f000 80bb 	beq.w	80032f2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 8095 	bne.w	80032b0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a53      	ldr	r2, [pc, #332]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800318c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fd ffbf 	bl	8001114 <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319a:	f7fd ffbb 	bl	8001114 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0e1      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ac:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b8:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80031ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x768>)
 80031be:	4013      	ands	r3, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	430a      	orrs	r2, r1
 80031cc:	4942      	ldr	r1, [pc, #264]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	628b      	str	r3, [r1, #40]	; 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	3b01      	subs	r3, #1
 80031e2:	025b      	lsls	r3, r3, #9
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	3b01      	subs	r3, #1
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	3b01      	subs	r3, #1
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003202:	4935      	ldr	r1, [pc, #212]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003204:	4313      	orrs	r3, r2
 8003206:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a32      	ldr	r2, [pc, #200]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003220:	00d2      	lsls	r2, r2, #3
 8003222:	492d      	ldr	r1, [pc, #180]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003224:	4313      	orrs	r3, r2
 8003226:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	f023 020c 	bic.w	r2, r3, #12
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4928      	ldr	r1, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003236:	4313      	orrs	r3, r2
 8003238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800323a:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	f023 0202 	bic.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4924      	ldr	r1, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003248:	4313      	orrs	r3, r2
 800324a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800324c:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800325e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003264:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800326a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 8003282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd ff44 	bl	8001114 <HAL_GetTick>
 800328c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd ff40 	bl	8001114 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e066      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x71c>
 80032ae:	e05e      	b.n	800336e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <HAL_RCC_OscConfig+0x764>)
 80032b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd ff2a 	bl	8001114 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd ff26 	bl	8001114 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d908      	bls.n	80032e4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04c      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
 80032dc:	fffffc0c 	.word	0xfffffc0c
 80032e0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x804>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e9      	bne.n	80032c4 <HAL_RCC_OscConfig+0x750>
 80032f0:	e03d      	b.n	800336e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_OscConfig+0x804>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_RCC_OscConfig+0x804>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b01      	cmp	r3, #1
 8003304:	d031      	beq.n	800336a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d12a      	bne.n	800336a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d122      	bne.n	800336a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d11a      	bne.n	800336a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	0a5b      	lsrs	r3, r3, #9
 8003338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d111      	bne.n	800336a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d108      	bne.n	800336a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	58024400 	.word	0x58024400

0800337c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e19c      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	4985      	ldr	r1, [pc, #532]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e184      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d8:	429a      	cmp	r2, r3
 80033da:	d908      	bls.n	80033ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4975      	ldr	r1, [pc, #468]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003406:	429a      	cmp	r2, r3
 8003408:	d908      	bls.n	800341c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	496a      	ldr	r1, [pc, #424]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003418:	4313      	orrs	r3, r2
 800341a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003434:	429a      	cmp	r2, r3
 8003436:	d908      	bls.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	495e      	ldr	r1, [pc, #376]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003446:	4313      	orrs	r3, r2
 8003448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d010      	beq.n	8003478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003462:	429a      	cmp	r2, r3
 8003464:	d908      	bls.n	8003478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003466:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4953      	ldr	r1, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003474:	4313      	orrs	r3, r2
 8003476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	429a      	cmp	r2, r3
 8003492:	d908      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f023 020f 	bic.w	r2, r3, #15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4947      	ldr	r1, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d055      	beq.n	800355e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4940      	ldr	r1, [pc, #256]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034cc:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d121      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0f6      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0ea      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0de      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0d6      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f023 0207 	bic.w	r2, r3, #7
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4925      	ldr	r1, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fdf1 	bl	8001114 <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003534:	e00a      	b.n	800354c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003536:	f7fd fded 	bl	8001114 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0be      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	429a      	cmp	r2, r3
 800355c:	d1eb      	bne.n	8003536 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	429a      	cmp	r2, r3
 8003578:	d208      	bcs.n	800358c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f023 020f 	bic.w	r2, r3, #15
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x244>)
 8003588:	4313      	orrs	r3, r2
 800358a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d214      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 020f 	bic.w	r2, r3, #15
 80035a2:	4906      	ldr	r1, [pc, #24]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_RCC_ClockConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e086      	b.n	80036ca <HAL_RCC_ClockConfig+0x34e>
 80035bc:	52002000 	.word	0x52002000
 80035c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035dc:	429a      	cmp	r2, r3
 80035de:	d208      	bcs.n	80035f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035e0:	4b3c      	ldr	r3, [pc, #240]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	4939      	ldr	r1, [pc, #228]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360a:	429a      	cmp	r2, r3
 800360c:	d208      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	492e      	ldr	r1, [pc, #184]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 800361c:	4313      	orrs	r3, r2
 800361e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003638:	429a      	cmp	r2, r3
 800363a:	d208      	bcs.n	800364e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 800364a:	4313      	orrs	r3, r2
 800364c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003666:	429a      	cmp	r2, r3
 8003668:	d208      	bcs.n	800367c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4917      	ldr	r1, [pc, #92]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003678:	4313      	orrs	r3, r2
 800367a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800367c:	f000 f834 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x35c>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
 8003698:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x358>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <HAL_RCC_ClockConfig+0x35c>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x360>)
 80036b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x364>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_ClockConfig+0x368>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fcde 	bl	8001080 <HAL_InitTick>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
 80036d8:	0800819c 	.word	0x0800819c
 80036dc:	24000004 	.word	0x24000004
 80036e0:	24000000 	.word	0x24000000
 80036e4:	24000008 	.word	0x24000008

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ee:	4bb3      	ldr	r3, [pc, #716]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f6:	2b18      	cmp	r3, #24
 80036f8:	f200 8155 	bhi.w	80039a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003769 	.word	0x08003769
 8003708:	080039a7 	.word	0x080039a7
 800370c:	080039a7 	.word	0x080039a7
 8003710:	080039a7 	.word	0x080039a7
 8003714:	080039a7 	.word	0x080039a7
 8003718:	080039a7 	.word	0x080039a7
 800371c:	080039a7 	.word	0x080039a7
 8003720:	080039a7 	.word	0x080039a7
 8003724:	0800378f 	.word	0x0800378f
 8003728:	080039a7 	.word	0x080039a7
 800372c:	080039a7 	.word	0x080039a7
 8003730:	080039a7 	.word	0x080039a7
 8003734:	080039a7 	.word	0x080039a7
 8003738:	080039a7 	.word	0x080039a7
 800373c:	080039a7 	.word	0x080039a7
 8003740:	080039a7 	.word	0x080039a7
 8003744:	08003795 	.word	0x08003795
 8003748:	080039a7 	.word	0x080039a7
 800374c:	080039a7 	.word	0x080039a7
 8003750:	080039a7 	.word	0x080039a7
 8003754:	080039a7 	.word	0x080039a7
 8003758:	080039a7 	.word	0x080039a7
 800375c:	080039a7 	.word	0x080039a7
 8003760:	080039a7 	.word	0x080039a7
 8003764:	0800379b 	.word	0x0800379b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003768:	4b94      	ldr	r3, [pc, #592]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003786:	e111      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003788:	4b8d      	ldr	r3, [pc, #564]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800378a:	61bb      	str	r3, [r7, #24]
    break;
 800378c:	e10e      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800378e:	4b8d      	ldr	r3, [pc, #564]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003790:	61bb      	str	r3, [r7, #24]
    break;
 8003792:	e10b      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003796:	61bb      	str	r3, [r7, #24]
    break;
 8003798:	e108      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800379a:	4b88      	ldr	r3, [pc, #544]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80037a4:	4b85      	ldr	r3, [pc, #532]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037b0:	4b82      	ldr	r3, [pc, #520]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037ba:	4b80      	ldr	r3, [pc, #512]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80e1 	beq.w	80039a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f000 8083 	beq.w	80038ec <HAL_RCC_GetSysClockFreq+0x204>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f200 80a1 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x248>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x114>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d056      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037fa:	e099      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037fc:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003808:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	4a6b      	ldr	r2, [pc, #428]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a02 	vldr	s12, [r7, #8]
 8003846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003862:	e087      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b51      	ldr	r3, [pc, #324]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a02 	vldr	s12, [r7, #8]
 800388a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a6:	e065      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b40      	ldr	r3, [pc, #256]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ea:	e043      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800392e:	e021      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a02 	vldr	s12, [r7, #8]
 8003956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003972:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	3301      	adds	r3, #1
 8003980:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800398c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003998:	ee17 3a90 	vmov	r3, s15
 800399c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800399e:	e005      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
    break;
 80039a4:	e002      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a8:	61bb      	str	r3, [r7, #24]
    break;
 80039aa:	bf00      	nop
  }

  return sysclockfreq;
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
 80039c0:	03d09000 	.word	0x03d09000
 80039c4:	003d0900 	.word	0x003d0900
 80039c8:	007a1200 	.word	0x007a1200
 80039cc:	46000000 	.word	0x46000000
 80039d0:	4c742400 	.word	0x4c742400
 80039d4:	4a742400 	.word	0x4a742400
 80039d8:	4af42400 	.word	0x4af42400

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80039e2:	f7ff fe81 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490f      	ldr	r1, [pc, #60]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	0800819c 	.word	0x0800819c
 8003a34:	24000004 	.word	0x24000004
 8003a38:	24000000 	.word	0x24000000

08003a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003a40:	f7ff ffcc 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4904      	ldr	r1, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	58024400 	.word	0x58024400
 8003a64:	0800819c 	.word	0x0800819c

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003a6c:	f7ff ffb6 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4904      	ldr	r1, [pc, #16]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	0800819c 	.word	0x0800819c

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d03f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab8:	d02a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003abe:	d824      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac4:	d018      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aca:	d81e      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ad6:	e018      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b9f      	ldr	r3, [pc, #636]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a9e      	ldr	r2, [pc, #632]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ae4:	e015      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2102      	movs	r1, #2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 ff1b 	bl	8005928 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003af6:	e00c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 ffc4 	bl	8005a8c <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	498c      	ldr	r1, [pc, #560]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	650b      	str	r3, [r1, #80]	; 0x50
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d03d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d826      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b61 	.word	0x08003b61
 8003b50:	08003b6f 	.word	0x08003b6f
 8003b54:	08003b81 	.word	0x08003b81
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003b99 	.word	0x08003b99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b60:	4b7d      	ldr	r3, [pc, #500]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	4a7c      	ldr	r2, [pc, #496]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b6c:	e015      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fed7 	bl	8005928 <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b7e:	e00c      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 ff80 	bl	8005a8c <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
      break;
 8003b96:	e000      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	f023 0207 	bic.w	r2, r3, #7
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	496a      	ldr	r1, [pc, #424]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb2:	e001      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003bcc:	d031      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003bce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003bd2:	d82b      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd8:	d02d      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d825      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003be0:	2bc0      	cmp	r3, #192	; 0xc0
 8003be2:	d02a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003be4:	2bc0      	cmp	r3, #192	; 0xc0
 8003be6:	d821      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d016      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d81d      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d007      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003bf8:	e018      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfa:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003c06:	e019      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 fe8a 	bl	8005928 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003c18:	e010      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3324      	adds	r3, #36	; 0x24
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 ff33 	bl	8005a8c <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003c2a:	e007      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	4942      	ldr	r1, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	650b      	str	r3, [r1, #80]	; 0x50
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04f      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c6e:	d036      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003c70:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c74:	d830      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d032      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c80:	d82a      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003c82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c86:	d02e      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003c88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d018      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c98:	d81e      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca2:	d007      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003cb2:	e019      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fe34 	bl	8005928 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003cc4:	e010      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fedd 	bl	8005a8c <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003cd6:	e007      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	4917      	ldr	r1, [pc, #92]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	650b      	str	r3, [r1, #80]	; 0x50
 8003d00:	e001      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d034      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d16:	2b30      	cmp	r3, #48	; 0x30
 8003d18:	d01c      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003d1a:	2b30      	cmp	r3, #48	; 0x30
 8003d1c:	d817      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d00c      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d813      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d10f      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003d3a:	e010      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fdf0 	bl	8005928 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003d4c:	e007      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d58:	58024400 	.word	0x58024400
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d64:	4b9b      	ldr	r3, [pc, #620]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	4998      	ldr	r1, [pc, #608]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d047      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d90:	d030      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d96:	d82a      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d9c:	d02c      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da2:	d824      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da8:	d018      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d81e      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d007      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003dba:	e018      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbc:	4b85      	ldr	r3, [pc, #532]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	4a84      	ldr	r2, [pc, #528]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dc8:	e017      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fda9 	bl	8005928 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dda:	e00e      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fe52 	bl	8005a8c <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dec:	e005      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e00:	4b74      	ldr	r3, [pc, #464]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	4971      	ldr	r1, [pc, #452]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	650b      	str	r3, [r1, #80]	; 0x50
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d049      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d02e      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e32:	d828      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e38:	d02a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e3e:	d822      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e44:	d026      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e4a:	d81c      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e50:	d010      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e56:	d816      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01d      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d111      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 fd5d 	bl	8005928 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e72:	e012      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3324      	adds	r3, #36	; 0x24
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fe06 	bl	8005a8c <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e84:	e009      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e004      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003e90:	bf00      	nop
 8003e92:	e002      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eac:	4949      	ldr	r1, [pc, #292]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8003eb2:	e001      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d053      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ece:	d034      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ed0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ed4:	d82e      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eda:	d030      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d02c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef2:	d028      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fd06 	bl	8005928 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f20:	e014      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fdaf 	bl	8005a8c <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f32:	e00b      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e008      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f60:	491c      	ldr	r1, [pc, #112]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	658b      	str	r3, [r1, #88]	; 0x58
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d031      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f80:	d00e      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f86:	d814      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fcbe 	bl	8005928 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	4901      	ldr	r1, [pc, #4]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d032      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d81b      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	08004009 	.word	0x08004009
 8004000:	08004017 	.word	0x08004017
 8004004:	0800402f 	.word	0x0800402f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4bb2      	ldr	r3, [pc, #712]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4ab1      	ldr	r2, [pc, #708]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004014:	e00c      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fc83 	bl	8005928 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004026:	e003      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
      break;
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800402e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004036:	4ba7      	ldr	r3, [pc, #668]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	49a4      	ldr	r1, [pc, #656]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004044:	4313      	orrs	r3, r2
 8004046:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004048:	e001      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8086 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800405c:	4b9e      	ldr	r3, [pc, #632]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a9d      	ldr	r2, [pc, #628]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004068:	f7fd f854 	bl	8001114 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406e:	e009      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fd f850 	bl	8001114 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d902      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	75fb      	strb	r3, [r7, #23]
        break;
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ef      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d166      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004096:	4b8f      	ldr	r3, [pc, #572]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040a0:	4053      	eors	r3, r2
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040aa:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b4:	4b87      	ldr	r3, [pc, #540]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a86      	ldr	r2, [pc, #536]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c0:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a83      	ldr	r2, [pc, #524]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040cc:	4a81      	ldr	r2, [pc, #516]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d115      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fd f819 	bl	8001114 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e4:	e00b      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd f815 	bl	8001114 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	75fb      	strb	r3, [r7, #23]
            break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040fe:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ed      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d126      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411e:	d10d      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004120:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800412e:	0919      	lsrs	r1, r3, #4
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004132:	400b      	ands	r3, r1
 8004134:	4967      	ldr	r1, [pc, #412]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800413c:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004142:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004146:	6113      	str	r3, [r2, #16]
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	495f      	ldr	r1, [pc, #380]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004158:	4313      	orrs	r3, r2
 800415a:	670b      	str	r3, [r1, #112]	; 0x70
 800415c:	e004      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	75bb      	strb	r3, [r7, #22]
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d07f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	2b28      	cmp	r3, #40	; 0x28
 800417c:	d866      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	08004253 	.word	0x08004253
 8004188:	0800424d 	.word	0x0800424d
 800418c:	0800424d 	.word	0x0800424d
 8004190:	0800424d 	.word	0x0800424d
 8004194:	0800424d 	.word	0x0800424d
 8004198:	0800424d 	.word	0x0800424d
 800419c:	0800424d 	.word	0x0800424d
 80041a0:	0800424d 	.word	0x0800424d
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800424d 	.word	0x0800424d
 80041ac:	0800424d 	.word	0x0800424d
 80041b0:	0800424d 	.word	0x0800424d
 80041b4:	0800424d 	.word	0x0800424d
 80041b8:	0800424d 	.word	0x0800424d
 80041bc:	0800424d 	.word	0x0800424d
 80041c0:	0800424d 	.word	0x0800424d
 80041c4:	0800423b 	.word	0x0800423b
 80041c8:	0800424d 	.word	0x0800424d
 80041cc:	0800424d 	.word	0x0800424d
 80041d0:	0800424d 	.word	0x0800424d
 80041d4:	0800424d 	.word	0x0800424d
 80041d8:	0800424d 	.word	0x0800424d
 80041dc:	0800424d 	.word	0x0800424d
 80041e0:	0800424d 	.word	0x0800424d
 80041e4:	08004253 	.word	0x08004253
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004253 	.word	0x08004253
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
 8004218:	0800424d 	.word	0x0800424d
 800421c:	0800424d 	.word	0x0800424d
 8004220:	0800424d 	.word	0x0800424d
 8004224:	08004253 	.word	0x08004253
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fb7a 	bl	8005928 <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fc23 	bl	8005a8c <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800425a:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004268:	491a      	ldr	r1, [pc, #104]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800426a:	4313      	orrs	r3, r2
 800426c:	654b      	str	r3, [r1, #84]	; 0x54
 800426e:	e001      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004284:	2b05      	cmp	r3, #5
 8004286:	d821      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042e1 	.word	0x080042e1
 8004294:	080042a9 	.word	0x080042a9
 8004298:	080042bb 	.word	0x080042bb
 800429c:	080042e1 	.word	0x080042e1
 80042a0:	080042e1 	.word	0x080042e1
 80042a4:	080042e1 	.word	0x080042e1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 fb3a 	bl	8005928 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042b8:	e013      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3324      	adds	r3, #36	; 0x24
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fbe3 	bl	8005a8c <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042ca:	e00a      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
      break;
 80042d0:	e007      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80042d2:	bf00      	nop
 80042d4:	58024400 	.word	0x58024400
 80042d8:	58024800 	.word	0x58024800
 80042dc:	00ffffcf 	.word	0x00ffffcf
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042e8:	4b9f      	ldr	r3, [pc, #636]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f023 0207 	bic.w	r2, r3, #7
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	499c      	ldr	r1, [pc, #624]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	654b      	str	r3, [r1, #84]	; 0x54
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d039      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	2b05      	cmp	r3, #5
 8004314:	d820      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	0800435f 	.word	0x0800435f
 8004320:	08004335 	.word	0x08004335
 8004324:	08004347 	.word	0x08004347
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800435f 	.word	0x0800435f
 8004330:	0800435f 	.word	0x0800435f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f001 faf4 	bl	8005928 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004344:	e00c      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3324      	adds	r3, #36	; 0x24
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fb9d 	bl	8005a8c <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004356:	e003      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
      break;
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800435e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004366:	4b80      	ldr	r3, [pc, #512]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f023 0207 	bic.w	r2, r3, #7
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004374:	497c      	ldr	r1, [pc, #496]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	658b      	str	r3, [r1, #88]	; 0x58
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d04b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004396:	d02e      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800439c:	d828      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d02a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x966>
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d822      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80043aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ae:	d026      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80043b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043b4:	d81c      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80043b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ba:	d010      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c0:	d816      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ca:	d111      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 faa8 	bl	8005928 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043dc:	e012      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3324      	adds	r3, #36	; 0x24
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fb51 	bl	8005a8c <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043ee:	e009      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e006      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80043f6:	bf00      	nop
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b57      	ldr	r3, [pc, #348]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	4953      	ldr	r1, [pc, #332]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	654b      	str	r3, [r1, #84]	; 0x54
 800441e:	e001      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d04b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004436:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800443a:	d02e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800443c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004440:	d828      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	d02a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d822      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800444e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004452:	d026      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004458:	d81c      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445e:	d010      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d816      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01d      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446e:	d111      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fa56 	bl	8005928 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004480:	e012      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f001 faff 	bl	8005a8c <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800449a:	bf00      	nop
 800449c:	e004      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80044a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044bc:	492a      	ldr	r1, [pc, #168]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	658b      	str	r3, [r1, #88]	; 0x58
 80044c2:	e001      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d04d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044de:	d02e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80044e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044e4:	d828      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ea:	d02a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d822      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80044f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044f6:	d026      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80044f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044fc:	d81c      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004502:	d010      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004508:	d816      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01d      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d111      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fa04 	bl	8005928 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004524:	e012      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3324      	adds	r3, #36	; 0x24
 800452a:	2102      	movs	r1, #2
 800452c:	4618      	mov	r0, r3
 800452e:	f001 faad 	bl	8005a8c <RCCEx_PLL3_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
      break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800454a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004560:	4901      	ldr	r1, [pc, #4]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	658b      	str	r3, [r1, #88]	; 0x58
 8004566:	e003      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d10a      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3324      	adds	r3, #36	; 0x24
 800458c:	2102      	movs	r1, #2
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fa7c 	bl	8005a8c <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800459e:	4b8c      	ldr	r3, [pc, #560]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	4988      	ldr	r1, [pc, #544]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3324      	adds	r3, #36	; 0x24
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 fa5b 	bl	8005a8c <RCCEx_PLL3_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045e0:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ee:	4978      	ldr	r1, [pc, #480]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d034      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460a:	d01d      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800460c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004610:	d817      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d009      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800461c:	e011      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f97f 	bl	8005928 <RCCEx_PLL2_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800462e:	e00c      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3324      	adds	r3, #36	; 0x24
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fa28 	bl	8005a8c <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
      break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004650:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800465e:	495c      	ldr	r1, [pc, #368]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	658b      	str	r3, [r1, #88]	; 0x58
 8004664:	e001      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d033      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004680:	d01c      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004686:	d816      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468c:	d003      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800468e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004692:	d007      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004694:	e00f      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004696:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	4a4d      	ldr	r2, [pc, #308]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800469c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80046a2:	e00c      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 f9ee 	bl	8005a8c <RCCEx_PLL3_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80046b4:	e003      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80046bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d2:	493f      	ldr	r1, [pc, #252]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	654b      	str	r3, [r1, #84]	; 0x54
 80046d8:	e001      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d029      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d007      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80046f8:	e00f      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fa:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004704:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004706:	e00b      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f001 f90a 	bl	8005928 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004718:	e002      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
      break;
 800471e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4927      	ldr	r1, [pc, #156]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004738:	e001      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3324      	adds	r3, #36	; 0x24
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f99b 	bl	8005a8c <RCCEx_PLL3_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d035      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004776:	d017      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477c:	d811      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800477e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004782:	d013      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d80b      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	d106      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80047a0:	e007      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
      break;
 80047a6:	e004      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	4902      	ldr	r1, [pc, #8]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	654b      	str	r3, [r1, #84]	; 0x54
 80047cc:	e004      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e4:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f0:	492d      	ldr	r1, [pc, #180]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004802:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004806:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480e:	4926      	ldr	r1, [pc, #152]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004810:	4313      	orrs	r3, r2
 8004812:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004820:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	491e      	ldr	r1, [pc, #120]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800482e:	4313      	orrs	r3, r2
 8004830:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004848:	6113      	str	r3, [r2, #16]
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004854:	4914      	ldr	r1, [pc, #80]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004856:	4313      	orrs	r3, r2
 8004858:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da08      	bge.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004870:	4313      	orrs	r3, r2
 8004872:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	4906      	ldr	r1, [pc, #24]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004890:	4313      	orrs	r3, r2
 8004892:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004894:	7dbb      	ldrb	r3, [r7, #22]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400

080048ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b090      	sub	sp, #64	; 0x40
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	f040 8089 	bne.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80048be:	4b91      	ldr	r3, [pc, #580]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d87d      	bhi.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048e9 	.word	0x080048e9
 80048d8:	0800490d 	.word	0x0800490d
 80048dc:	08004931 	.word	0x08004931
 80048e0:	080049c5 	.word	0x080049c5
 80048e4:	08004955 	.word	0x08004955
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048e8:	4b86      	ldr	r3, [pc, #536]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f4:	d107      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fec2 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004904:	e3f4      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800490a:	e3f1      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800490c:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d107      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800491a:	f107 0318 	add.w	r3, r7, #24
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fc08 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004928:	e3e2      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800492e:	e3df      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004930:	4b74      	ldr	r3, [pc, #464]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493c:	d107      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd4a 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800494c:	e3d0      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004952:	e3cd      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004954:	4b6b      	ldr	r3, [pc, #428]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800495c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800495e:	4b69      	ldr	r3, [pc, #420]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d10c      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	4a63      	ldr	r2, [pc, #396]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004982:	e01e      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004984:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d106      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004998:	d102      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800499a:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499e:	e010      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049a0:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b4:	d102      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049b6:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049c0:	e396      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80049c2:	e395      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c8:	e392      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ce:	e38f      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d6:	f040 809f 	bne.w	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d04d      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	f200 8084 	bhi.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2bc0      	cmp	r3, #192	; 0xc0
 80049fa:	d07d      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004a00:	d87d      	bhi.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d02d      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d877      	bhi.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d012      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004a1a:	e070      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a28:	d107      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fe28 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a38:	e35a      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a3e:	e357      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a40:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a4e:	f107 0318 	add.w	r3, r7, #24
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb6e 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a5c:	e348      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a62:	e345      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a70:	d107      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fcb0 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a80:	e336      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a86:	e333      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	08db      	lsrs	r3, r3, #3
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab6:	e01e      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ab8:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d106      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	e010      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004af4:	e2fc      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004af6:	e2fb      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004afc:	e2f8      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b02:	e2f5      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004b04:	58024400 	.word	0x58024400
 8004b08:	03d09000 	.word	0x03d09000
 8004b0c:	003d0900 	.word	0x003d0900
 8004b10:	007a1200 	.word	0x007a1200
 8004b14:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	f040 809c 	bne.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004b22:	4b9d      	ldr	r3, [pc, #628]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b32:	d054      	beq.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	f200 808b 	bhi.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b44:	f000 8083 	beq.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b4e:	f200 8081 	bhi.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d02f      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d878      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6e:	d012      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004b70:	e070      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b72:	4b89      	ldr	r3, [pc, #548]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fd7d 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b8e:	e2af      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b94:	e2ac      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b96:	4b80      	ldr	r3, [pc, #512]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ba4:	f107 0318 	add.w	r3, r7, #24
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fac3 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb2:	e29d      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb8:	e29a      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bba:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fc05 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bd6:	e28b      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bdc:	e288      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004be8:	4b6b      	ldr	r3, [pc, #428]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d10c      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bfa:	4b67      	ldr	r3, [pc, #412]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	08db      	lsrs	r3, r3, #3
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0c:	e01e      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c0e:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c22:	d102      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c24:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	e010      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c36:	d106      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3e:	d102      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c40:	4b58      	ldr	r3, [pc, #352]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004c4a:	e251      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c4c:	e250      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c4e:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c52:	e24d      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c58:	e24a      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	f040 80a7 	bne.w	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004c64:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c74:	d055      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7c:	f200 8096 	bhi.w	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c86:	f000 8084 	beq.w	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c90:	f200 808c 	bhi.w	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d030      	beq.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca2:	f200 8083 	bhi.w	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d012      	beq.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004cb4:	e07a      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cb6:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fcdb 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cd2:	e20d      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd8:	e20a      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cda:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce8:	f107 0318 	add.w	r3, r7, #24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa21 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cf6:	e1fb      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cfc:	e1f8      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fb63 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d1a:	e1e9      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d20:	e1e6      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d50:	e01e      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d66:	d102      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6c:	e010      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d82:	d102      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d88:	e002      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d8e:	e1af      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d90:	e1ae      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d96:	e1ab      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	03d09000 	.word	0x03d09000
 8004da0:	003d0900 	.word	0x003d0900
 8004da4:	007a1200 	.word	0x007a1200
 8004da8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004db0:	e19e      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004db8:	d173      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004dba:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dca:	d02f      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd2:	d863      	bhi.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d012      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8004de2:	e05b      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004de4:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df0:	d107      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004df2:	f107 0318 	add.w	r3, r7, #24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f99c 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e00:	e176      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e06:	e173      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e08:	4b89      	ldr	r3, [pc, #548]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e14:	d107      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fade 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e24:	e164      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e2a:	e161      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e2c:	4b80      	ldr	r3, [pc, #512]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e36:	4b7e      	ldr	r3, [pc, #504]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e48:	4b79      	ldr	r3, [pc, #484]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	4a78      	ldr	r2, [pc, #480]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5a:	e01e      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e5c:	4b74      	ldr	r3, [pc, #464]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e68:	d106      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e70:	d102      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e72:	4b71      	ldr	r3, [pc, #452]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e76:	e010      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e78:	4b6d      	ldr	r3, [pc, #436]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e8e:	4b6b      	ldr	r3, [pc, #428]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e98:	e12a      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004e9a:	e129      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea0:	e126      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d133      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004eaa:	4b61      	ldr	r3, [pc, #388]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d012      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004ec2:	e023      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ec4:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbd4 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ee0:	e106      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee6:	e103      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ee8:	4b51      	ldr	r3, [pc, #324]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f91a 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f04:	e0f4      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e0f1      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f10:	e0ee      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f18:	f040 809b 	bne.w	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004f1c:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004f2c:	f000 808b 	beq.w	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004f36:	f200 8089 	bhi.w	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f40:	d06c      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f48:	f200 8080 	bhi.w	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f52:	d056      	beq.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d877      	bhi.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f62:	d03b      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f6a:	d86f      	bhi.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d021      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7a:	d867      	bhi.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f88:	d004      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8004f8a:	e05f      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f8c:	f000 f8bc 	bl	8005108 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f90:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004f92:	e0ad      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fa2:	f107 0318 	add.w	r3, r7, #24
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f8c4 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fb0:	e09e      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb6:	e09b      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa06 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fd4:	e08c      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fda:	e089      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d109      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ffa:	e079      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005000:	e076      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500e:	d102      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005014:	e06c      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800501a:	e069      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800502e:	e05f      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	003d0900 	.word	0x003d0900
 800503c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005044:	e054      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504a:	e051      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005050:	e04e      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	d148      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506a:	d02a      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005072:	d838      	bhi.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005080:	d00d      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005082:	e030      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005090:	d102      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005096:	e02b      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800509c:	e028      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050aa:	d107      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fae7 	bl	8005684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050ba:	e019      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c0:	e016      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ce:	d107      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d0:	f107 0318 	add.w	r3, r7, #24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f82d 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050de:	e007      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e4:	e004      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ea:	e001      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80050f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3740      	adds	r7, #64	; 0x40
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	00bb8000 	.word	0x00bb8000
 8005100:	58024400 	.word	0x58024400
 8005104:	007a1200 	.word	0x007a1200

08005108 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800510c:	f7fe fc66 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	0800819c 	.word	0x0800819c

08005134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800513c:	4ba1      	ldr	r3, [pc, #644]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005146:	4b9f      	ldr	r3, [pc, #636]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	0b1b      	lsrs	r3, r3, #12
 800514c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005150:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005152:	4b9c      	ldr	r3, [pc, #624]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800515e:	4b99      	ldr	r3, [pc, #612]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8111 	beq.w	80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b02      	cmp	r3, #2
 8005186:	f000 8083 	beq.w	8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b02      	cmp	r3, #2
 800518e:	f200 80a1 	bhi.w	80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d056      	beq.n	800524c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800519e:	e099      	b.n	80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051a0:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d02d      	beq.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051ac:	4b85      	ldr	r3, [pc, #532]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	08db      	lsrs	r3, r3, #3
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	4a84      	ldr	r2, [pc, #528]	; (80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	ee07 3a90 	vmov	s15, r3
 80051c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b7b      	ldr	r3, [pc, #492]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005206:	e087      	b.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a03 	vldr	s12, [r7, #12]
 800522e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800524a:	e065      	b.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525e:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005272:	eddf 5a56 	vldr	s11, [pc, #344]	; 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800528e:	e043      	b.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800529e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a2:	4b48      	ldr	r3, [pc, #288]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052d2:	e021      	b.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e6:	4b37      	ldr	r3, [pc, #220]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005316:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	0a5b      	lsrs	r3, r3, #9
 800531e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800532e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005332:	edd7 6a07 	vldr	s13, [r7, #28]
 8005336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800533e:	ee17 2a90 	vmov	r2, s15
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005346:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800535c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005360:	edd7 6a07 	vldr	s13, [r7, #28]
 8005364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536c:	ee17 2a90 	vmov	r2, s15
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	0e1b      	lsrs	r3, r3, #24
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800538a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539a:	ee17 2a90 	vmov	r2, s15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
}
 80053b6:	bf00      	nop
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	58024400 	.word	0x58024400
 80053c8:	03d09000 	.word	0x03d09000
 80053cc:	46000000 	.word	0x46000000
 80053d0:	4c742400 	.word	0x4c742400
 80053d4:	4a742400 	.word	0x4a742400
 80053d8:	4af42400 	.word	0x4af42400

080053dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053e4:	4ba1      	ldr	r3, [pc, #644]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80053ee:	4b9f      	ldr	r3, [pc, #636]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	0d1b      	lsrs	r3, r3, #20
 80053f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053fa:	4b9c      	ldr	r3, [pc, #624]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005406:	4b99      	ldr	r3, [pc, #612]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8111 	beq.w	800564c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	f000 8083 	beq.w	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f200 80a1 	bhi.w	800557c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d056      	beq.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005446:	e099      	b.n	800557c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005448:	4b88      	ldr	r3, [pc, #544]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02d      	beq.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005454:	4b85      	ldr	r3, [pc, #532]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	4a84      	ldr	r2, [pc, #528]	; (8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b7b      	ldr	r3, [pc, #492]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005492:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054ae:	e087      	b.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c2:	4b6a      	ldr	r3, [pc, #424]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054f2:	e065      	b.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005506:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005516:	ed97 6a03 	vldr	s12, [r7, #12]
 800551a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800551e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005536:	e043      	b.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	4b48      	ldr	r3, [pc, #288]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555a:	ed97 6a03 	vldr	s12, [r7, #12]
 800555e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800557a:	e021      	b.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b37      	ldr	r3, [pc, #220]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80055c0:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	0a5b      	lsrs	r3, r3, #9
 80055c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055da:	edd7 6a07 	vldr	s13, [r7, #28]
 80055de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e6:	ee17 2a90 	vmov	r2, s15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80055ee:	4b1f      	ldr	r3, [pc, #124]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005608:	edd7 6a07 	vldr	s13, [r7, #28]
 800560c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005614:	ee17 2a90 	vmov	r2, s15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800561c:	4b13      	ldr	r3, [pc, #76]	; (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	0e1b      	lsrs	r3, r3, #24
 8005622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005636:	edd7 6a07 	vldr	s13, [r7, #28]
 800563a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005642:	ee17 2a90 	vmov	r2, s15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800564a:	e008      	b.n	800565e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	bf00      	nop
 8005660:	3724      	adds	r7, #36	; 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	03d09000 	.word	0x03d09000
 8005674:	46000000 	.word	0x46000000
 8005678:	4c742400 	.word	0x4c742400
 800567c:	4a742400 	.word	0x4a742400
 8005680:	4af42400 	.word	0x4af42400

08005684 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005684:	b480      	push	{r7}
 8005686:	b089      	sub	sp, #36	; 0x24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800568c:	4ba0      	ldr	r3, [pc, #640]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005696:	4b9e      	ldr	r3, [pc, #632]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	091b      	lsrs	r3, r3, #4
 800569c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80056a2:	4b9b      	ldr	r3, [pc, #620]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056ac:	4b98      	ldr	r3, [pc, #608]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	08db      	lsrs	r3, r3, #3
 80056b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8111 	beq.w	80058f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f000 8083 	beq.w	80057de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	f200 80a1 	bhi.w	8005822 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d056      	beq.n	800579a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80056ec:	e099      	b.n	8005822 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ee:	4b88      	ldr	r3, [pc, #544]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02d      	beq.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056fa:	4b85      	ldr	r3, [pc, #532]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	08db      	lsrs	r3, r3, #3
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	4a83      	ldr	r2, [pc, #524]	; (8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005724:	4b7a      	ldr	r3, [pc, #488]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005734:	ed97 6a03 	vldr	s12, [r7, #12]
 8005738:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800573c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005750:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005754:	e087      	b.n	8005866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005760:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800591c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005768:	4b69      	ldr	r3, [pc, #420]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005778:	ed97 6a03 	vldr	s12, [r7, #12]
 800577c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800578c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005798:	e065      	b.n	8005866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005920 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80057a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ac:	4b58      	ldr	r3, [pc, #352]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057dc:	e043      	b.n	8005866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005924 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80057ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f0:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005800:	ed97 6a03 	vldr	s12, [r7, #12]
 8005804:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005820:	e021      	b.n	8005866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800591c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005834:	4b36      	ldr	r3, [pc, #216]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005844:	ed97 6a03 	vldr	s12, [r7, #12]
 8005848:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800584c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005864:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005866:	4b2a      	ldr	r3, [pc, #168]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	0a5b      	lsrs	r3, r3, #9
 800586c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800587c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005880:	edd7 6a07 	vldr	s13, [r7, #28]
 8005884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588c:	ee17 2a90 	vmov	r2, s15
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	0c1b      	lsrs	r3, r3, #16
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ba:	ee17 2a90 	vmov	r2, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e8:	ee17 2a90 	vmov	r2, s15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058f0:	e008      	b.n	8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3724      	adds	r7, #36	; 0x24
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	58024400 	.word	0x58024400
 8005914:	03d09000 	.word	0x03d09000
 8005918:	46000000 	.word	0x46000000
 800591c:	4c742400 	.word	0x4c742400
 8005920:	4a742400 	.word	0x4a742400
 8005924:	4af42400 	.word	0x4af42400

08005928 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005936:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d101      	bne.n	8005946 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e099      	b.n	8005a7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005946:	4b4f      	ldr	r3, [pc, #316]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a4e      	ldr	r2, [pc, #312]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 800594c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005952:	f7fb fbdf 	bl	8001114 <HAL_GetTick>
 8005956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005958:	e008      	b.n	800596c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800595a:	f7fb fbdb 	bl	8001114 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e086      	b.n	8005a7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800596c:	4b45      	ldr	r3, [pc, #276]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f0      	bne.n	800595a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005978:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	031b      	lsls	r3, r3, #12
 8005986:	493f      	ldr	r1, [pc, #252]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	628b      	str	r3, [r1, #40]	; 0x28
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	3b01      	subs	r3, #1
 8005992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	3b01      	subs	r3, #1
 800599c:	025b      	lsls	r3, r3, #9
 800599e:	b29b      	uxth	r3, r3
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059bc:	4931      	ldr	r1, [pc, #196]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059c2:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	492d      	ldr	r1, [pc, #180]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059d4:	4b2b      	ldr	r3, [pc, #172]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	f023 0220 	bic.w	r2, r3, #32
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	4928      	ldr	r1, [pc, #160]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059f2:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <RCCEx_PLL2_Config+0x160>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	69d2      	ldr	r2, [r2, #28]
 80059fe:	00d2      	lsls	r2, r2, #3
 8005a00:	4920      	ldr	r1, [pc, #128]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a06:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	f043 0310 	orr.w	r3, r3, #16
 8005a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a18:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a24:	e00f      	b.n	8005a46 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d106      	bne.n	8005a3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a2c:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a14      	ldr	r2, [pc, #80]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a38:	e005      	b.n	8005a46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a11      	ldr	r2, [pc, #68]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a52:	f7fb fb5f 	bl	8001114 <HAL_GetTick>
 8005a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a58:	e008      	b.n	8005a6c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a5a:	f7fb fb5b 	bl	8001114 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e006      	b.n	8005a7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <RCCEx_PLL2_Config+0x15c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	58024400 	.word	0x58024400
 8005a88:	ffff0007 	.word	0xffff0007

08005a8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a9a:	4b53      	ldr	r3, [pc, #332]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d101      	bne.n	8005aaa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e099      	b.n	8005bde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005aaa:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4e      	ldr	r2, [pc, #312]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab6:	f7fb fb2d 	bl	8001114 <HAL_GetTick>
 8005aba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005abe:	f7fb fb29 	bl	8001114 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e086      	b.n	8005bde <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f0      	bne.n	8005abe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005adc:	4b42      	ldr	r3, [pc, #264]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	051b      	lsls	r3, r3, #20
 8005aea:	493f      	ldr	r1, [pc, #252]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	628b      	str	r3, [r1, #40]	; 0x28
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	041b      	lsls	r3, r3, #16
 8005b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b20:	4931      	ldr	r1, [pc, #196]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	492d      	ldr	r1, [pc, #180]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	4928      	ldr	r1, [pc, #160]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b4a:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5a:	4b24      	ldr	r3, [pc, #144]	; (8005bec <RCCEx_PLL3_Config+0x160>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	69d2      	ldr	r2, [r2, #28]
 8005b62:	00d2      	lsls	r2, r2, #3
 8005b64:	4920      	ldr	r1, [pc, #128]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a19      	ldr	r2, [pc, #100]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b88:	e00f      	b.n	8005baa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b90:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b9c:	e005      	b.n	8005baa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb6:	f7fb faad 	bl	8001114 <HAL_GetTick>
 8005bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bbc:	e008      	b.n	8005bd0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bbe:	f7fb faa9 	bl	8001114 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e006      	b.n	8005bde <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <RCCEx_PLL3_Config+0x15c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400
 8005bec:	ffff0007 	.word	0xffff0007

08005bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e049      	b.n	8005c96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb f83e 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 f9f8 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e04c      	b.n	8005d52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <HAL_TIM_Base_Start+0xc0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d022      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d01d      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_TIM_Base_Start+0xc4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d018      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <HAL_TIM_Base_Start+0xc8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <HAL_TIM_Base_Start+0xcc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00e      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <HAL_TIM_Base_Start+0xd0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <HAL_TIM_Base_Start+0xd4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <HAL_TIM_Base_Start+0x70>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <HAL_TIM_Base_Start+0xd8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d115      	bne.n	8005d3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_TIM_Base_Start+0xdc>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b06      	cmp	r3, #6
 8005d20:	d015      	beq.n	8005d4e <HAL_TIM_Base_Start+0xae>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d28:	d011      	beq.n	8005d4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3a:	e008      	b.n	8005d4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40001800 	.word	0x40001800
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	00010007 	.word	0x00010007

08005d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0202 	mvn.w	r2, #2
 8005dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f90f 	bl	8005fe6 <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f901 	bl	8005fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f912 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0204 	mvn.w	r2, #4
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8e5 	bl	8005fe6 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8d7 	bl	8005fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8e8 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0208 	mvn.w	r2, #8
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8bb 	bl	8005fe6 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8ad 	bl	8005fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8be 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0210 	mvn.w	r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2208      	movs	r2, #8
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f891 	bl	8005fe6 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f883 	bl	8005fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f894 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0201 	mvn.w	r2, #1
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f85d 	bl	8005fbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1c:	2b80      	cmp	r3, #128	; 0x80
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f91e 	bl	800616c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d10e      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d107      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f911 	bl	8006180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d10e      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f842 	bl	800600e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d10e      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d107      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0220 	mvn.w	r2, #32
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8d1 	bl	8006158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a40      	ldr	r2, [pc, #256]	; (8006138 <TIM_Base_SetConfig+0x114>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d00f      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3d      	ldr	r2, [pc, #244]	; (800613c <TIM_Base_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3c      	ldr	r2, [pc, #240]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <TIM_Base_SetConfig+0x120>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <TIM_Base_SetConfig+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01f      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d01b      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2c      	ldr	r2, [pc, #176]	; (800613c <TIM_Base_SetConfig+0x118>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d017      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2b      	ldr	r2, [pc, #172]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <TIM_Base_SetConfig+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00f      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a29      	ldr	r2, [pc, #164]	; (8006148 <TIM_Base_SetConfig+0x124>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <TIM_Base_SetConfig+0x128>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a27      	ldr	r2, [pc, #156]	; (8006150 <TIM_Base_SetConfig+0x12c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a26      	ldr	r2, [pc, #152]	; (8006154 <TIM_Base_SetConfig+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <TIM_Base_SetConfig+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00f      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a11      	ldr	r2, [pc, #68]	; (800614c <TIM_Base_SetConfig+0x128>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a10      	ldr	r2, [pc, #64]	; (8006150 <TIM_Base_SetConfig+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0f      	ldr	r2, [pc, #60]	; (8006154 <TIM_Base_SetConfig+0x130>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d103      	bne.n	8006124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e042      	b.n	800622c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fa fdad 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2224      	movs	r2, #36	; 0x24
 80061c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8c2 	bl	8006360 <UART_SetConfig>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e022      	b.n	800622c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 ff22 	bl	8007038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 ffa9 	bl	800717c <UART_CheckIdleState>
 800622a:	4603      	mov	r3, r0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	; 0x28
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624a:	2b20      	cmp	r3, #32
 800624c:	f040 8083 	bne.w	8006356 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_UART_Transmit+0x28>
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e07b      	b.n	8006358 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_UART_Transmit+0x3a>
 800626a:	2302      	movs	r3, #2
 800626c:	e074      	b.n	8006358 <HAL_UART_Transmit+0x124>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2221      	movs	r2, #33	; 0x21
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006286:	f7fa ff45 	bl	8001114 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a4:	d108      	bne.n	80062b8 <HAL_UART_Transmit+0x84>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e003      	b.n	80062c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062c8:	e02c      	b.n	8006324 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 ff9c 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e039      	b.n	8006358 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3302      	adds	r3, #2
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e007      	b.n	8006312 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1cc      	bne.n	80062ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 ff69 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e006      	b.n	8006358 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006364:	b092      	sub	sp, #72	; 0x48
 8006366:	af00      	add	r7, sp, #0
 8006368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	431a      	orrs	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	431a      	orrs	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	4313      	orrs	r3, r2
 8006386:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4bbe      	ldr	r3, [pc, #760]	; (8006688 <UART_SetConfig+0x328>)
 8006390:	4013      	ands	r3, r2
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006398:	430b      	orrs	r3, r1
 800639a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4ab3      	ldr	r2, [pc, #716]	; (800668c <UART_SetConfig+0x32c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c8:	4313      	orrs	r3, r2
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	4baf      	ldr	r3, [pc, #700]	; (8006690 <UART_SetConfig+0x330>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063dc:	430b      	orrs	r3, r1
 80063de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f023 010f 	bic.w	r1, r3, #15
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4aa6      	ldr	r2, [pc, #664]	; (8006694 <UART_SetConfig+0x334>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d177      	bne.n	80064f0 <UART_SetConfig+0x190>
 8006400:	4ba5      	ldr	r3, [pc, #660]	; (8006698 <UART_SetConfig+0x338>)
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006408:	2b28      	cmp	r3, #40	; 0x28
 800640a:	d86d      	bhi.n	80064e8 <UART_SetConfig+0x188>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0xb4>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064e9 	.word	0x080064e9
 800641c:	080064e9 	.word	0x080064e9
 8006420:	080064e9 	.word	0x080064e9
 8006424:	080064e9 	.word	0x080064e9
 8006428:	080064e9 	.word	0x080064e9
 800642c:	080064e9 	.word	0x080064e9
 8006430:	080064e9 	.word	0x080064e9
 8006434:	080064c1 	.word	0x080064c1
 8006438:	080064e9 	.word	0x080064e9
 800643c:	080064e9 	.word	0x080064e9
 8006440:	080064e9 	.word	0x080064e9
 8006444:	080064e9 	.word	0x080064e9
 8006448:	080064e9 	.word	0x080064e9
 800644c:	080064e9 	.word	0x080064e9
 8006450:	080064e9 	.word	0x080064e9
 8006454:	080064c9 	.word	0x080064c9
 8006458:	080064e9 	.word	0x080064e9
 800645c:	080064e9 	.word	0x080064e9
 8006460:	080064e9 	.word	0x080064e9
 8006464:	080064e9 	.word	0x080064e9
 8006468:	080064e9 	.word	0x080064e9
 800646c:	080064e9 	.word	0x080064e9
 8006470:	080064e9 	.word	0x080064e9
 8006474:	080064d1 	.word	0x080064d1
 8006478:	080064e9 	.word	0x080064e9
 800647c:	080064e9 	.word	0x080064e9
 8006480:	080064e9 	.word	0x080064e9
 8006484:	080064e9 	.word	0x080064e9
 8006488:	080064e9 	.word	0x080064e9
 800648c:	080064e9 	.word	0x080064e9
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064d9 	.word	0x080064d9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064e9 	.word	0x080064e9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064e9 	.word	0x080064e9
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e326      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064c0:	2304      	movs	r3, #4
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e322      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064c8:	2308      	movs	r3, #8
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e31e      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e31a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064d8:	2320      	movs	r3, #32
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e316      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e312      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e30e      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a69      	ldr	r2, [pc, #420]	; (800669c <UART_SetConfig+0x33c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d130      	bne.n	800655c <UART_SetConfig+0x1fc>
 80064fa:	4b67      	ldr	r3, [pc, #412]	; (8006698 <UART_SetConfig+0x338>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b05      	cmp	r3, #5
 8006504:	d826      	bhi.n	8006554 <UART_SetConfig+0x1f4>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x1ac>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006525 	.word	0x08006525
 8006510:	0800652d 	.word	0x0800652d
 8006514:	08006535 	.word	0x08006535
 8006518:	0800653d 	.word	0x0800653d
 800651c:	08006545 	.word	0x08006545
 8006520:	0800654d 	.word	0x0800654d
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e2f0      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e2ec      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e2e8      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e2e4      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006544:	2320      	movs	r3, #32
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e2e0      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800654c:	2340      	movs	r3, #64	; 0x40
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e2dc      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e2d8      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a4f      	ldr	r2, [pc, #316]	; (80066a0 <UART_SetConfig+0x340>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d130      	bne.n	80065c8 <UART_SetConfig+0x268>
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <UART_SetConfig+0x338>)
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2b05      	cmp	r3, #5
 8006570:	d826      	bhi.n	80065c0 <UART_SetConfig+0x260>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x218>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006591 	.word	0x08006591
 800657c:	08006599 	.word	0x08006599
 8006580:	080065a1 	.word	0x080065a1
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b9 	.word	0x080065b9
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e2ba      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e2b6      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e2b2      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e2ae      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065b0:	2320      	movs	r3, #32
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e2aa      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e2a6      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e2a2      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <UART_SetConfig+0x344>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d130      	bne.n	8006634 <UART_SetConfig+0x2d4>
 80065d2:	4b31      	ldr	r3, [pc, #196]	; (8006698 <UART_SetConfig+0x338>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d826      	bhi.n	800662c <UART_SetConfig+0x2cc>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x284>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e284      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e280      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e27c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e278      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800661c:	2320      	movs	r3, #32
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e274      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e270      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e26c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <UART_SetConfig+0x348>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d142      	bne.n	80066c4 <UART_SetConfig+0x364>
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <UART_SetConfig+0x338>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b05      	cmp	r3, #5
 8006648:	d838      	bhi.n	80066bc <UART_SetConfig+0x35c>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x2f0>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006669 	.word	0x08006669
 8006654:	08006671 	.word	0x08006671
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	080066ad 	.word	0x080066ad
 8006664:	080066b5 	.word	0x080066b5
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e24e      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e24a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e246      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e242      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006688:	cfff69f3 	.word	0xcfff69f3
 800668c:	58000c00 	.word	0x58000c00
 8006690:	11fff4ff 	.word	0x11fff4ff
 8006694:	40011000 	.word	0x40011000
 8006698:	58024400 	.word	0x58024400
 800669c:	40004400 	.word	0x40004400
 80066a0:	40004800 	.word	0x40004800
 80066a4:	40004c00 	.word	0x40004c00
 80066a8:	40005000 	.word	0x40005000
 80066ac:	2320      	movs	r3, #32
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e22c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e228      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e224      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4ab1      	ldr	r2, [pc, #708]	; (8006990 <UART_SetConfig+0x630>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d176      	bne.n	80067bc <UART_SetConfig+0x45c>
 80066ce:	4bb1      	ldr	r3, [pc, #708]	; (8006994 <UART_SetConfig+0x634>)
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d6:	2b28      	cmp	r3, #40	; 0x28
 80066d8:	d86c      	bhi.n	80067b4 <UART_SetConfig+0x454>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x380>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006785 	.word	0x08006785
 80066e4:	080067b5 	.word	0x080067b5
 80066e8:	080067b5 	.word	0x080067b5
 80066ec:	080067b5 	.word	0x080067b5
 80066f0:	080067b5 	.word	0x080067b5
 80066f4:	080067b5 	.word	0x080067b5
 80066f8:	080067b5 	.word	0x080067b5
 80066fc:	080067b5 	.word	0x080067b5
 8006700:	0800678d 	.word	0x0800678d
 8006704:	080067b5 	.word	0x080067b5
 8006708:	080067b5 	.word	0x080067b5
 800670c:	080067b5 	.word	0x080067b5
 8006710:	080067b5 	.word	0x080067b5
 8006714:	080067b5 	.word	0x080067b5
 8006718:	080067b5 	.word	0x080067b5
 800671c:	080067b5 	.word	0x080067b5
 8006720:	08006795 	.word	0x08006795
 8006724:	080067b5 	.word	0x080067b5
 8006728:	080067b5 	.word	0x080067b5
 800672c:	080067b5 	.word	0x080067b5
 8006730:	080067b5 	.word	0x080067b5
 8006734:	080067b5 	.word	0x080067b5
 8006738:	080067b5 	.word	0x080067b5
 800673c:	080067b5 	.word	0x080067b5
 8006740:	0800679d 	.word	0x0800679d
 8006744:	080067b5 	.word	0x080067b5
 8006748:	080067b5 	.word	0x080067b5
 800674c:	080067b5 	.word	0x080067b5
 8006750:	080067b5 	.word	0x080067b5
 8006754:	080067b5 	.word	0x080067b5
 8006758:	080067b5 	.word	0x080067b5
 800675c:	080067b5 	.word	0x080067b5
 8006760:	080067a5 	.word	0x080067a5
 8006764:	080067b5 	.word	0x080067b5
 8006768:	080067b5 	.word	0x080067b5
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067b5 	.word	0x080067b5
 8006774:	080067b5 	.word	0x080067b5
 8006778:	080067b5 	.word	0x080067b5
 800677c:	080067b5 	.word	0x080067b5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e1c0      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e1bc      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e1b8      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e1b4      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80067a4:	2320      	movs	r3, #32
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e1b0      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e1ac      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e1a8      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a75      	ldr	r2, [pc, #468]	; (8006998 <UART_SetConfig+0x638>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d130      	bne.n	8006828 <UART_SetConfig+0x4c8>
 80067c6:	4b73      	ldr	r3, [pc, #460]	; (8006994 <UART_SetConfig+0x634>)
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d826      	bhi.n	8006820 <UART_SetConfig+0x4c0>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x478>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006801 	.word	0x08006801
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e18a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e186      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e182      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e17e      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006810:	2320      	movs	r3, #32
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e17a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006818:	2340      	movs	r3, #64	; 0x40
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e176      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e172      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5b      	ldr	r2, [pc, #364]	; (800699c <UART_SetConfig+0x63c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d130      	bne.n	8006894 <UART_SetConfig+0x534>
 8006832:	4b58      	ldr	r3, [pc, #352]	; (8006994 <UART_SetConfig+0x634>)
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b05      	cmp	r3, #5
 800683c:	d826      	bhi.n	800688c <UART_SetConfig+0x52c>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0x4e4>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800685d 	.word	0x0800685d
 8006848:	08006865 	.word	0x08006865
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e154      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e150      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e14c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e148      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800687c:	2320      	movs	r3, #32
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e144      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e140      	b.n	8006b0e <UART_SetConfig+0x7ae>
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e13c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a41      	ldr	r2, [pc, #260]	; (80069a0 <UART_SetConfig+0x640>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f040 8082 	bne.w	80069a4 <UART_SetConfig+0x644>
 80068a0:	4b3c      	ldr	r3, [pc, #240]	; (8006994 <UART_SetConfig+0x634>)
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068a8:	2b28      	cmp	r3, #40	; 0x28
 80068aa:	d86d      	bhi.n	8006988 <UART_SetConfig+0x628>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x554>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	08006959 	.word	0x08006959
 80068b8:	08006989 	.word	0x08006989
 80068bc:	08006989 	.word	0x08006989
 80068c0:	08006989 	.word	0x08006989
 80068c4:	08006989 	.word	0x08006989
 80068c8:	08006989 	.word	0x08006989
 80068cc:	08006989 	.word	0x08006989
 80068d0:	08006989 	.word	0x08006989
 80068d4:	08006961 	.word	0x08006961
 80068d8:	08006989 	.word	0x08006989
 80068dc:	08006989 	.word	0x08006989
 80068e0:	08006989 	.word	0x08006989
 80068e4:	08006989 	.word	0x08006989
 80068e8:	08006989 	.word	0x08006989
 80068ec:	08006989 	.word	0x08006989
 80068f0:	08006989 	.word	0x08006989
 80068f4:	08006969 	.word	0x08006969
 80068f8:	08006989 	.word	0x08006989
 80068fc:	08006989 	.word	0x08006989
 8006900:	08006989 	.word	0x08006989
 8006904:	08006989 	.word	0x08006989
 8006908:	08006989 	.word	0x08006989
 800690c:	08006989 	.word	0x08006989
 8006910:	08006989 	.word	0x08006989
 8006914:	08006971 	.word	0x08006971
 8006918:	08006989 	.word	0x08006989
 800691c:	08006989 	.word	0x08006989
 8006920:	08006989 	.word	0x08006989
 8006924:	08006989 	.word	0x08006989
 8006928:	08006989 	.word	0x08006989
 800692c:	08006989 	.word	0x08006989
 8006930:	08006989 	.word	0x08006989
 8006934:	08006979 	.word	0x08006979
 8006938:	08006989 	.word	0x08006989
 800693c:	08006989 	.word	0x08006989
 8006940:	08006989 	.word	0x08006989
 8006944:	08006989 	.word	0x08006989
 8006948:	08006989 	.word	0x08006989
 800694c:	08006989 	.word	0x08006989
 8006950:	08006989 	.word	0x08006989
 8006954:	08006981 	.word	0x08006981
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e0d6      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006960:	2304      	movs	r3, #4
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006966:	e0d2      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006968:	2308      	movs	r3, #8
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e0ce      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006970:	2310      	movs	r3, #16
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006976:	e0ca      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006978:	2320      	movs	r3, #32
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e0c6      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e0c2      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006988:	2380      	movs	r3, #128	; 0x80
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e0be      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006990:	40011400 	.word	0x40011400
 8006994:	58024400 	.word	0x58024400
 8006998:	40007800 	.word	0x40007800
 800699c:	40007c00 	.word	0x40007c00
 80069a0:	40011800 	.word	0x40011800
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4aad      	ldr	r2, [pc, #692]	; (8006c60 <UART_SetConfig+0x900>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d176      	bne.n	8006a9c <UART_SetConfig+0x73c>
 80069ae:	4bad      	ldr	r3, [pc, #692]	; (8006c64 <UART_SetConfig+0x904>)
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b6:	2b28      	cmp	r3, #40	; 0x28
 80069b8:	d86c      	bhi.n	8006a94 <UART_SetConfig+0x734>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0x660>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a95 	.word	0x08006a95
 80069c8:	08006a95 	.word	0x08006a95
 80069cc:	08006a95 	.word	0x08006a95
 80069d0:	08006a95 	.word	0x08006a95
 80069d4:	08006a95 	.word	0x08006a95
 80069d8:	08006a95 	.word	0x08006a95
 80069dc:	08006a95 	.word	0x08006a95
 80069e0:	08006a6d 	.word	0x08006a6d
 80069e4:	08006a95 	.word	0x08006a95
 80069e8:	08006a95 	.word	0x08006a95
 80069ec:	08006a95 	.word	0x08006a95
 80069f0:	08006a95 	.word	0x08006a95
 80069f4:	08006a95 	.word	0x08006a95
 80069f8:	08006a95 	.word	0x08006a95
 80069fc:	08006a95 	.word	0x08006a95
 8006a00:	08006a75 	.word	0x08006a75
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a95 	.word	0x08006a95
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a7d 	.word	0x08006a7d
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	08006a95 	.word	0x08006a95
 8006a3c:	08006a95 	.word	0x08006a95
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e050      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e04c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e048      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e044      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a84:	2320      	movs	r3, #32
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e040      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e03c      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e038      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a71      	ldr	r2, [pc, #452]	; (8006c68 <UART_SetConfig+0x908>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d130      	bne.n	8006b08 <UART_SetConfig+0x7a8>
 8006aa6:	4b6f      	ldr	r3, [pc, #444]	; (8006c64 <UART_SetConfig+0x904>)
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d826      	bhi.n	8006b00 <UART_SetConfig+0x7a0>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x758>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ad1 	.word	0x08006ad1
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e01a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ade:	e016      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae6:	e012      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aee:	e00e      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006af0:	2320      	movs	r3, #32
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e00a      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e006      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e002      	b.n	8006b0e <UART_SetConfig+0x7ae>
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a55      	ldr	r2, [pc, #340]	; (8006c68 <UART_SetConfig+0x908>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	f040 80f8 	bne.w	8006d0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	dc46      	bgt.n	8006bb0 <UART_SetConfig+0x850>
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	db75      	blt.n	8006c12 <UART_SetConfig+0x8b2>
 8006b26:	3b02      	subs	r3, #2
 8006b28:	2b1e      	cmp	r3, #30
 8006b2a:	d872      	bhi.n	8006c12 <UART_SetConfig+0x8b2>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x7d4>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006bb7 	.word	0x08006bb7
 8006b38:	08006c13 	.word	0x08006c13
 8006b3c:	08006bbf 	.word	0x08006bbf
 8006b40:	08006c13 	.word	0x08006c13
 8006b44:	08006c13 	.word	0x08006c13
 8006b48:	08006c13 	.word	0x08006c13
 8006b4c:	08006bcf 	.word	0x08006bcf
 8006b50:	08006c13 	.word	0x08006c13
 8006b54:	08006c13 	.word	0x08006c13
 8006b58:	08006c13 	.word	0x08006c13
 8006b5c:	08006c13 	.word	0x08006c13
 8006b60:	08006c13 	.word	0x08006c13
 8006b64:	08006c13 	.word	0x08006c13
 8006b68:	08006c13 	.word	0x08006c13
 8006b6c:	08006bdf 	.word	0x08006bdf
 8006b70:	08006c13 	.word	0x08006c13
 8006b74:	08006c13 	.word	0x08006c13
 8006b78:	08006c13 	.word	0x08006c13
 8006b7c:	08006c13 	.word	0x08006c13
 8006b80:	08006c13 	.word	0x08006c13
 8006b84:	08006c13 	.word	0x08006c13
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c13 	.word	0x08006c13
 8006b90:	08006c13 	.word	0x08006c13
 8006b94:	08006c13 	.word	0x08006c13
 8006b98:	08006c13 	.word	0x08006c13
 8006b9c:	08006c13 	.word	0x08006c13
 8006ba0:	08006c13 	.word	0x08006c13
 8006ba4:	08006c13 	.word	0x08006c13
 8006ba8:	08006c13 	.word	0x08006c13
 8006bac:	08006c05 	.word	0x08006c05
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d02a      	beq.n	8006c0a <UART_SetConfig+0x8aa>
 8006bb4:	e02d      	b.n	8006c12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006bb6:	f7fe faa7 	bl	8005108 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bbc:	e02f      	b.n	8006c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fab6 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bcc:	e027      	b.n	8006c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bce:	f107 0318 	add.w	r3, r7, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fc02 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bdc:	e01f      	b.n	8006c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bde:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <UART_SetConfig+0x904>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bea:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <UART_SetConfig+0x904>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <UART_SetConfig+0x90c>)
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bfc:	e00f      	b.n	8006c1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <UART_SetConfig+0x90c>)
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c02:	e00c      	b.n	8006c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c04:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <UART_SetConfig+0x910>)
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 81ee 	beq.w	8007002 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <UART_SetConfig+0x914>)
 8006c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d305      	bcc.n	8006c56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d910      	bls.n	8006c78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c5c:	e1d1      	b.n	8007002 <UART_SetConfig+0xca2>
 8006c5e:	bf00      	nop
 8006c60:	40011c00 	.word	0x40011c00
 8006c64:	58024400 	.word	0x58024400
 8006c68:	58000c00 	.word	0x58000c00
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	003d0900 	.word	0x003d0900
 8006c74:	080081ac 	.word	0x080081ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	60fa      	str	r2, [r7, #12]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	4ac0      	ldr	r2, [pc, #768]	; (8006f88 <UART_SetConfig+0xc28>)
 8006c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c9a:	f7f9 fb59 	bl	8000350 <__aeabi_uldivmod>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	020b      	lsls	r3, r1, #8
 8006cb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cb4:	0202      	lsls	r2, r0, #8
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	6849      	ldr	r1, [r1, #4]
 8006cba:	0849      	lsrs	r1, r1, #1
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	eb12 0804 	adds.w	r8, r2, r4
 8006cc6:	eb43 0905 	adc.w	r9, r3, r5
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	469a      	mov	sl, r3
 8006cd2:	4693      	mov	fp, r2
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fb38 	bl	8000350 <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cee:	d308      	bcc.n	8006d02 <UART_SetConfig+0x9a2>
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf6:	d204      	bcs.n	8006d02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e17f      	b.n	8007002 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d08:	e17b      	b.n	8007002 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d12:	f040 80bd 	bne.w	8006e90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006d16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	dc48      	bgt.n	8006db0 <UART_SetConfig+0xa50>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	db7b      	blt.n	8006e1a <UART_SetConfig+0xaba>
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d879      	bhi.n	8006e1a <UART_SetConfig+0xaba>
 8006d26:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0x9cc>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006db7 	.word	0x08006db7
 8006d30:	08006dbf 	.word	0x08006dbf
 8006d34:	08006e1b 	.word	0x08006e1b
 8006d38:	08006e1b 	.word	0x08006e1b
 8006d3c:	08006dc7 	.word	0x08006dc7
 8006d40:	08006e1b 	.word	0x08006e1b
 8006d44:	08006e1b 	.word	0x08006e1b
 8006d48:	08006e1b 	.word	0x08006e1b
 8006d4c:	08006dd7 	.word	0x08006dd7
 8006d50:	08006e1b 	.word	0x08006e1b
 8006d54:	08006e1b 	.word	0x08006e1b
 8006d58:	08006e1b 	.word	0x08006e1b
 8006d5c:	08006e1b 	.word	0x08006e1b
 8006d60:	08006e1b 	.word	0x08006e1b
 8006d64:	08006e1b 	.word	0x08006e1b
 8006d68:	08006e1b 	.word	0x08006e1b
 8006d6c:	08006de7 	.word	0x08006de7
 8006d70:	08006e1b 	.word	0x08006e1b
 8006d74:	08006e1b 	.word	0x08006e1b
 8006d78:	08006e1b 	.word	0x08006e1b
 8006d7c:	08006e1b 	.word	0x08006e1b
 8006d80:	08006e1b 	.word	0x08006e1b
 8006d84:	08006e1b 	.word	0x08006e1b
 8006d88:	08006e1b 	.word	0x08006e1b
 8006d8c:	08006e1b 	.word	0x08006e1b
 8006d90:	08006e1b 	.word	0x08006e1b
 8006d94:	08006e1b 	.word	0x08006e1b
 8006d98:	08006e1b 	.word	0x08006e1b
 8006d9c:	08006e1b 	.word	0x08006e1b
 8006da0:	08006e1b 	.word	0x08006e1b
 8006da4:	08006e1b 	.word	0x08006e1b
 8006da8:	08006e1b 	.word	0x08006e1b
 8006dac:	08006e0d 	.word	0x08006e0d
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d02e      	beq.n	8006e12 <UART_SetConfig+0xab2>
 8006db4:	e031      	b.n	8006e1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db6:	f7fc fe41 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 8006dba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006dbc:	e033      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dbe:	f7fc fe53 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8006dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006dc4:	e02f      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe f9b2 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd4:	e027      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fafe 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de4:	e01f      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006de6:	4b69      	ldr	r3, [pc, #420]	; (8006f8c <UART_SetConfig+0xc2c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006df2:	4b66      	ldr	r3, [pc, #408]	; (8006f8c <UART_SetConfig+0xc2c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	4a64      	ldr	r2, [pc, #400]	; (8006f90 <UART_SetConfig+0xc30>)
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e04:	e00f      	b.n	8006e26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006e06:	4b62      	ldr	r3, [pc, #392]	; (8006f90 <UART_SetConfig+0xc30>)
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0a:	e00c      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e0c:	4b61      	ldr	r3, [pc, #388]	; (8006f94 <UART_SetConfig+0xc34>)
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e10:	e009      	b.n	8006e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e18:	e005      	b.n	8006e26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80ea 	beq.w	8007002 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	4a55      	ldr	r2, [pc, #340]	; (8006f88 <UART_SetConfig+0xc28>)
 8006e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e40:	005a      	lsls	r2, r3, #1
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	441a      	add	r2, r3
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d916      	bls.n	8006e88 <UART_SetConfig+0xb28>
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e60:	d212      	bcs.n	8006e88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f023 030f 	bic.w	r3, r3, #15
 8006e6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e84:	60da      	str	r2, [r3, #12]
 8006e86:	e0bc      	b.n	8007002 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e8e:	e0b8      	b.n	8007002 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	dc4b      	bgt.n	8006f30 <UART_SetConfig+0xbd0>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f2c0 8087 	blt.w	8006fac <UART_SetConfig+0xc4c>
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	f200 8084 	bhi.w	8006fac <UART_SetConfig+0xc4c>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0xb4c>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006f37 	.word	0x08006f37
 8006eb0:	08006f3f 	.word	0x08006f3f
 8006eb4:	08006fad 	.word	0x08006fad
 8006eb8:	08006fad 	.word	0x08006fad
 8006ebc:	08006f47 	.word	0x08006f47
 8006ec0:	08006fad 	.word	0x08006fad
 8006ec4:	08006fad 	.word	0x08006fad
 8006ec8:	08006fad 	.word	0x08006fad
 8006ecc:	08006f57 	.word	0x08006f57
 8006ed0:	08006fad 	.word	0x08006fad
 8006ed4:	08006fad 	.word	0x08006fad
 8006ed8:	08006fad 	.word	0x08006fad
 8006edc:	08006fad 	.word	0x08006fad
 8006ee0:	08006fad 	.word	0x08006fad
 8006ee4:	08006fad 	.word	0x08006fad
 8006ee8:	08006fad 	.word	0x08006fad
 8006eec:	08006f67 	.word	0x08006f67
 8006ef0:	08006fad 	.word	0x08006fad
 8006ef4:	08006fad 	.word	0x08006fad
 8006ef8:	08006fad 	.word	0x08006fad
 8006efc:	08006fad 	.word	0x08006fad
 8006f00:	08006fad 	.word	0x08006fad
 8006f04:	08006fad 	.word	0x08006fad
 8006f08:	08006fad 	.word	0x08006fad
 8006f0c:	08006fad 	.word	0x08006fad
 8006f10:	08006fad 	.word	0x08006fad
 8006f14:	08006fad 	.word	0x08006fad
 8006f18:	08006fad 	.word	0x08006fad
 8006f1c:	08006fad 	.word	0x08006fad
 8006f20:	08006fad 	.word	0x08006fad
 8006f24:	08006fad 	.word	0x08006fad
 8006f28:	08006fad 	.word	0x08006fad
 8006f2c:	08006f9f 	.word	0x08006f9f
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d037      	beq.n	8006fa4 <UART_SetConfig+0xc44>
 8006f34:	e03a      	b.n	8006fac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f36:	f7fc fd81 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 8006f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f3c:	e03c      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f3e:	f7fc fd93 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8006f42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f44:	e038      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f8f2 	bl	8005134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f54:	e030      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f56:	f107 0318 	add.w	r3, r7, #24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fa3e 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f64:	e028      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <UART_SetConfig+0xc2c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d012      	beq.n	8006f98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <UART_SetConfig+0xc2c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	08db      	lsrs	r3, r3, #3
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <UART_SetConfig+0xc30>)
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f84:	e018      	b.n	8006fb8 <UART_SetConfig+0xc58>
 8006f86:	bf00      	nop
 8006f88:	080081ac 	.word	0x080081ac
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	03d09000 	.word	0x03d09000
 8006f94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006f98:	4b24      	ldr	r3, [pc, #144]	; (800702c <UART_SetConfig+0xccc>)
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9c:	e00c      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <UART_SetConfig+0xcd0>)
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa2:	e009      	b.n	8006fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006faa:	e005      	b.n	8006fb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8006fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d021      	beq.n	8007002 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <UART_SetConfig+0xcd4>)
 8006fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	441a      	add	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d909      	bls.n	8006ffc <UART_SetConfig+0xc9c>
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fee:	d205      	bcs.n	8006ffc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60da      	str	r2, [r3, #12]
 8006ffa:	e002      	b.n	8007002 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2201      	movs	r2, #1
 8007006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2201      	movs	r2, #1
 800700e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2200      	movs	r2, #0
 8007016:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800701e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007022:	4618      	mov	r0, r3
 8007024:	3748      	adds	r7, #72	; 0x48
 8007026:	46bd      	mov	sp, r7
 8007028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800702c:	03d09000 	.word	0x03d09000
 8007030:	003d0900 	.word	0x003d0900
 8007034:	080081ac 	.word	0x080081ac

08007038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01a      	beq.n	800714e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007136:	d10a      	bne.n	800714e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af02      	add	r7, sp, #8
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800718c:	f7f9 ffc2 	bl	8001114 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b08      	cmp	r3, #8
 800719e:	d10e      	bne.n	80071be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f82f 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e025      	b.n	800720a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d10e      	bne.n	80071ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f819 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e00f      	b.n	800720a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b09c      	sub	sp, #112	; 0x70
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007222:	e0a9      	b.n	8007378 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722a:	f000 80a5 	beq.w	8007378 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722e:	f7f9 ff71 	bl	8001114 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800723a:	429a      	cmp	r2, r3
 800723c:	d302      	bcc.n	8007244 <UART_WaitOnFlagUntilTimeout+0x32>
 800723e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007240:	2b00      	cmp	r3, #0
 8007242:	d140      	bne.n	80072c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007258:	667b      	str	r3, [r7, #100]	; 0x64
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007264:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	663b      	str	r3, [r7, #96]	; 0x60
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007296:	64ba      	str	r2, [r7, #72]	; 0x48
 8007298:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800729c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e069      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d051      	beq.n	8007378 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e2:	d149      	bne.n	8007378 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
 800730e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e6      	bne.n	80072ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	613b      	str	r3, [r7, #16]
   return(result);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	66bb      	str	r3, [r7, #104]	; 0x68
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007340:	623a      	str	r2, [r7, #32]
 8007342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	69f9      	ldr	r1, [r7, #28]
 8007346:	6a3a      	ldr	r2, [r7, #32]
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	61bb      	str	r3, [r7, #24]
   return(result);
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e010      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69da      	ldr	r2, [r3, #28]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4013      	ands	r3, r2
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	bf0c      	ite	eq
 8007388:	2301      	moveq	r3, #1
 800738a:	2300      	movne	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	429a      	cmp	r2, r3
 8007394:	f43f af46 	beq.w	8007224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3770      	adds	r7, #112	; 0x70
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e027      	b.n	8007408 <HAL_UARTEx_DisableFifoMode+0x66>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	; 0x24
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007428:	2302      	movs	r3, #2
 800742a:	e02d      	b.n	8007488 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2224      	movs	r2, #36	; 0x24
 8007438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f84f 	bl	800750c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e02d      	b.n	8007504 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2224      	movs	r2, #36	; 0x24
 80074b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f811 	bl	800750c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007518:	2b00      	cmp	r3, #0
 800751a:	d108      	bne.n	800752e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800752c:	e031      	b.n	8007592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800752e:	2310      	movs	r3, #16
 8007530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007532:	2310      	movs	r3, #16
 8007534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	0e5b      	lsrs	r3, r3, #25
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	0f5b      	lsrs	r3, r3, #29
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	7b3a      	ldrb	r2, [r7, #12]
 800755a:	4911      	ldr	r1, [pc, #68]	; (80075a0 <UARTEx_SetNbDataToProcess+0x94>)
 800755c:	5c8a      	ldrb	r2, [r1, r2]
 800755e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007562:	7b3a      	ldrb	r2, [r7, #12]
 8007564:	490f      	ldr	r1, [pc, #60]	; (80075a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007568:	fb93 f3f2 	sdiv	r3, r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	7b7a      	ldrb	r2, [r7, #13]
 8007578:	4909      	ldr	r1, [pc, #36]	; (80075a0 <UARTEx_SetNbDataToProcess+0x94>)
 800757a:	5c8a      	ldrb	r2, [r1, r2]
 800757c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007580:	7b7a      	ldrb	r2, [r7, #13]
 8007582:	4908      	ldr	r1, [pc, #32]	; (80075a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007586:	fb93 f3f2 	sdiv	r3, r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	080081c4 	.word	0x080081c4
 80075a4:	080081cc 	.word	0x080081cc

080075a8 <__errno>:
 80075a8:	4b01      	ldr	r3, [pc, #4]	; (80075b0 <__errno+0x8>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	24000010 	.word	0x24000010

080075b4 <__libc_init_array>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	4d0d      	ldr	r5, [pc, #52]	; (80075ec <__libc_init_array+0x38>)
 80075b8:	4c0d      	ldr	r4, [pc, #52]	; (80075f0 <__libc_init_array+0x3c>)
 80075ba:	1b64      	subs	r4, r4, r5
 80075bc:	10a4      	asrs	r4, r4, #2
 80075be:	2600      	movs	r6, #0
 80075c0:	42a6      	cmp	r6, r4
 80075c2:	d109      	bne.n	80075d8 <__libc_init_array+0x24>
 80075c4:	4d0b      	ldr	r5, [pc, #44]	; (80075f4 <__libc_init_array+0x40>)
 80075c6:	4c0c      	ldr	r4, [pc, #48]	; (80075f8 <__libc_init_array+0x44>)
 80075c8:	f000 fdd6 	bl	8008178 <_init>
 80075cc:	1b64      	subs	r4, r4, r5
 80075ce:	10a4      	asrs	r4, r4, #2
 80075d0:	2600      	movs	r6, #0
 80075d2:	42a6      	cmp	r6, r4
 80075d4:	d105      	bne.n	80075e2 <__libc_init_array+0x2e>
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075dc:	4798      	blx	r3
 80075de:	3601      	adds	r6, #1
 80075e0:	e7ee      	b.n	80075c0 <__libc_init_array+0xc>
 80075e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e6:	4798      	blx	r3
 80075e8:	3601      	adds	r6, #1
 80075ea:	e7f2      	b.n	80075d2 <__libc_init_array+0x1e>
 80075ec:	08008210 	.word	0x08008210
 80075f0:	08008210 	.word	0x08008210
 80075f4:	08008210 	.word	0x08008210
 80075f8:	08008214 	.word	0x08008214

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <siprintf>:
 800760c:	b40e      	push	{r1, r2, r3}
 800760e:	b500      	push	{lr}
 8007610:	b09c      	sub	sp, #112	; 0x70
 8007612:	ab1d      	add	r3, sp, #116	; 0x74
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800761c:	4809      	ldr	r0, [pc, #36]	; (8007644 <siprintf+0x38>)
 800761e:	9107      	str	r1, [sp, #28]
 8007620:	9104      	str	r1, [sp, #16]
 8007622:	4909      	ldr	r1, [pc, #36]	; (8007648 <siprintf+0x3c>)
 8007624:	f853 2b04 	ldr.w	r2, [r3], #4
 8007628:	9105      	str	r1, [sp, #20]
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	a902      	add	r1, sp, #8
 8007630:	f000 f868 	bl	8007704 <_svfiprintf_r>
 8007634:	9b02      	ldr	r3, [sp, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	b01c      	add	sp, #112	; 0x70
 800763c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007640:	b003      	add	sp, #12
 8007642:	4770      	bx	lr
 8007644:	24000010 	.word	0x24000010
 8007648:	ffff0208 	.word	0xffff0208

0800764c <__retarget_lock_acquire_recursive>:
 800764c:	4770      	bx	lr

0800764e <__retarget_lock_release_recursive>:
 800764e:	4770      	bx	lr

08007650 <__ssputs_r>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	688e      	ldr	r6, [r1, #8]
 8007656:	461f      	mov	r7, r3
 8007658:	42be      	cmp	r6, r7
 800765a:	680b      	ldr	r3, [r1, #0]
 800765c:	4682      	mov	sl, r0
 800765e:	460c      	mov	r4, r1
 8007660:	4690      	mov	r8, r2
 8007662:	d82c      	bhi.n	80076be <__ssputs_r+0x6e>
 8007664:	898a      	ldrh	r2, [r1, #12]
 8007666:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800766a:	d026      	beq.n	80076ba <__ssputs_r+0x6a>
 800766c:	6965      	ldr	r5, [r4, #20]
 800766e:	6909      	ldr	r1, [r1, #16]
 8007670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007674:	eba3 0901 	sub.w	r9, r3, r1
 8007678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800767c:	1c7b      	adds	r3, r7, #1
 800767e:	444b      	add	r3, r9
 8007680:	106d      	asrs	r5, r5, #1
 8007682:	429d      	cmp	r5, r3
 8007684:	bf38      	it	cc
 8007686:	461d      	movcc	r5, r3
 8007688:	0553      	lsls	r3, r2, #21
 800768a:	d527      	bpl.n	80076dc <__ssputs_r+0x8c>
 800768c:	4629      	mov	r1, r5
 800768e:	f000 fb5b 	bl	8007d48 <_malloc_r>
 8007692:	4606      	mov	r6, r0
 8007694:	b360      	cbz	r0, 80076f0 <__ssputs_r+0xa0>
 8007696:	6921      	ldr	r1, [r4, #16]
 8007698:	464a      	mov	r2, r9
 800769a:	f000 fac1 	bl	8007c20 <memcpy>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	6126      	str	r6, [r4, #16]
 80076ac:	6165      	str	r5, [r4, #20]
 80076ae:	444e      	add	r6, r9
 80076b0:	eba5 0509 	sub.w	r5, r5, r9
 80076b4:	6026      	str	r6, [r4, #0]
 80076b6:	60a5      	str	r5, [r4, #8]
 80076b8:	463e      	mov	r6, r7
 80076ba:	42be      	cmp	r6, r7
 80076bc:	d900      	bls.n	80076c0 <__ssputs_r+0x70>
 80076be:	463e      	mov	r6, r7
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	4632      	mov	r2, r6
 80076c4:	4641      	mov	r1, r8
 80076c6:	f000 fab9 	bl	8007c3c <memmove>
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	1b9b      	subs	r3, r3, r6
 80076ce:	60a3      	str	r3, [r4, #8]
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	4433      	add	r3, r6
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	2000      	movs	r0, #0
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076dc:	462a      	mov	r2, r5
 80076de:	f000 fba7 	bl	8007e30 <_realloc_r>
 80076e2:	4606      	mov	r6, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1e0      	bne.n	80076aa <__ssputs_r+0x5a>
 80076e8:	6921      	ldr	r1, [r4, #16]
 80076ea:	4650      	mov	r0, sl
 80076ec:	f000 fac0 	bl	8007c70 <_free_r>
 80076f0:	230c      	movs	r3, #12
 80076f2:	f8ca 3000 	str.w	r3, [sl]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007702:	e7e9      	b.n	80076d8 <__ssputs_r+0x88>

08007704 <_svfiprintf_r>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	4698      	mov	r8, r3
 800770a:	898b      	ldrh	r3, [r1, #12]
 800770c:	061b      	lsls	r3, r3, #24
 800770e:	b09d      	sub	sp, #116	; 0x74
 8007710:	4607      	mov	r7, r0
 8007712:	460d      	mov	r5, r1
 8007714:	4614      	mov	r4, r2
 8007716:	d50e      	bpl.n	8007736 <_svfiprintf_r+0x32>
 8007718:	690b      	ldr	r3, [r1, #16]
 800771a:	b963      	cbnz	r3, 8007736 <_svfiprintf_r+0x32>
 800771c:	2140      	movs	r1, #64	; 0x40
 800771e:	f000 fb13 	bl	8007d48 <_malloc_r>
 8007722:	6028      	str	r0, [r5, #0]
 8007724:	6128      	str	r0, [r5, #16]
 8007726:	b920      	cbnz	r0, 8007732 <_svfiprintf_r+0x2e>
 8007728:	230c      	movs	r3, #12
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007730:	e0d0      	b.n	80078d4 <_svfiprintf_r+0x1d0>
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	616b      	str	r3, [r5, #20]
 8007736:	2300      	movs	r3, #0
 8007738:	9309      	str	r3, [sp, #36]	; 0x24
 800773a:	2320      	movs	r3, #32
 800773c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007740:	f8cd 800c 	str.w	r8, [sp, #12]
 8007744:	2330      	movs	r3, #48	; 0x30
 8007746:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078ec <_svfiprintf_r+0x1e8>
 800774a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800774e:	f04f 0901 	mov.w	r9, #1
 8007752:	4623      	mov	r3, r4
 8007754:	469a      	mov	sl, r3
 8007756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775a:	b10a      	cbz	r2, 8007760 <_svfiprintf_r+0x5c>
 800775c:	2a25      	cmp	r2, #37	; 0x25
 800775e:	d1f9      	bne.n	8007754 <_svfiprintf_r+0x50>
 8007760:	ebba 0b04 	subs.w	fp, sl, r4
 8007764:	d00b      	beq.n	800777e <_svfiprintf_r+0x7a>
 8007766:	465b      	mov	r3, fp
 8007768:	4622      	mov	r2, r4
 800776a:	4629      	mov	r1, r5
 800776c:	4638      	mov	r0, r7
 800776e:	f7ff ff6f 	bl	8007650 <__ssputs_r>
 8007772:	3001      	adds	r0, #1
 8007774:	f000 80a9 	beq.w	80078ca <_svfiprintf_r+0x1c6>
 8007778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777a:	445a      	add	r2, fp
 800777c:	9209      	str	r2, [sp, #36]	; 0x24
 800777e:	f89a 3000 	ldrb.w	r3, [sl]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80a1 	beq.w	80078ca <_svfiprintf_r+0x1c6>
 8007788:	2300      	movs	r3, #0
 800778a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800778e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007792:	f10a 0a01 	add.w	sl, sl, #1
 8007796:	9304      	str	r3, [sp, #16]
 8007798:	9307      	str	r3, [sp, #28]
 800779a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800779e:	931a      	str	r3, [sp, #104]	; 0x68
 80077a0:	4654      	mov	r4, sl
 80077a2:	2205      	movs	r2, #5
 80077a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a8:	4850      	ldr	r0, [pc, #320]	; (80078ec <_svfiprintf_r+0x1e8>)
 80077aa:	f7f8 fd81 	bl	80002b0 <memchr>
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	b9d8      	cbnz	r0, 80077ea <_svfiprintf_r+0xe6>
 80077b2:	06d0      	lsls	r0, r2, #27
 80077b4:	bf44      	itt	mi
 80077b6:	2320      	movmi	r3, #32
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077bc:	0711      	lsls	r1, r2, #28
 80077be:	bf44      	itt	mi
 80077c0:	232b      	movmi	r3, #43	; 0x2b
 80077c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ca:	2b2a      	cmp	r3, #42	; 0x2a
 80077cc:	d015      	beq.n	80077fa <_svfiprintf_r+0xf6>
 80077ce:	9a07      	ldr	r2, [sp, #28]
 80077d0:	4654      	mov	r4, sl
 80077d2:	2000      	movs	r0, #0
 80077d4:	f04f 0c0a 	mov.w	ip, #10
 80077d8:	4621      	mov	r1, r4
 80077da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077de:	3b30      	subs	r3, #48	; 0x30
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d94d      	bls.n	8007880 <_svfiprintf_r+0x17c>
 80077e4:	b1b0      	cbz	r0, 8007814 <_svfiprintf_r+0x110>
 80077e6:	9207      	str	r2, [sp, #28]
 80077e8:	e014      	b.n	8007814 <_svfiprintf_r+0x110>
 80077ea:	eba0 0308 	sub.w	r3, r0, r8
 80077ee:	fa09 f303 	lsl.w	r3, r9, r3
 80077f2:	4313      	orrs	r3, r2
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	46a2      	mov	sl, r4
 80077f8:	e7d2      	b.n	80077a0 <_svfiprintf_r+0x9c>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	9103      	str	r1, [sp, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfbb      	ittet	lt
 8007806:	425b      	neglt	r3, r3
 8007808:	f042 0202 	orrlt.w	r2, r2, #2
 800780c:	9307      	strge	r3, [sp, #28]
 800780e:	9307      	strlt	r3, [sp, #28]
 8007810:	bfb8      	it	lt
 8007812:	9204      	strlt	r2, [sp, #16]
 8007814:	7823      	ldrb	r3, [r4, #0]
 8007816:	2b2e      	cmp	r3, #46	; 0x2e
 8007818:	d10c      	bne.n	8007834 <_svfiprintf_r+0x130>
 800781a:	7863      	ldrb	r3, [r4, #1]
 800781c:	2b2a      	cmp	r3, #42	; 0x2a
 800781e:	d134      	bne.n	800788a <_svfiprintf_r+0x186>
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	1d1a      	adds	r2, r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	9203      	str	r2, [sp, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfb8      	it	lt
 800782c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007830:	3402      	adds	r4, #2
 8007832:	9305      	str	r3, [sp, #20]
 8007834:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078fc <_svfiprintf_r+0x1f8>
 8007838:	7821      	ldrb	r1, [r4, #0]
 800783a:	2203      	movs	r2, #3
 800783c:	4650      	mov	r0, sl
 800783e:	f7f8 fd37 	bl	80002b0 <memchr>
 8007842:	b138      	cbz	r0, 8007854 <_svfiprintf_r+0x150>
 8007844:	9b04      	ldr	r3, [sp, #16]
 8007846:	eba0 000a 	sub.w	r0, r0, sl
 800784a:	2240      	movs	r2, #64	; 0x40
 800784c:	4082      	lsls	r2, r0
 800784e:	4313      	orrs	r3, r2
 8007850:	3401      	adds	r4, #1
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	4825      	ldr	r0, [pc, #148]	; (80078f0 <_svfiprintf_r+0x1ec>)
 800785a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800785e:	2206      	movs	r2, #6
 8007860:	f7f8 fd26 	bl	80002b0 <memchr>
 8007864:	2800      	cmp	r0, #0
 8007866:	d038      	beq.n	80078da <_svfiprintf_r+0x1d6>
 8007868:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <_svfiprintf_r+0x1f0>)
 800786a:	bb1b      	cbnz	r3, 80078b4 <_svfiprintf_r+0x1b0>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	3307      	adds	r3, #7
 8007870:	f023 0307 	bic.w	r3, r3, #7
 8007874:	3308      	adds	r3, #8
 8007876:	9303      	str	r3, [sp, #12]
 8007878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787a:	4433      	add	r3, r6
 800787c:	9309      	str	r3, [sp, #36]	; 0x24
 800787e:	e768      	b.n	8007752 <_svfiprintf_r+0x4e>
 8007880:	fb0c 3202 	mla	r2, ip, r2, r3
 8007884:	460c      	mov	r4, r1
 8007886:	2001      	movs	r0, #1
 8007888:	e7a6      	b.n	80077d8 <_svfiprintf_r+0xd4>
 800788a:	2300      	movs	r3, #0
 800788c:	3401      	adds	r4, #1
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	4619      	mov	r1, r3
 8007892:	f04f 0c0a 	mov.w	ip, #10
 8007896:	4620      	mov	r0, r4
 8007898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800789c:	3a30      	subs	r2, #48	; 0x30
 800789e:	2a09      	cmp	r2, #9
 80078a0:	d903      	bls.n	80078aa <_svfiprintf_r+0x1a6>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0c6      	beq.n	8007834 <_svfiprintf_r+0x130>
 80078a6:	9105      	str	r1, [sp, #20]
 80078a8:	e7c4      	b.n	8007834 <_svfiprintf_r+0x130>
 80078aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ae:	4604      	mov	r4, r0
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7f0      	b.n	8007896 <_svfiprintf_r+0x192>
 80078b4:	ab03      	add	r3, sp, #12
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	462a      	mov	r2, r5
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <_svfiprintf_r+0x1f4>)
 80078bc:	a904      	add	r1, sp, #16
 80078be:	4638      	mov	r0, r7
 80078c0:	f3af 8000 	nop.w
 80078c4:	1c42      	adds	r2, r0, #1
 80078c6:	4606      	mov	r6, r0
 80078c8:	d1d6      	bne.n	8007878 <_svfiprintf_r+0x174>
 80078ca:	89ab      	ldrh	r3, [r5, #12]
 80078cc:	065b      	lsls	r3, r3, #25
 80078ce:	f53f af2d 	bmi.w	800772c <_svfiprintf_r+0x28>
 80078d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078d4:	b01d      	add	sp, #116	; 0x74
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	ab03      	add	r3, sp, #12
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	462a      	mov	r2, r5
 80078e0:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <_svfiprintf_r+0x1f4>)
 80078e2:	a904      	add	r1, sp, #16
 80078e4:	4638      	mov	r0, r7
 80078e6:	f000 f879 	bl	80079dc <_printf_i>
 80078ea:	e7eb      	b.n	80078c4 <_svfiprintf_r+0x1c0>
 80078ec:	080081d4 	.word	0x080081d4
 80078f0:	080081de 	.word	0x080081de
 80078f4:	00000000 	.word	0x00000000
 80078f8:	08007651 	.word	0x08007651
 80078fc:	080081da 	.word	0x080081da

08007900 <_printf_common>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	4616      	mov	r6, r2
 8007906:	4699      	mov	r9, r3
 8007908:	688a      	ldr	r2, [r1, #8]
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007910:	4293      	cmp	r3, r2
 8007912:	bfb8      	it	lt
 8007914:	4613      	movlt	r3, r2
 8007916:	6033      	str	r3, [r6, #0]
 8007918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800791c:	4607      	mov	r7, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b10a      	cbz	r2, 8007926 <_printf_common+0x26>
 8007922:	3301      	adds	r3, #1
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0699      	lsls	r1, r3, #26
 800792a:	bf42      	ittt	mi
 800792c:	6833      	ldrmi	r3, [r6, #0]
 800792e:	3302      	addmi	r3, #2
 8007930:	6033      	strmi	r3, [r6, #0]
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	f015 0506 	ands.w	r5, r5, #6
 8007938:	d106      	bne.n	8007948 <_printf_common+0x48>
 800793a:	f104 0a19 	add.w	sl, r4, #25
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc26      	bgt.n	8007996 <_printf_common+0x96>
 8007948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800794c:	1e13      	subs	r3, r2, #0
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	2301      	movne	r3, #1
 8007954:	0692      	lsls	r2, r2, #26
 8007956:	d42b      	bmi.n	80079b0 <_printf_common+0xb0>
 8007958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800795c:	4649      	mov	r1, r9
 800795e:	4638      	mov	r0, r7
 8007960:	47c0      	blx	r8
 8007962:	3001      	adds	r0, #1
 8007964:	d01e      	beq.n	80079a4 <_printf_common+0xa4>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	f003 0306 	and.w	r3, r3, #6
 800796e:	2b04      	cmp	r3, #4
 8007970:	bf02      	ittt	eq
 8007972:	68e5      	ldreq	r5, [r4, #12]
 8007974:	6833      	ldreq	r3, [r6, #0]
 8007976:	1aed      	subeq	r5, r5, r3
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	bf0c      	ite	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	2500      	movne	r5, #0
 8007982:	4293      	cmp	r3, r2
 8007984:	bfc4      	itt	gt
 8007986:	1a9b      	subgt	r3, r3, r2
 8007988:	18ed      	addgt	r5, r5, r3
 800798a:	2600      	movs	r6, #0
 800798c:	341a      	adds	r4, #26
 800798e:	42b5      	cmp	r5, r6
 8007990:	d11a      	bne.n	80079c8 <_printf_common+0xc8>
 8007992:	2000      	movs	r0, #0
 8007994:	e008      	b.n	80079a8 <_printf_common+0xa8>
 8007996:	2301      	movs	r3, #1
 8007998:	4652      	mov	r2, sl
 800799a:	4649      	mov	r1, r9
 800799c:	4638      	mov	r0, r7
 800799e:	47c0      	blx	r8
 80079a0:	3001      	adds	r0, #1
 80079a2:	d103      	bne.n	80079ac <_printf_common+0xac>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	3501      	adds	r5, #1
 80079ae:	e7c6      	b.n	800793e <_printf_common+0x3e>
 80079b0:	18e1      	adds	r1, r4, r3
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	2030      	movs	r0, #48	; 0x30
 80079b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ba:	4422      	add	r2, r4
 80079bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c4:	3302      	adds	r3, #2
 80079c6:	e7c7      	b.n	8007958 <_printf_common+0x58>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	4649      	mov	r1, r9
 80079ce:	4638      	mov	r0, r7
 80079d0:	47c0      	blx	r8
 80079d2:	3001      	adds	r0, #1
 80079d4:	d0e6      	beq.n	80079a4 <_printf_common+0xa4>
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7d9      	b.n	800798e <_printf_common+0x8e>
	...

080079dc <_printf_i>:
 80079dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	7e0f      	ldrb	r7, [r1, #24]
 80079e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079e4:	2f78      	cmp	r7, #120	; 0x78
 80079e6:	4691      	mov	r9, r2
 80079e8:	4680      	mov	r8, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	469a      	mov	sl, r3
 80079ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079f2:	d807      	bhi.n	8007a04 <_printf_i+0x28>
 80079f4:	2f62      	cmp	r7, #98	; 0x62
 80079f6:	d80a      	bhi.n	8007a0e <_printf_i+0x32>
 80079f8:	2f00      	cmp	r7, #0
 80079fa:	f000 80d4 	beq.w	8007ba6 <_printf_i+0x1ca>
 80079fe:	2f58      	cmp	r7, #88	; 0x58
 8007a00:	f000 80c0 	beq.w	8007b84 <_printf_i+0x1a8>
 8007a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a0c:	e03a      	b.n	8007a84 <_printf_i+0xa8>
 8007a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a12:	2b15      	cmp	r3, #21
 8007a14:	d8f6      	bhi.n	8007a04 <_printf_i+0x28>
 8007a16:	a101      	add	r1, pc, #4	; (adr r1, 8007a1c <_printf_i+0x40>)
 8007a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007a05 	.word	0x08007a05
 8007a28:	08007a05 	.word	0x08007a05
 8007a2c:	08007a05 	.word	0x08007a05
 8007a30:	08007a05 	.word	0x08007a05
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a05 	.word	0x08007a05
 8007a3c:	08007a05 	.word	0x08007a05
 8007a40:	08007a05 	.word	0x08007a05
 8007a44:	08007a05 	.word	0x08007a05
 8007a48:	08007b8d 	.word	0x08007b8d
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007b47 	.word	0x08007b47
 8007a54:	08007a05 	.word	0x08007a05
 8007a58:	08007a05 	.word	0x08007a05
 8007a5c:	08007baf 	.word	0x08007baf
 8007a60:	08007a05 	.word	0x08007a05
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007a05 	.word	0x08007a05
 8007a6c:	08007a05 	.word	0x08007a05
 8007a70:	08007b4f 	.word	0x08007b4f
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	602a      	str	r2, [r5, #0]
 8007a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a84:	2301      	movs	r3, #1
 8007a86:	e09f      	b.n	8007bc8 <_printf_i+0x1ec>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	0607      	lsls	r7, r0, #24
 8007a8e:	f103 0104 	add.w	r1, r3, #4
 8007a92:	6029      	str	r1, [r5, #0]
 8007a94:	d501      	bpl.n	8007a9a <_printf_i+0xbe>
 8007a96:	681e      	ldr	r6, [r3, #0]
 8007a98:	e003      	b.n	8007aa2 <_printf_i+0xc6>
 8007a9a:	0646      	lsls	r6, r0, #25
 8007a9c:	d5fb      	bpl.n	8007a96 <_printf_i+0xba>
 8007a9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	da03      	bge.n	8007aae <_printf_i+0xd2>
 8007aa6:	232d      	movs	r3, #45	; 0x2d
 8007aa8:	4276      	negs	r6, r6
 8007aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aae:	485a      	ldr	r0, [pc, #360]	; (8007c18 <_printf_i+0x23c>)
 8007ab0:	230a      	movs	r3, #10
 8007ab2:	e012      	b.n	8007ada <_printf_i+0xfe>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6029      	str	r1, [r5, #0]
 8007abc:	0605      	lsls	r5, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xe8>
 8007ac0:	681e      	ldr	r6, [r3, #0]
 8007ac2:	e002      	b.n	8007aca <_printf_i+0xee>
 8007ac4:	0641      	lsls	r1, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xe4>
 8007ac8:	881e      	ldrh	r6, [r3, #0]
 8007aca:	4853      	ldr	r0, [pc, #332]	; (8007c18 <_printf_i+0x23c>)
 8007acc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ace:	bf0c      	ite	eq
 8007ad0:	2308      	moveq	r3, #8
 8007ad2:	230a      	movne	r3, #10
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ada:	6865      	ldr	r5, [r4, #4]
 8007adc:	60a5      	str	r5, [r4, #8]
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	bfa2      	ittt	ge
 8007ae2:	6821      	ldrge	r1, [r4, #0]
 8007ae4:	f021 0104 	bicge.w	r1, r1, #4
 8007ae8:	6021      	strge	r1, [r4, #0]
 8007aea:	b90e      	cbnz	r6, 8007af0 <_printf_i+0x114>
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	d04b      	beq.n	8007b88 <_printf_i+0x1ac>
 8007af0:	4615      	mov	r5, r2
 8007af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007af6:	fb03 6711 	mls	r7, r3, r1, r6
 8007afa:	5dc7      	ldrb	r7, [r0, r7]
 8007afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b00:	4637      	mov	r7, r6
 8007b02:	42bb      	cmp	r3, r7
 8007b04:	460e      	mov	r6, r1
 8007b06:	d9f4      	bls.n	8007af2 <_printf_i+0x116>
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d10b      	bne.n	8007b24 <_printf_i+0x148>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	07de      	lsls	r6, r3, #31
 8007b10:	d508      	bpl.n	8007b24 <_printf_i+0x148>
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	4299      	cmp	r1, r3
 8007b18:	bfde      	ittt	le
 8007b1a:	2330      	movle	r3, #48	; 0x30
 8007b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b24:	1b52      	subs	r2, r2, r5
 8007b26:	6122      	str	r2, [r4, #16]
 8007b28:	f8cd a000 	str.w	sl, [sp]
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	aa03      	add	r2, sp, #12
 8007b30:	4621      	mov	r1, r4
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fee4 	bl	8007900 <_printf_common>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d14a      	bne.n	8007bd2 <_printf_i+0x1f6>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b40:	b004      	add	sp, #16
 8007b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f043 0320 	orr.w	r3, r3, #32
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	4833      	ldr	r0, [pc, #204]	; (8007c1c <_printf_i+0x240>)
 8007b50:	2778      	movs	r7, #120	; 0x78
 8007b52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	6829      	ldr	r1, [r5, #0]
 8007b5a:	061f      	lsls	r7, r3, #24
 8007b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b60:	d402      	bmi.n	8007b68 <_printf_i+0x18c>
 8007b62:	065f      	lsls	r7, r3, #25
 8007b64:	bf48      	it	mi
 8007b66:	b2b6      	uxthmi	r6, r6
 8007b68:	07df      	lsls	r7, r3, #31
 8007b6a:	bf48      	it	mi
 8007b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b70:	6029      	str	r1, [r5, #0]
 8007b72:	bf48      	it	mi
 8007b74:	6023      	strmi	r3, [r4, #0]
 8007b76:	b91e      	cbnz	r6, 8007b80 <_printf_i+0x1a4>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	f023 0320 	bic.w	r3, r3, #32
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	2310      	movs	r3, #16
 8007b82:	e7a7      	b.n	8007ad4 <_printf_i+0xf8>
 8007b84:	4824      	ldr	r0, [pc, #144]	; (8007c18 <_printf_i+0x23c>)
 8007b86:	e7e4      	b.n	8007b52 <_printf_i+0x176>
 8007b88:	4615      	mov	r5, r2
 8007b8a:	e7bd      	b.n	8007b08 <_printf_i+0x12c>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	6826      	ldr	r6, [r4, #0]
 8007b90:	6961      	ldr	r1, [r4, #20]
 8007b92:	1d18      	adds	r0, r3, #4
 8007b94:	6028      	str	r0, [r5, #0]
 8007b96:	0635      	lsls	r5, r6, #24
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0x1c4>
 8007b9c:	6019      	str	r1, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0x1ca>
 8007ba0:	0670      	lsls	r0, r6, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0x1c0>
 8007ba4:	8019      	strh	r1, [r3, #0]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	4615      	mov	r5, r2
 8007bac:	e7bc      	b.n	8007b28 <_printf_i+0x14c>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	602a      	str	r2, [r5, #0]
 8007bb4:	681d      	ldr	r5, [r3, #0]
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f7f8 fb78 	bl	80002b0 <memchr>
 8007bc0:	b108      	cbz	r0, 8007bc6 <_printf_i+0x1ea>
 8007bc2:	1b40      	subs	r0, r0, r5
 8007bc4:	6060      	str	r0, [r4, #4]
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd0:	e7aa      	b.n	8007b28 <_printf_i+0x14c>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	47d0      	blx	sl
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d0ad      	beq.n	8007b3c <_printf_i+0x160>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	079b      	lsls	r3, r3, #30
 8007be4:	d413      	bmi.n	8007c0e <_printf_i+0x232>
 8007be6:	68e0      	ldr	r0, [r4, #12]
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	4298      	cmp	r0, r3
 8007bec:	bfb8      	it	lt
 8007bee:	4618      	movlt	r0, r3
 8007bf0:	e7a6      	b.n	8007b40 <_printf_i+0x164>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	47d0      	blx	sl
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d09d      	beq.n	8007b3c <_printf_i+0x160>
 8007c00:	3501      	adds	r5, #1
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	9903      	ldr	r1, [sp, #12]
 8007c06:	1a5b      	subs	r3, r3, r1
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	dcf2      	bgt.n	8007bf2 <_printf_i+0x216>
 8007c0c:	e7eb      	b.n	8007be6 <_printf_i+0x20a>
 8007c0e:	2500      	movs	r5, #0
 8007c10:	f104 0619 	add.w	r6, r4, #25
 8007c14:	e7f5      	b.n	8007c02 <_printf_i+0x226>
 8007c16:	bf00      	nop
 8007c18:	080081e5 	.word	0x080081e5
 8007c1c:	080081f6 	.word	0x080081f6

08007c20 <memcpy>:
 8007c20:	440a      	add	r2, r1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c28:	d100      	bne.n	8007c2c <memcpy+0xc>
 8007c2a:	4770      	bx	lr
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c36:	4291      	cmp	r1, r2
 8007c38:	d1f9      	bne.n	8007c2e <memcpy+0xe>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <memmove>:
 8007c3c:	4288      	cmp	r0, r1
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	eb01 0402 	add.w	r4, r1, r2
 8007c44:	d902      	bls.n	8007c4c <memmove+0x10>
 8007c46:	4284      	cmp	r4, r0
 8007c48:	4623      	mov	r3, r4
 8007c4a:	d807      	bhi.n	8007c5c <memmove+0x20>
 8007c4c:	1e43      	subs	r3, r0, #1
 8007c4e:	42a1      	cmp	r1, r4
 8007c50:	d008      	beq.n	8007c64 <memmove+0x28>
 8007c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c5a:	e7f8      	b.n	8007c4e <memmove+0x12>
 8007c5c:	4402      	add	r2, r0
 8007c5e:	4601      	mov	r1, r0
 8007c60:	428a      	cmp	r2, r1
 8007c62:	d100      	bne.n	8007c66 <memmove+0x2a>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c6e:	e7f7      	b.n	8007c60 <memmove+0x24>

08007c70 <_free_r>:
 8007c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d044      	beq.n	8007d00 <_free_r+0x90>
 8007c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7a:	9001      	str	r0, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c82:	bfb8      	it	lt
 8007c84:	18e4      	addlt	r4, r4, r3
 8007c86:	f000 f913 	bl	8007eb0 <__malloc_lock>
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <_free_r+0x94>)
 8007c8c:	9801      	ldr	r0, [sp, #4]
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	b933      	cbnz	r3, 8007ca0 <_free_r+0x30>
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	6014      	str	r4, [r2, #0]
 8007c96:	b003      	add	sp, #12
 8007c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c9c:	f000 b90e 	b.w	8007ebc <__malloc_unlock>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d908      	bls.n	8007cb6 <_free_r+0x46>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf01      	itttt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	e7ed      	b.n	8007c92 <_free_r+0x22>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	b10b      	cbz	r3, 8007cc0 <_free_r+0x50>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d9fa      	bls.n	8007cb6 <_free_r+0x46>
 8007cc0:	6811      	ldr	r1, [r2, #0]
 8007cc2:	1855      	adds	r5, r2, r1
 8007cc4:	42a5      	cmp	r5, r4
 8007cc6:	d10b      	bne.n	8007ce0 <_free_r+0x70>
 8007cc8:	6824      	ldr	r4, [r4, #0]
 8007cca:	4421      	add	r1, r4
 8007ccc:	1854      	adds	r4, r2, r1
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6011      	str	r1, [r2, #0]
 8007cd2:	d1e0      	bne.n	8007c96 <_free_r+0x26>
 8007cd4:	681c      	ldr	r4, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	6053      	str	r3, [r2, #4]
 8007cda:	440c      	add	r4, r1
 8007cdc:	6014      	str	r4, [r2, #0]
 8007cde:	e7da      	b.n	8007c96 <_free_r+0x26>
 8007ce0:	d902      	bls.n	8007ce8 <_free_r+0x78>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	e7d6      	b.n	8007c96 <_free_r+0x26>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf04      	itt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	6063      	str	r3, [r4, #4]
 8007cf6:	bf04      	itt	eq
 8007cf8:	1949      	addeq	r1, r1, r5
 8007cfa:	6021      	streq	r1, [r4, #0]
 8007cfc:	6054      	str	r4, [r2, #4]
 8007cfe:	e7ca      	b.n	8007c96 <_free_r+0x26>
 8007d00:	b003      	add	sp, #12
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	24000228 	.word	0x24000228

08007d08 <sbrk_aligned>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4e0e      	ldr	r6, [pc, #56]	; (8007d44 <sbrk_aligned+0x3c>)
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	6831      	ldr	r1, [r6, #0]
 8007d10:	4605      	mov	r5, r0
 8007d12:	b911      	cbnz	r1, 8007d1a <sbrk_aligned+0x12>
 8007d14:	f000 f8bc 	bl	8007e90 <_sbrk_r>
 8007d18:	6030      	str	r0, [r6, #0]
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f8b7 	bl	8007e90 <_sbrk_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d00a      	beq.n	8007d3c <sbrk_aligned+0x34>
 8007d26:	1cc4      	adds	r4, r0, #3
 8007d28:	f024 0403 	bic.w	r4, r4, #3
 8007d2c:	42a0      	cmp	r0, r4
 8007d2e:	d007      	beq.n	8007d40 <sbrk_aligned+0x38>
 8007d30:	1a21      	subs	r1, r4, r0
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f8ac 	bl	8007e90 <_sbrk_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d101      	bne.n	8007d40 <sbrk_aligned+0x38>
 8007d3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d40:	4620      	mov	r0, r4
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	2400022c 	.word	0x2400022c

08007d48 <_malloc_r>:
 8007d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	1ccd      	adds	r5, r1, #3
 8007d4e:	f025 0503 	bic.w	r5, r5, #3
 8007d52:	3508      	adds	r5, #8
 8007d54:	2d0c      	cmp	r5, #12
 8007d56:	bf38      	it	cc
 8007d58:	250c      	movcc	r5, #12
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	db01      	blt.n	8007d64 <_malloc_r+0x1c>
 8007d60:	42a9      	cmp	r1, r5
 8007d62:	d905      	bls.n	8007d70 <_malloc_r+0x28>
 8007d64:	230c      	movs	r3, #12
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	2600      	movs	r6, #0
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	4e2e      	ldr	r6, [pc, #184]	; (8007e2c <_malloc_r+0xe4>)
 8007d72:	f000 f89d 	bl	8007eb0 <__malloc_lock>
 8007d76:	6833      	ldr	r3, [r6, #0]
 8007d78:	461c      	mov	r4, r3
 8007d7a:	bb34      	cbnz	r4, 8007dca <_malloc_r+0x82>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f7ff ffc2 	bl	8007d08 <sbrk_aligned>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	4604      	mov	r4, r0
 8007d88:	d14d      	bne.n	8007e26 <_malloc_r+0xde>
 8007d8a:	6834      	ldr	r4, [r6, #0]
 8007d8c:	4626      	mov	r6, r4
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d140      	bne.n	8007e14 <_malloc_r+0xcc>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	4631      	mov	r1, r6
 8007d96:	4638      	mov	r0, r7
 8007d98:	eb04 0803 	add.w	r8, r4, r3
 8007d9c:	f000 f878 	bl	8007e90 <_sbrk_r>
 8007da0:	4580      	cmp	r8, r0
 8007da2:	d13a      	bne.n	8007e1a <_malloc_r+0xd2>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	3503      	adds	r5, #3
 8007da8:	1aed      	subs	r5, r5, r3
 8007daa:	f025 0503 	bic.w	r5, r5, #3
 8007dae:	3508      	adds	r5, #8
 8007db0:	2d0c      	cmp	r5, #12
 8007db2:	bf38      	it	cc
 8007db4:	250c      	movcc	r5, #12
 8007db6:	4629      	mov	r1, r5
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ffa5 	bl	8007d08 <sbrk_aligned>
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d02b      	beq.n	8007e1a <_malloc_r+0xd2>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	442b      	add	r3, r5
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	e00e      	b.n	8007de8 <_malloc_r+0xa0>
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	1b52      	subs	r2, r2, r5
 8007dce:	d41e      	bmi.n	8007e0e <_malloc_r+0xc6>
 8007dd0:	2a0b      	cmp	r2, #11
 8007dd2:	d916      	bls.n	8007e02 <_malloc_r+0xba>
 8007dd4:	1961      	adds	r1, r4, r5
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	6025      	str	r5, [r4, #0]
 8007dda:	bf18      	it	ne
 8007ddc:	6059      	strne	r1, [r3, #4]
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	bf08      	it	eq
 8007de2:	6031      	streq	r1, [r6, #0]
 8007de4:	5162      	str	r2, [r4, r5]
 8007de6:	604b      	str	r3, [r1, #4]
 8007de8:	4638      	mov	r0, r7
 8007dea:	f104 060b 	add.w	r6, r4, #11
 8007dee:	f000 f865 	bl	8007ebc <__malloc_unlock>
 8007df2:	f026 0607 	bic.w	r6, r6, #7
 8007df6:	1d23      	adds	r3, r4, #4
 8007df8:	1af2      	subs	r2, r6, r3
 8007dfa:	d0b6      	beq.n	8007d6a <_malloc_r+0x22>
 8007dfc:	1b9b      	subs	r3, r3, r6
 8007dfe:	50a3      	str	r3, [r4, r2]
 8007e00:	e7b3      	b.n	8007d6a <_malloc_r+0x22>
 8007e02:	6862      	ldr	r2, [r4, #4]
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	bf0c      	ite	eq
 8007e08:	6032      	streq	r2, [r6, #0]
 8007e0a:	605a      	strne	r2, [r3, #4]
 8007e0c:	e7ec      	b.n	8007de8 <_malloc_r+0xa0>
 8007e0e:	4623      	mov	r3, r4
 8007e10:	6864      	ldr	r4, [r4, #4]
 8007e12:	e7b2      	b.n	8007d7a <_malloc_r+0x32>
 8007e14:	4634      	mov	r4, r6
 8007e16:	6876      	ldr	r6, [r6, #4]
 8007e18:	e7b9      	b.n	8007d8e <_malloc_r+0x46>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f000 f84c 	bl	8007ebc <__malloc_unlock>
 8007e24:	e7a1      	b.n	8007d6a <_malloc_r+0x22>
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	e7de      	b.n	8007de8 <_malloc_r+0xa0>
 8007e2a:	bf00      	nop
 8007e2c:	24000228 	.word	0x24000228

08007e30 <_realloc_r>:
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	4680      	mov	r8, r0
 8007e36:	4614      	mov	r4, r2
 8007e38:	460e      	mov	r6, r1
 8007e3a:	b921      	cbnz	r1, 8007e46 <_realloc_r+0x16>
 8007e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	4611      	mov	r1, r2
 8007e42:	f7ff bf81 	b.w	8007d48 <_malloc_r>
 8007e46:	b92a      	cbnz	r2, 8007e54 <_realloc_r+0x24>
 8007e48:	f7ff ff12 	bl	8007c70 <_free_r>
 8007e4c:	4625      	mov	r5, r4
 8007e4e:	4628      	mov	r0, r5
 8007e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e54:	f000 f838 	bl	8007ec8 <_malloc_usable_size_r>
 8007e58:	4284      	cmp	r4, r0
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	d802      	bhi.n	8007e64 <_realloc_r+0x34>
 8007e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e62:	d812      	bhi.n	8007e8a <_realloc_r+0x5a>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4640      	mov	r0, r8
 8007e68:	f7ff ff6e 	bl	8007d48 <_malloc_r>
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d0ed      	beq.n	8007e4e <_realloc_r+0x1e>
 8007e72:	42bc      	cmp	r4, r7
 8007e74:	4622      	mov	r2, r4
 8007e76:	4631      	mov	r1, r6
 8007e78:	bf28      	it	cs
 8007e7a:	463a      	movcs	r2, r7
 8007e7c:	f7ff fed0 	bl	8007c20 <memcpy>
 8007e80:	4631      	mov	r1, r6
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7ff fef4 	bl	8007c70 <_free_r>
 8007e88:	e7e1      	b.n	8007e4e <_realloc_r+0x1e>
 8007e8a:	4635      	mov	r5, r6
 8007e8c:	e7df      	b.n	8007e4e <_realloc_r+0x1e>
	...

08007e90 <_sbrk_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d06      	ldr	r5, [pc, #24]	; (8007eac <_sbrk_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	f7f8 ffdc 	bl	8000e58 <_sbrk>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_sbrk_r+0x1a>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_sbrk_r+0x1a>
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	24000230 	.word	0x24000230

08007eb0 <__malloc_lock>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__malloc_lock+0x8>)
 8007eb2:	f7ff bbcb 	b.w	800764c <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	24000224 	.word	0x24000224

08007ebc <__malloc_unlock>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__malloc_unlock+0x8>)
 8007ebe:	f7ff bbc6 	b.w	800764e <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	24000224 	.word	0x24000224

08007ec8 <_malloc_usable_size_r>:
 8007ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ecc:	1f18      	subs	r0, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfbc      	itt	lt
 8007ed2:	580b      	ldrlt	r3, [r1, r0]
 8007ed4:	18c0      	addlt	r0, r0, r3
 8007ed6:	4770      	bx	lr

08007ed8 <__udivmoddi4>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	4686      	mov	lr, r0
 8007ede:	468c      	mov	ip, r1
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	9e08      	ldr	r6, [sp, #32]
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	4674      	mov	r4, lr
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 80c2 	bne.w	8008074 <__udivmoddi4+0x19c>
 8007ef0:	4285      	cmp	r5, r0
 8007ef2:	fab2 f282 	clz	r2, r2
 8007ef6:	d945      	bls.n	8007f84 <__udivmoddi4+0xac>
 8007ef8:	b14a      	cbz	r2, 8007f0e <__udivmoddi4+0x36>
 8007efa:	f1c2 0320 	rsb	r3, r2, #32
 8007efe:	fa00 fc02 	lsl.w	ip, r0, r2
 8007f02:	fa2e f303 	lsr.w	r3, lr, r3
 8007f06:	4095      	lsls	r5, r2
 8007f08:	ea43 0c0c 	orr.w	ip, r3, ip
 8007f0c:	4094      	lsls	r4, r2
 8007f0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007f12:	b2a8      	uxth	r0, r5
 8007f14:	fbbc f8fe 	udiv	r8, ip, lr
 8007f18:	0c23      	lsrs	r3, r4, #16
 8007f1a:	fb0e cc18 	mls	ip, lr, r8, ip
 8007f1e:	fb08 f900 	mul.w	r9, r8, r0
 8007f22:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007f26:	4599      	cmp	r9, r3
 8007f28:	d928      	bls.n	8007f7c <__udivmoddi4+0xa4>
 8007f2a:	18eb      	adds	r3, r5, r3
 8007f2c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8007f30:	d204      	bcs.n	8007f3c <__udivmoddi4+0x64>
 8007f32:	4599      	cmp	r9, r3
 8007f34:	d902      	bls.n	8007f3c <__udivmoddi4+0x64>
 8007f36:	f1a8 0702 	sub.w	r7, r8, #2
 8007f3a:	442b      	add	r3, r5
 8007f3c:	eba3 0309 	sub.w	r3, r3, r9
 8007f40:	b2a4      	uxth	r4, r4
 8007f42:	fbb3 fcfe 	udiv	ip, r3, lr
 8007f46:	fb0e 331c 	mls	r3, lr, ip, r3
 8007f4a:	fb0c f000 	mul.w	r0, ip, r0
 8007f4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007f52:	42a0      	cmp	r0, r4
 8007f54:	d914      	bls.n	8007f80 <__udivmoddi4+0xa8>
 8007f56:	192c      	adds	r4, r5, r4
 8007f58:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8007f5c:	d204      	bcs.n	8007f68 <__udivmoddi4+0x90>
 8007f5e:	42a0      	cmp	r0, r4
 8007f60:	d902      	bls.n	8007f68 <__udivmoddi4+0x90>
 8007f62:	f1ac 0302 	sub.w	r3, ip, #2
 8007f66:	442c      	add	r4, r5
 8007f68:	1a24      	subs	r4, r4, r0
 8007f6a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8007f6e:	b11e      	cbz	r6, 8007f78 <__udivmoddi4+0xa0>
 8007f70:	40d4      	lsrs	r4, r2
 8007f72:	2300      	movs	r3, #0
 8007f74:	6034      	str	r4, [r6, #0]
 8007f76:	6073      	str	r3, [r6, #4]
 8007f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7c:	4647      	mov	r7, r8
 8007f7e:	e7dd      	b.n	8007f3c <__udivmoddi4+0x64>
 8007f80:	4663      	mov	r3, ip
 8007f82:	e7f1      	b.n	8007f68 <__udivmoddi4+0x90>
 8007f84:	bb92      	cbnz	r2, 8007fec <__udivmoddi4+0x114>
 8007f86:	1b43      	subs	r3, r0, r5
 8007f88:	2101      	movs	r1, #1
 8007f8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007f8e:	b2af      	uxth	r7, r5
 8007f90:	fbb3 fcfe 	udiv	ip, r3, lr
 8007f94:	0c20      	lsrs	r0, r4, #16
 8007f96:	fb0e 331c 	mls	r3, lr, ip, r3
 8007f9a:	fb0c f807 	mul.w	r8, ip, r7
 8007f9e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8007fa2:	4598      	cmp	r8, r3
 8007fa4:	d962      	bls.n	800806c <__udivmoddi4+0x194>
 8007fa6:	18eb      	adds	r3, r5, r3
 8007fa8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007fac:	d204      	bcs.n	8007fb8 <__udivmoddi4+0xe0>
 8007fae:	4598      	cmp	r8, r3
 8007fb0:	d902      	bls.n	8007fb8 <__udivmoddi4+0xe0>
 8007fb2:	f1ac 0002 	sub.w	r0, ip, #2
 8007fb6:	442b      	add	r3, r5
 8007fb8:	eba3 0308 	sub.w	r3, r3, r8
 8007fbc:	b2a4      	uxth	r4, r4
 8007fbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8007fc2:	fb0e 331c 	mls	r3, lr, ip, r3
 8007fc6:	fb0c f707 	mul.w	r7, ip, r7
 8007fca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007fce:	42a7      	cmp	r7, r4
 8007fd0:	d94e      	bls.n	8008070 <__udivmoddi4+0x198>
 8007fd2:	192c      	adds	r4, r5, r4
 8007fd4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8007fd8:	d204      	bcs.n	8007fe4 <__udivmoddi4+0x10c>
 8007fda:	42a7      	cmp	r7, r4
 8007fdc:	d902      	bls.n	8007fe4 <__udivmoddi4+0x10c>
 8007fde:	f1ac 0302 	sub.w	r3, ip, #2
 8007fe2:	442c      	add	r4, r5
 8007fe4:	1be4      	subs	r4, r4, r7
 8007fe6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007fea:	e7c0      	b.n	8007f6e <__udivmoddi4+0x96>
 8007fec:	f1c2 0320 	rsb	r3, r2, #32
 8007ff0:	fa20 f103 	lsr.w	r1, r0, r3
 8007ff4:	4095      	lsls	r5, r2
 8007ff6:	4090      	lsls	r0, r2
 8007ff8:	fa2e f303 	lsr.w	r3, lr, r3
 8007ffc:	4303      	orrs	r3, r0
 8007ffe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008002:	b2af      	uxth	r7, r5
 8008004:	fbb1 fcfe 	udiv	ip, r1, lr
 8008008:	fb0e 101c 	mls	r0, lr, ip, r1
 800800c:	0c19      	lsrs	r1, r3, #16
 800800e:	fb0c f807 	mul.w	r8, ip, r7
 8008012:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008016:	4588      	cmp	r8, r1
 8008018:	fa04 f402 	lsl.w	r4, r4, r2
 800801c:	d922      	bls.n	8008064 <__udivmoddi4+0x18c>
 800801e:	1869      	adds	r1, r5, r1
 8008020:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008024:	d204      	bcs.n	8008030 <__udivmoddi4+0x158>
 8008026:	4588      	cmp	r8, r1
 8008028:	d902      	bls.n	8008030 <__udivmoddi4+0x158>
 800802a:	f1ac 0002 	sub.w	r0, ip, #2
 800802e:	4429      	add	r1, r5
 8008030:	eba1 0108 	sub.w	r1, r1, r8
 8008034:	b29b      	uxth	r3, r3
 8008036:	fbb1 fcfe 	udiv	ip, r1, lr
 800803a:	fb0e 111c 	mls	r1, lr, ip, r1
 800803e:	fb0c f707 	mul.w	r7, ip, r7
 8008042:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008046:	429f      	cmp	r7, r3
 8008048:	d90e      	bls.n	8008068 <__udivmoddi4+0x190>
 800804a:	18eb      	adds	r3, r5, r3
 800804c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8008050:	d204      	bcs.n	800805c <__udivmoddi4+0x184>
 8008052:	429f      	cmp	r7, r3
 8008054:	d902      	bls.n	800805c <__udivmoddi4+0x184>
 8008056:	f1ac 0102 	sub.w	r1, ip, #2
 800805a:	442b      	add	r3, r5
 800805c:	1bdb      	subs	r3, r3, r7
 800805e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008062:	e792      	b.n	8007f8a <__udivmoddi4+0xb2>
 8008064:	4660      	mov	r0, ip
 8008066:	e7e3      	b.n	8008030 <__udivmoddi4+0x158>
 8008068:	4661      	mov	r1, ip
 800806a:	e7f7      	b.n	800805c <__udivmoddi4+0x184>
 800806c:	4660      	mov	r0, ip
 800806e:	e7a3      	b.n	8007fb8 <__udivmoddi4+0xe0>
 8008070:	4663      	mov	r3, ip
 8008072:	e7b7      	b.n	8007fe4 <__udivmoddi4+0x10c>
 8008074:	4283      	cmp	r3, r0
 8008076:	d906      	bls.n	8008086 <__udivmoddi4+0x1ae>
 8008078:	b916      	cbnz	r6, 8008080 <__udivmoddi4+0x1a8>
 800807a:	2100      	movs	r1, #0
 800807c:	4608      	mov	r0, r1
 800807e:	e77b      	b.n	8007f78 <__udivmoddi4+0xa0>
 8008080:	e9c6 e000 	strd	lr, r0, [r6]
 8008084:	e7f9      	b.n	800807a <__udivmoddi4+0x1a2>
 8008086:	fab3 f783 	clz	r7, r3
 800808a:	b98f      	cbnz	r7, 80080b0 <__udivmoddi4+0x1d8>
 800808c:	4283      	cmp	r3, r0
 800808e:	d301      	bcc.n	8008094 <__udivmoddi4+0x1bc>
 8008090:	4572      	cmp	r2, lr
 8008092:	d808      	bhi.n	80080a6 <__udivmoddi4+0x1ce>
 8008094:	ebbe 0402 	subs.w	r4, lr, r2
 8008098:	eb60 0303 	sbc.w	r3, r0, r3
 800809c:	2001      	movs	r0, #1
 800809e:	469c      	mov	ip, r3
 80080a0:	b91e      	cbnz	r6, 80080aa <__udivmoddi4+0x1d2>
 80080a2:	2100      	movs	r1, #0
 80080a4:	e768      	b.n	8007f78 <__udivmoddi4+0xa0>
 80080a6:	4638      	mov	r0, r7
 80080a8:	e7fa      	b.n	80080a0 <__udivmoddi4+0x1c8>
 80080aa:	e9c6 4c00 	strd	r4, ip, [r6]
 80080ae:	e7f8      	b.n	80080a2 <__udivmoddi4+0x1ca>
 80080b0:	f1c7 0c20 	rsb	ip, r7, #32
 80080b4:	40bb      	lsls	r3, r7
 80080b6:	fa22 f40c 	lsr.w	r4, r2, ip
 80080ba:	431c      	orrs	r4, r3
 80080bc:	fa2e f10c 	lsr.w	r1, lr, ip
 80080c0:	fa20 f30c 	lsr.w	r3, r0, ip
 80080c4:	40b8      	lsls	r0, r7
 80080c6:	4301      	orrs	r1, r0
 80080c8:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80080cc:	fa0e f507 	lsl.w	r5, lr, r7
 80080d0:	fbb3 f8f9 	udiv	r8, r3, r9
 80080d4:	fa1f fe84 	uxth.w	lr, r4
 80080d8:	fb09 3018 	mls	r0, r9, r8, r3
 80080dc:	0c0b      	lsrs	r3, r1, #16
 80080de:	fb08 fa0e 	mul.w	sl, r8, lr
 80080e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080e6:	459a      	cmp	sl, r3
 80080e8:	fa02 f207 	lsl.w	r2, r2, r7
 80080ec:	d940      	bls.n	8008170 <__udivmoddi4+0x298>
 80080ee:	18e3      	adds	r3, r4, r3
 80080f0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80080f4:	d204      	bcs.n	8008100 <__udivmoddi4+0x228>
 80080f6:	459a      	cmp	sl, r3
 80080f8:	d902      	bls.n	8008100 <__udivmoddi4+0x228>
 80080fa:	f1a8 0002 	sub.w	r0, r8, #2
 80080fe:	4423      	add	r3, r4
 8008100:	eba3 030a 	sub.w	r3, r3, sl
 8008104:	b289      	uxth	r1, r1
 8008106:	fbb3 f8f9 	udiv	r8, r3, r9
 800810a:	fb09 3318 	mls	r3, r9, r8, r3
 800810e:	fb08 fe0e 	mul.w	lr, r8, lr
 8008112:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008116:	458e      	cmp	lr, r1
 8008118:	d92c      	bls.n	8008174 <__udivmoddi4+0x29c>
 800811a:	1861      	adds	r1, r4, r1
 800811c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8008120:	d204      	bcs.n	800812c <__udivmoddi4+0x254>
 8008122:	458e      	cmp	lr, r1
 8008124:	d902      	bls.n	800812c <__udivmoddi4+0x254>
 8008126:	f1a8 0302 	sub.w	r3, r8, #2
 800812a:	4421      	add	r1, r4
 800812c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008130:	fba0 9802 	umull	r9, r8, r0, r2
 8008134:	eba1 010e 	sub.w	r1, r1, lr
 8008138:	4541      	cmp	r1, r8
 800813a:	46ce      	mov	lr, r9
 800813c:	4643      	mov	r3, r8
 800813e:	d302      	bcc.n	8008146 <__udivmoddi4+0x26e>
 8008140:	d106      	bne.n	8008150 <__udivmoddi4+0x278>
 8008142:	454d      	cmp	r5, r9
 8008144:	d204      	bcs.n	8008150 <__udivmoddi4+0x278>
 8008146:	ebb9 0e02 	subs.w	lr, r9, r2
 800814a:	eb68 0304 	sbc.w	r3, r8, r4
 800814e:	3801      	subs	r0, #1
 8008150:	2e00      	cmp	r6, #0
 8008152:	d0a6      	beq.n	80080a2 <__udivmoddi4+0x1ca>
 8008154:	ebb5 020e 	subs.w	r2, r5, lr
 8008158:	eb61 0103 	sbc.w	r1, r1, r3
 800815c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8008160:	fa22 f307 	lsr.w	r3, r2, r7
 8008164:	ea4c 0303 	orr.w	r3, ip, r3
 8008168:	40f9      	lsrs	r1, r7
 800816a:	e9c6 3100 	strd	r3, r1, [r6]
 800816e:	e798      	b.n	80080a2 <__udivmoddi4+0x1ca>
 8008170:	4640      	mov	r0, r8
 8008172:	e7c5      	b.n	8008100 <__udivmoddi4+0x228>
 8008174:	4643      	mov	r3, r8
 8008176:	e7d9      	b.n	800812c <__udivmoddi4+0x254>

08008178 <_init>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr

08008184 <_fini>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr
